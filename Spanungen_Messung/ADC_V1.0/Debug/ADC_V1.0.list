
ADC_V1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ab4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004c54  08004c54  00005c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ccc  08004ccc  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ccc  08004ccc  00005ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cd4  08004cd4  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cd4  08004cd4  00005cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004cd8  08004cd8  00005cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004cdc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          0000025c  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002b8  200002b8  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ace6  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001855  00000000  00000000  00010d72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000810  00000000  00000000  000125c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000063a  00000000  00000000  00012dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020a2e  00000000  00000000  00013412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c839  00000000  00000000  00033e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9b4e  00000000  00000000  00040679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010a1c7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002538  00000000  00000000  0010a20c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0010c744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004c3c 	.word	0x08004c3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004c3c 	.word	0x08004c3c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 faf3 	bl	8000870 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f825 	bl	80002d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 f921 	bl	80004d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000292:	f000 f8ef 	bl	8000474 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000296:	f000 f87d 	bl	8000394 <MX_ADC1_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //get adc value
	  HAL_ADC_Start(&hadc1); // Start ADC Conversion
 800029a:	480d      	ldr	r0, [pc, #52]	@ (80002d0 <main+0x50>)
 800029c:	f000 fd6c 	bl	8000d78 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); // Poll ADC1 Peripheral
 80002a0:	f04f 31ff 	mov.w	r1, #4294967295
 80002a4:	480a      	ldr	r0, [pc, #40]	@ (80002d0 <main+0x50>)
 80002a6:	f000 fe7d 	bl	8000fa4 <HAL_ADC_PollForConversion>
	  adc_values = HAL_ADC_GetValue(&hadc1); // Read ADC Conversion Resulte
 80002aa:	4809      	ldr	r0, [pc, #36]	@ (80002d0 <main+0x50>)
 80002ac:	f000 ff7c 	bl	80011a8 <HAL_ADC_GetValue>
 80002b0:	4603      	mov	r3, r0
 80002b2:	4a08      	ldr	r2, [pc, #32]	@ (80002d4 <main+0x54>)
 80002b4:	6013      	str	r3, [r2, #0]
	  uint32_t voltage = adc_values - 100;
 80002b6:	4b07      	ldr	r3, [pc, #28]	@ (80002d4 <main+0x54>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	3b64      	subs	r3, #100	@ 0x64
 80002bc:	607b      	str	r3, [r7, #4]

  	  send_adc_data_over_uart(voltage);
 80002be:	6878      	ldr	r0, [r7, #4]
 80002c0:	f000 f96e 	bl	80005a0 <send_adc_data_over_uart>
  	  HAL_Delay(100);
 80002c4:	2064      	movs	r0, #100	@ 0x64
 80002c6:	f000 fb39 	bl	800093c <HAL_Delay>
  {
 80002ca:	bf00      	nop
 80002cc:	e7e5      	b.n	800029a <main+0x1a>
 80002ce:	bf00      	nop
 80002d0:	20000078 	.word	0x20000078
 80002d4:	20000150 	.word	0x20000150

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b0a6      	sub	sp, #152	@ 0x98
 80002dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002de:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80002e2:	2228      	movs	r2, #40	@ 0x28
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f004 f828 	bl	800433c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ec:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	605a      	str	r2, [r3, #4]
 80002f6:	609a      	str	r2, [r3, #8]
 80002f8:	60da      	str	r2, [r3, #12]
 80002fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2258      	movs	r2, #88	@ 0x58
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f004 f81a 	bl	800433c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000308:	2302      	movs	r3, #2
 800030a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030c:	2301      	movs	r3, #1
 800030e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000310:	2310      	movs	r3, #16
 8000312:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000316:	2302      	movs	r3, #2
 8000318:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800031c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000320:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000324:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000328:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800032c:	2300      	movs	r3, #0
 800032e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000332:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000336:	4618      	mov	r0, r3
 8000338:	f001 fe72 	bl	8002020 <HAL_RCC_OscConfig>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000342:	f000 f94b 	bl	80005dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000346:	230f      	movs	r3, #15
 8000348:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800034a:	2302      	movs	r3, #2
 800034c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034e:	2300      	movs	r3, #0
 8000350:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000352:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000356:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800035c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000360:	2102      	movs	r1, #2
 8000362:	4618      	mov	r0, r3
 8000364:	f002 feb0 	bl	80030c8 <HAL_RCC_ClockConfig>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800036e:	f000 f935 	bl	80005dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000372:	2302      	movs	r3, #2
 8000374:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000376:	2300      	movs	r3, #0
 8000378:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	4618      	mov	r0, r3
 800037e:	f003 f8c3 	bl	8003508 <HAL_RCCEx_PeriphCLKConfig>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000388:	f000 f928 	bl	80005dc <Error_Handler>
  }
}
 800038c:	bf00      	nop
 800038e:	3798      	adds	r7, #152	@ 0x98
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b08a      	sub	sp, #40	@ 0x28
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800039a:	f107 031c 	add.w	r3, r7, #28
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	609a      	str	r2, [r3, #8]
 80003b0:	60da      	str	r2, [r3, #12]
 80003b2:	611a      	str	r2, [r3, #16]
 80003b4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003b6:	4b2e      	ldr	r3, [pc, #184]	@ (8000470 <MX_ADC1_Init+0xdc>)
 80003b8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80003bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80003be:	4b2c      	ldr	r3, [pc, #176]	@ (8000470 <MX_ADC1_Init+0xdc>)
 80003c0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80003c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000470 <MX_ADC1_Init+0xdc>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003cc:	4b28      	ldr	r3, [pc, #160]	@ (8000470 <MX_ADC1_Init+0xdc>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003d2:	4b27      	ldr	r3, [pc, #156]	@ (8000470 <MX_ADC1_Init+0xdc>)
 80003d4:	2201      	movs	r2, #1
 80003d6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003d8:	4b25      	ldr	r3, [pc, #148]	@ (8000470 <MX_ADC1_Init+0xdc>)
 80003da:	2200      	movs	r2, #0
 80003dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003e0:	4b23      	ldr	r3, [pc, #140]	@ (8000470 <MX_ADC1_Init+0xdc>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003e6:	4b22      	ldr	r3, [pc, #136]	@ (8000470 <MX_ADC1_Init+0xdc>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003ec:	4b20      	ldr	r3, [pc, #128]	@ (8000470 <MX_ADC1_Init+0xdc>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80003f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000470 <MX_ADC1_Init+0xdc>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000470 <MX_ADC1_Init+0xdc>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000400:	4b1b      	ldr	r3, [pc, #108]	@ (8000470 <MX_ADC1_Init+0xdc>)
 8000402:	2204      	movs	r2, #4
 8000404:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000406:	4b1a      	ldr	r3, [pc, #104]	@ (8000470 <MX_ADC1_Init+0xdc>)
 8000408:	2200      	movs	r2, #0
 800040a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800040c:	4b18      	ldr	r3, [pc, #96]	@ (8000470 <MX_ADC1_Init+0xdc>)
 800040e:	2200      	movs	r2, #0
 8000410:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000412:	4817      	ldr	r0, [pc, #92]	@ (8000470 <MX_ADC1_Init+0xdc>)
 8000414:	f000 fab6 	bl	8000984 <HAL_ADC_Init>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800041e:	f000 f8dd 	bl	80005dc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000422:	2300      	movs	r3, #0
 8000424:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000426:	f107 031c 	add.w	r3, r7, #28
 800042a:	4619      	mov	r1, r3
 800042c:	4810      	ldr	r0, [pc, #64]	@ (8000470 <MX_ADC1_Init+0xdc>)
 800042e:	f001 f9b3 	bl	8001798 <HAL_ADCEx_MultiModeConfigChannel>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000438:	f000 f8d0 	bl	80005dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800043c:	2301      	movs	r3, #1
 800043e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000440:	2301      	movs	r3, #1
 8000442:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000444:	2300      	movs	r3, #0
 8000446:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000448:	2300      	movs	r3, #0
 800044a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800044c:	2300      	movs	r3, #0
 800044e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000450:	2300      	movs	r3, #0
 8000452:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000454:	1d3b      	adds	r3, r7, #4
 8000456:	4619      	mov	r1, r3
 8000458:	4805      	ldr	r0, [pc, #20]	@ (8000470 <MX_ADC1_Init+0xdc>)
 800045a:	f000 feb3 	bl	80011c4 <HAL_ADC_ConfigChannel>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000464:	f000 f8ba 	bl	80005dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000468:	bf00      	nop
 800046a:	3728      	adds	r7, #40	@ 0x28
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	20000078 	.word	0x20000078

08000474 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000478:	4b14      	ldr	r3, [pc, #80]	@ (80004cc <MX_USART2_UART_Init+0x58>)
 800047a:	4a15      	ldr	r2, [pc, #84]	@ (80004d0 <MX_USART2_UART_Init+0x5c>)
 800047c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800047e:	4b13      	ldr	r3, [pc, #76]	@ (80004cc <MX_USART2_UART_Init+0x58>)
 8000480:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000484:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000486:	4b11      	ldr	r3, [pc, #68]	@ (80004cc <MX_USART2_UART_Init+0x58>)
 8000488:	2200      	movs	r2, #0
 800048a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800048c:	4b0f      	ldr	r3, [pc, #60]	@ (80004cc <MX_USART2_UART_Init+0x58>)
 800048e:	2200      	movs	r2, #0
 8000490:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000492:	4b0e      	ldr	r3, [pc, #56]	@ (80004cc <MX_USART2_UART_Init+0x58>)
 8000494:	2200      	movs	r2, #0
 8000496:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000498:	4b0c      	ldr	r3, [pc, #48]	@ (80004cc <MX_USART2_UART_Init+0x58>)
 800049a:	220c      	movs	r2, #12
 800049c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800049e:	4b0b      	ldr	r3, [pc, #44]	@ (80004cc <MX_USART2_UART_Init+0x58>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004a4:	4b09      	ldr	r3, [pc, #36]	@ (80004cc <MX_USART2_UART_Init+0x58>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004aa:	4b08      	ldr	r3, [pc, #32]	@ (80004cc <MX_USART2_UART_Init+0x58>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004b0:	4b06      	ldr	r3, [pc, #24]	@ (80004cc <MX_USART2_UART_Init+0x58>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004b6:	4805      	ldr	r0, [pc, #20]	@ (80004cc <MX_USART2_UART_Init+0x58>)
 80004b8:	f003 fa44 	bl	8003944 <HAL_UART_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004c2:	f000 f88b 	bl	80005dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	200000c8 	.word	0x200000c8
 80004d0:	40004400 	.word	0x40004400

080004d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08a      	sub	sp, #40	@ 0x28
 80004d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	f107 0314 	add.w	r3, r7, #20
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
 80004e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ea:	4b2b      	ldr	r3, [pc, #172]	@ (8000598 <MX_GPIO_Init+0xc4>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	4a2a      	ldr	r2, [pc, #168]	@ (8000598 <MX_GPIO_Init+0xc4>)
 80004f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80004f4:	6153      	str	r3, [r2, #20]
 80004f6:	4b28      	ldr	r3, [pc, #160]	@ (8000598 <MX_GPIO_Init+0xc4>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000502:	4b25      	ldr	r3, [pc, #148]	@ (8000598 <MX_GPIO_Init+0xc4>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	4a24      	ldr	r2, [pc, #144]	@ (8000598 <MX_GPIO_Init+0xc4>)
 8000508:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800050c:	6153      	str	r3, [r2, #20]
 800050e:	4b22      	ldr	r3, [pc, #136]	@ (8000598 <MX_GPIO_Init+0xc4>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051a:	4b1f      	ldr	r3, [pc, #124]	@ (8000598 <MX_GPIO_Init+0xc4>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	4a1e      	ldr	r2, [pc, #120]	@ (8000598 <MX_GPIO_Init+0xc4>)
 8000520:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000524:	6153      	str	r3, [r2, #20]
 8000526:	4b1c      	ldr	r3, [pc, #112]	@ (8000598 <MX_GPIO_Init+0xc4>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000532:	4b19      	ldr	r3, [pc, #100]	@ (8000598 <MX_GPIO_Init+0xc4>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	4a18      	ldr	r2, [pc, #96]	@ (8000598 <MX_GPIO_Init+0xc4>)
 8000538:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800053c:	6153      	str	r3, [r2, #20]
 800053e:	4b16      	ldr	r3, [pc, #88]	@ (8000598 <MX_GPIO_Init+0xc4>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	2120      	movs	r1, #32
 800054e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000552:	f001 fd4d 	bl	8001ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000556:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800055a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800055c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000562:	2300      	movs	r3, #0
 8000564:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	4619      	mov	r1, r3
 800056c:	480b      	ldr	r0, [pc, #44]	@ (800059c <MX_GPIO_Init+0xc8>)
 800056e:	f001 fbb5 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000572:	2320      	movs	r3, #32
 8000574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000576:	2301      	movs	r3, #1
 8000578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	2300      	movs	r3, #0
 800057c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057e:	2300      	movs	r3, #0
 8000580:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	4619      	mov	r1, r3
 8000588:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800058c:	f001 fba6 	bl	8001cdc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000590:	bf00      	nop
 8000592:	3728      	adds	r7, #40	@ 0x28
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40021000 	.word	0x40021000
 800059c:	48000800 	.word	0x48000800

080005a0 <send_adc_data_over_uart>:

/* USER CODE BEGIN 4 */
void send_adc_data_over_uart(uint32_t voltage) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]

        int len = snprintf(uart_buffer, sizeof(uart_buffer), "/* %lu */\r\n", voltage);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4a09      	ldr	r2, [pc, #36]	@ (80005d0 <send_adc_data_over_uart+0x30>)
 80005ac:	2112      	movs	r1, #18
 80005ae:	4809      	ldr	r0, [pc, #36]	@ (80005d4 <send_adc_data_over_uart+0x34>)
 80005b0:	f003 fe90 	bl	80042d4 <sniprintf>
 80005b4:	60f8      	str	r0, [r7, #12]

        HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, len, HAL_MAX_DELAY);
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295
 80005be:	4905      	ldr	r1, [pc, #20]	@ (80005d4 <send_adc_data_over_uart+0x34>)
 80005c0:	4805      	ldr	r0, [pc, #20]	@ (80005d8 <send_adc_data_over_uart+0x38>)
 80005c2:	f003 fa0d 	bl	80039e0 <HAL_UART_Transmit>
}
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	08004c54 	.word	0x08004c54
 80005d4:	20000154 	.word	0x20000154
 80005d8:	200000c8 	.word	0x200000c8

080005dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e0:	b672      	cpsid	i
}
 80005e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <Error_Handler+0x8>

080005e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ee:	4b0f      	ldr	r3, [pc, #60]	@ (800062c <HAL_MspInit+0x44>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	4a0e      	ldr	r2, [pc, #56]	@ (800062c <HAL_MspInit+0x44>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6193      	str	r3, [r2, #24]
 80005fa:	4b0c      	ldr	r3, [pc, #48]	@ (800062c <HAL_MspInit+0x44>)
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000606:	4b09      	ldr	r3, [pc, #36]	@ (800062c <HAL_MspInit+0x44>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	4a08      	ldr	r2, [pc, #32]	@ (800062c <HAL_MspInit+0x44>)
 800060c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000610:	61d3      	str	r3, [r2, #28]
 8000612:	4b06      	ldr	r3, [pc, #24]	@ (800062c <HAL_MspInit+0x44>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800061e:	2007      	movs	r0, #7
 8000620:	f001 fb28 	bl	8001c74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40021000 	.word	0x40021000

08000630 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	@ 0x28
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000650:	d124      	bne.n	800069c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000652:	4b14      	ldr	r3, [pc, #80]	@ (80006a4 <HAL_ADC_MspInit+0x74>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	4a13      	ldr	r2, [pc, #76]	@ (80006a4 <HAL_ADC_MspInit+0x74>)
 8000658:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065c:	6153      	str	r3, [r2, #20]
 800065e:	4b11      	ldr	r3, [pc, #68]	@ (80006a4 <HAL_ADC_MspInit+0x74>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	4b0e      	ldr	r3, [pc, #56]	@ (80006a4 <HAL_ADC_MspInit+0x74>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	4a0d      	ldr	r2, [pc, #52]	@ (80006a4 <HAL_ADC_MspInit+0x74>)
 8000670:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000674:	6153      	str	r3, [r2, #20]
 8000676:	4b0b      	ldr	r3, [pc, #44]	@ (80006a4 <HAL_ADC_MspInit+0x74>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000682:	2301      	movs	r3, #1
 8000684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000686:	2303      	movs	r3, #3
 8000688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	4619      	mov	r1, r3
 8000694:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000698:	f001 fb20 	bl	8001cdc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800069c:	bf00      	nop
 800069e:	3728      	adds	r7, #40	@ 0x28
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40021000 	.word	0x40021000

080006a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	@ 0x28
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a17      	ldr	r2, [pc, #92]	@ (8000724 <HAL_UART_MspInit+0x7c>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d128      	bne.n	800071c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006ca:	4b17      	ldr	r3, [pc, #92]	@ (8000728 <HAL_UART_MspInit+0x80>)
 80006cc:	69db      	ldr	r3, [r3, #28]
 80006ce:	4a16      	ldr	r2, [pc, #88]	@ (8000728 <HAL_UART_MspInit+0x80>)
 80006d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006d4:	61d3      	str	r3, [r2, #28]
 80006d6:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <HAL_UART_MspInit+0x80>)
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006de:	613b      	str	r3, [r7, #16]
 80006e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <HAL_UART_MspInit+0x80>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	4a10      	ldr	r2, [pc, #64]	@ (8000728 <HAL_UART_MspInit+0x80>)
 80006e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006ec:	6153      	str	r3, [r2, #20]
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <HAL_UART_MspInit+0x80>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006fa:	230c      	movs	r3, #12
 80006fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fe:	2302      	movs	r3, #2
 8000700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	2300      	movs	r3, #0
 8000708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800070a:	2307      	movs	r3, #7
 800070c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	4619      	mov	r1, r3
 8000714:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000718:	f001 fae0 	bl	8001cdc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800071c:	bf00      	nop
 800071e:	3728      	adds	r7, #40	@ 0x28
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40004400 	.word	0x40004400
 8000728:	40021000 	.word	0x40021000

0800072c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <NMI_Handler+0x4>

08000734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <HardFault_Handler+0x4>

0800073c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <MemManage_Handler+0x4>

08000744 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <BusFault_Handler+0x4>

0800074c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <UsageFault_Handler+0x4>

08000754 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr

08000762 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000782:	f000 f8bb 	bl	80008fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000794:	4a14      	ldr	r2, [pc, #80]	@ (80007e8 <_sbrk+0x5c>)
 8000796:	4b15      	ldr	r3, [pc, #84]	@ (80007ec <_sbrk+0x60>)
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007a0:	4b13      	ldr	r3, [pc, #76]	@ (80007f0 <_sbrk+0x64>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d102      	bne.n	80007ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007a8:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <_sbrk+0x64>)
 80007aa:	4a12      	ldr	r2, [pc, #72]	@ (80007f4 <_sbrk+0x68>)
 80007ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ae:	4b10      	ldr	r3, [pc, #64]	@ (80007f0 <_sbrk+0x64>)
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	693a      	ldr	r2, [r7, #16]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d207      	bcs.n	80007cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007bc:	f003 fdc6 	bl	800434c <__errno>
 80007c0:	4603      	mov	r3, r0
 80007c2:	220c      	movs	r2, #12
 80007c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007c6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ca:	e009      	b.n	80007e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007cc:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <_sbrk+0x64>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007d2:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <_sbrk+0x64>)
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4413      	add	r3, r2
 80007da:	4a05      	ldr	r2, [pc, #20]	@ (80007f0 <_sbrk+0x64>)
 80007dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007de:	68fb      	ldr	r3, [r7, #12]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3718      	adds	r7, #24
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20010000 	.word	0x20010000
 80007ec:	00000400 	.word	0x00000400
 80007f0:	20000168 	.word	0x20000168
 80007f4:	200002b8 	.word	0x200002b8

080007f8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007fc:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <SystemInit+0x20>)
 80007fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000802:	4a05      	ldr	r2, [pc, #20]	@ (8000818 <SystemInit+0x20>)
 8000804:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000808:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800081c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000854 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000820:	f7ff ffea 	bl	80007f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000824:	480c      	ldr	r0, [pc, #48]	@ (8000858 <LoopForever+0x6>)
  ldr r1, =_edata
 8000826:	490d      	ldr	r1, [pc, #52]	@ (800085c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000828:	4a0d      	ldr	r2, [pc, #52]	@ (8000860 <LoopForever+0xe>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800082c:	e002      	b.n	8000834 <LoopCopyDataInit>

0800082e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000832:	3304      	adds	r3, #4

08000834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000838:	d3f9      	bcc.n	800082e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800083a:	4a0a      	ldr	r2, [pc, #40]	@ (8000864 <LoopForever+0x12>)
  ldr r4, =_ebss
 800083c:	4c0a      	ldr	r4, [pc, #40]	@ (8000868 <LoopForever+0x16>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000840:	e001      	b.n	8000846 <LoopFillZerobss>

08000842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000844:	3204      	adds	r2, #4

08000846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000848:	d3fb      	bcc.n	8000842 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800084a:	f003 fd85 	bl	8004358 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800084e:	f7ff fd17 	bl	8000280 <main>

08000852 <LoopForever>:

LoopForever:
    b LoopForever
 8000852:	e7fe      	b.n	8000852 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000854:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800085c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000860:	08004cdc 	.word	0x08004cdc
  ldr r2, =_sbss
 8000864:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000868:	200002b8 	.word	0x200002b8

0800086c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800086c:	e7fe      	b.n	800086c <ADC1_2_IRQHandler>
	...

08000870 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000874:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <HAL_Init+0x28>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a07      	ldr	r2, [pc, #28]	@ (8000898 <HAL_Init+0x28>)
 800087a:	f043 0310 	orr.w	r3, r3, #16
 800087e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000880:	2003      	movs	r0, #3
 8000882:	f001 f9f7 	bl	8001c74 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000886:	2000      	movs	r0, #0
 8000888:	f000 f808 	bl	800089c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800088c:	f7ff feac 	bl	80005e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40022000 	.word	0x40022000

0800089c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008a4:	4b12      	ldr	r3, [pc, #72]	@ (80008f0 <HAL_InitTick+0x54>)
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <HAL_InitTick+0x58>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	4619      	mov	r1, r3
 80008ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ba:	4618      	mov	r0, r3
 80008bc:	f001 fa01 	bl	8001cc2 <HAL_SYSTICK_Config>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
 80008c8:	e00e      	b.n	80008e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2b0f      	cmp	r3, #15
 80008ce:	d80a      	bhi.n	80008e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d0:	2200      	movs	r2, #0
 80008d2:	6879      	ldr	r1, [r7, #4]
 80008d4:	f04f 30ff 	mov.w	r0, #4294967295
 80008d8:	f001 f9d7 	bl	8001c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008dc:	4a06      	ldr	r2, [pc, #24]	@ (80008f8 <HAL_InitTick+0x5c>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008e2:	2300      	movs	r3, #0
 80008e4:	e000      	b.n	80008e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000008 	.word	0x20000008
 80008f8:	20000004 	.word	0x20000004

080008fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000900:	4b06      	ldr	r3, [pc, #24]	@ (800091c <HAL_IncTick+0x20>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	461a      	mov	r2, r3
 8000906:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <HAL_IncTick+0x24>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4413      	add	r3, r2
 800090c:	4a04      	ldr	r2, [pc, #16]	@ (8000920 <HAL_IncTick+0x24>)
 800090e:	6013      	str	r3, [r2, #0]
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	20000008 	.word	0x20000008
 8000920:	2000016c 	.word	0x2000016c

08000924 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return uwTick;  
 8000928:	4b03      	ldr	r3, [pc, #12]	@ (8000938 <HAL_GetTick+0x14>)
 800092a:	681b      	ldr	r3, [r3, #0]
}
 800092c:	4618      	mov	r0, r3
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	2000016c 	.word	0x2000016c

0800093c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000944:	f7ff ffee 	bl	8000924 <HAL_GetTick>
 8000948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000954:	d005      	beq.n	8000962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000956:	4b0a      	ldr	r3, [pc, #40]	@ (8000980 <HAL_Delay+0x44>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	461a      	mov	r2, r3
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	4413      	add	r3, r2
 8000960:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000962:	bf00      	nop
 8000964:	f7ff ffde 	bl	8000924 <HAL_GetTick>
 8000968:	4602      	mov	r2, r0
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	429a      	cmp	r2, r3
 8000972:	d8f7      	bhi.n	8000964 <HAL_Delay+0x28>
  {
  }
}
 8000974:	bf00      	nop
 8000976:	bf00      	nop
 8000978:	3710      	adds	r7, #16
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000008 	.word	0x20000008

08000984 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b09a      	sub	sp, #104	@ 0x68
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800098c:	2300      	movs	r3, #0
 800098e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000992:	2300      	movs	r3, #0
 8000994:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d101      	bne.n	80009a4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80009a0:	2301      	movs	r3, #1
 80009a2:	e1e3      	b.n	8000d6c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	691b      	ldr	r3, [r3, #16]
 80009a8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ae:	f003 0310 	and.w	r3, r3, #16
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d176      	bne.n	8000aa4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d152      	bne.n	8000a64 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2200      	movs	r2, #0
 80009c2:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2200      	movs	r2, #0
 80009c8:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2200      	movs	r2, #0
 80009d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f7ff fe29 	bl	8000630 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d13b      	bne.n	8000a64 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f001 f829 	bl	8001a44 <ADC_Disable>
 80009f2:	4603      	mov	r3, r0
 80009f4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fc:	f003 0310 	and.w	r3, r3, #16
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d12f      	bne.n	8000a64 <HAL_ADC_Init+0xe0>
 8000a04:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d12b      	bne.n	8000a64 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a10:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000a14:	f023 0302 	bic.w	r3, r3, #2
 8000a18:	f043 0202 	orr.w	r2, r3, #2
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	689a      	ldr	r2, [r3, #8]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000a2e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	689a      	ldr	r2, [r3, #8]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000a3e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000a40:	4b92      	ldr	r3, [pc, #584]	@ (8000c8c <HAL_ADC_Init+0x308>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a92      	ldr	r2, [pc, #584]	@ (8000c90 <HAL_ADC_Init+0x30c>)
 8000a46:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4a:	0c9a      	lsrs	r2, r3, #18
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	4413      	add	r3, r2
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a56:	e002      	b.n	8000a5e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d1f9      	bne.n	8000a58 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d007      	beq.n	8000a82 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000a7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000a80:	d110      	bne.n	8000aa4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a86:	f023 0312 	bic.w	r3, r3, #18
 8000a8a:	f043 0210 	orr.w	r2, r3, #16
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a96:	f043 0201 	orr.w	r2, r3, #1
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa8:	f003 0310 	and.w	r3, r3, #16
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	f040 8150 	bne.w	8000d52 <HAL_ADC_Init+0x3ce>
 8000ab2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f040 814b 	bne.w	8000d52 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	f040 8143 	bne.w	8000d52 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000ad4:	f043 0202 	orr.w	r2, r3, #2
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ae4:	d004      	beq.n	8000af0 <HAL_ADC_Init+0x16c>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a6a      	ldr	r2, [pc, #424]	@ (8000c94 <HAL_ADC_Init+0x310>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d101      	bne.n	8000af4 <HAL_ADC_Init+0x170>
 8000af0:	4b69      	ldr	r3, [pc, #420]	@ (8000c98 <HAL_ADC_Init+0x314>)
 8000af2:	e000      	b.n	8000af6 <HAL_ADC_Init+0x172>
 8000af4:	4b69      	ldr	r3, [pc, #420]	@ (8000c9c <HAL_ADC_Init+0x318>)
 8000af6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b00:	d102      	bne.n	8000b08 <HAL_ADC_Init+0x184>
 8000b02:	4b64      	ldr	r3, [pc, #400]	@ (8000c94 <HAL_ADC_Init+0x310>)
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	e01a      	b.n	8000b3e <HAL_ADC_Init+0x1ba>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a61      	ldr	r2, [pc, #388]	@ (8000c94 <HAL_ADC_Init+0x310>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d103      	bne.n	8000b1a <HAL_ADC_Init+0x196>
 8000b12:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	e011      	b.n	8000b3e <HAL_ADC_Init+0x1ba>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a60      	ldr	r2, [pc, #384]	@ (8000ca0 <HAL_ADC_Init+0x31c>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d102      	bne.n	8000b2a <HAL_ADC_Init+0x1a6>
 8000b24:	4b5f      	ldr	r3, [pc, #380]	@ (8000ca4 <HAL_ADC_Init+0x320>)
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	e009      	b.n	8000b3e <HAL_ADC_Init+0x1ba>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a5d      	ldr	r2, [pc, #372]	@ (8000ca4 <HAL_ADC_Init+0x320>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d102      	bne.n	8000b3a <HAL_ADC_Init+0x1b6>
 8000b34:	4b5a      	ldr	r3, [pc, #360]	@ (8000ca0 <HAL_ADC_Init+0x31c>)
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	e001      	b.n	8000b3e <HAL_ADC_Init+0x1ba>
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	f003 0303 	and.w	r3, r3, #3
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d108      	bne.n	8000b5e <HAL_ADC_Init+0x1da>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d101      	bne.n	8000b5e <HAL_ADC_Init+0x1da>
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e000      	b.n	8000b60 <HAL_ADC_Init+0x1dc>
 8000b5e:	2300      	movs	r3, #0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d11c      	bne.n	8000b9e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b64:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d010      	beq.n	8000b8c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	f003 0303 	and.w	r3, r3, #3
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d107      	bne.n	8000b86 <HAL_ADC_Init+0x202>
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d101      	bne.n	8000b86 <HAL_ADC_Init+0x202>
 8000b82:	2301      	movs	r3, #1
 8000b84:	e000      	b.n	8000b88 <HAL_ADC_Init+0x204>
 8000b86:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d108      	bne.n	8000b9e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000b8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	431a      	orrs	r2, r3
 8000b9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b9c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	7e5b      	ldrb	r3, [r3, #25]
 8000ba2:	035b      	lsls	r3, r3, #13
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000ba8:	2a01      	cmp	r2, #1
 8000baa:	d002      	beq.n	8000bb2 <HAL_ADC_Init+0x22e>
 8000bac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000bb0:	e000      	b.n	8000bb4 <HAL_ADC_Init+0x230>
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	431a      	orrs	r2, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	431a      	orrs	r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d11b      	bne.n	8000c0a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	7e5b      	ldrb	r3, [r3, #25]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d109      	bne.n	8000bee <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bde:	3b01      	subs	r3, #1
 8000be0:	045a      	lsls	r2, r3, #17
 8000be2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000be4:	4313      	orrs	r3, r2
 8000be6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bea:	663b      	str	r3, [r7, #96]	@ 0x60
 8000bec:	e00d      	b.n	8000c0a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000bf6:	f043 0220 	orr.w	r2, r3, #32
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c02:	f043 0201 	orr.w	r2, r3, #1
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d054      	beq.n	8000cbc <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a22      	ldr	r2, [pc, #136]	@ (8000ca0 <HAL_ADC_Init+0x31c>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d004      	beq.n	8000c26 <HAL_ADC_Init+0x2a2>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a20      	ldr	r2, [pc, #128]	@ (8000ca4 <HAL_ADC_Init+0x320>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d140      	bne.n	8000ca8 <HAL_ADC_Init+0x324>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c2a:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8000c2e:	d02a      	beq.n	8000c86 <HAL_ADC_Init+0x302>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c38:	d022      	beq.n	8000c80 <HAL_ADC_Init+0x2fc>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c3e:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8000c42:	d01a      	beq.n	8000c7a <HAL_ADC_Init+0x2f6>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c48:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8000c4c:	d012      	beq.n	8000c74 <HAL_ADC_Init+0x2f0>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c52:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8000c56:	d00a      	beq.n	8000c6e <HAL_ADC_Init+0x2ea>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c5c:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8000c60:	d002      	beq.n	8000c68 <HAL_ADC_Init+0x2e4>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c66:	e023      	b.n	8000cb0 <HAL_ADC_Init+0x32c>
 8000c68:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000c6c:	e020      	b.n	8000cb0 <HAL_ADC_Init+0x32c>
 8000c6e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000c72:	e01d      	b.n	8000cb0 <HAL_ADC_Init+0x32c>
 8000c74:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000c78:	e01a      	b.n	8000cb0 <HAL_ADC_Init+0x32c>
 8000c7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c7e:	e017      	b.n	8000cb0 <HAL_ADC_Init+0x32c>
 8000c80:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8000c84:	e014      	b.n	8000cb0 <HAL_ADC_Init+0x32c>
 8000c86:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000c8a:	e011      	b.n	8000cb0 <HAL_ADC_Init+0x32c>
 8000c8c:	20000000 	.word	0x20000000
 8000c90:	431bde83 	.word	0x431bde83
 8000c94:	50000100 	.word	0x50000100
 8000c98:	50000300 	.word	0x50000300
 8000c9c:	50000700 	.word	0x50000700
 8000ca0:	50000400 	.word	0x50000400
 8000ca4:	50000500 	.word	0x50000500
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	f003 030c 	and.w	r3, r3, #12
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d114      	bne.n	8000cf4 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	6812      	ldr	r2, [r2, #0]
 8000cd4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000cd8:	f023 0302 	bic.w	r3, r3, #2
 8000cdc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	7e1b      	ldrb	r3, [r3, #24]
 8000ce2:	039a      	lsls	r2, r3, #14
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	4313      	orrs	r3, r2
 8000cee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	68da      	ldr	r2, [r3, #12]
 8000cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8000d74 <HAL_ADC_Init+0x3f0>)
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	6812      	ldr	r2, [r2, #0]
 8000d02:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000d04:	430b      	orrs	r3, r1
 8000d06:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	691b      	ldr	r3, [r3, #16]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d10c      	bne.n	8000d2a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	f023 010f 	bic.w	r1, r3, #15
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	1e5a      	subs	r2, r3, #1
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	430a      	orrs	r2, r1
 8000d26:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d28:	e007      	b.n	8000d3a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f022 020f 	bic.w	r2, r2, #15
 8000d38:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d44:	f023 0303 	bic.w	r3, r3, #3
 8000d48:	f043 0201 	orr.w	r2, r3, #1
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d50:	e00a      	b.n	8000d68 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d56:	f023 0312 	bic.w	r3, r3, #18
 8000d5a:	f043 0210 	orr.w	r2, r3, #16
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000d62:	2301      	movs	r3, #1
 8000d64:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000d68:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3768      	adds	r7, #104	@ 0x68
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	fff0c007 	.word	0xfff0c007

08000d78 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d80:	2300      	movs	r3, #0
 8000d82:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	f003 0304 	and.w	r3, r3, #4
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f040 80f9 	bne.w	8000f86 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d101      	bne.n	8000da2 <HAL_ADC_Start+0x2a>
 8000d9e:	2302      	movs	r3, #2
 8000da0:	e0f4      	b.n	8000f8c <HAL_ADC_Start+0x214>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2201      	movs	r2, #1
 8000da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f000 fde6 	bl	800197c <ADC_Enable>
 8000db0:	4603      	mov	r3, r0
 8000db2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f040 80e0 	bne.w	8000f7c <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000dc4:	f023 0301 	bic.w	r3, r3, #1
 8000dc8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000dd8:	d004      	beq.n	8000de4 <HAL_ADC_Start+0x6c>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a6d      	ldr	r2, [pc, #436]	@ (8000f94 <HAL_ADC_Start+0x21c>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d106      	bne.n	8000df2 <HAL_ADC_Start+0x7a>
 8000de4:	4b6c      	ldr	r3, [pc, #432]	@ (8000f98 <HAL_ADC_Start+0x220>)
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	f003 031f 	and.w	r3, r3, #31
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d010      	beq.n	8000e12 <HAL_ADC_Start+0x9a>
 8000df0:	e005      	b.n	8000dfe <HAL_ADC_Start+0x86>
 8000df2:	4b6a      	ldr	r3, [pc, #424]	@ (8000f9c <HAL_ADC_Start+0x224>)
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	f003 031f 	and.w	r3, r3, #31
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d009      	beq.n	8000e12 <HAL_ADC_Start+0x9a>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e06:	d004      	beq.n	8000e12 <HAL_ADC_Start+0x9a>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a64      	ldr	r2, [pc, #400]	@ (8000fa0 <HAL_ADC_Start+0x228>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d115      	bne.n	8000e3e <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e16:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d036      	beq.n	8000e9a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e30:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000e34:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000e3c:	e02d      	b.n	8000e9a <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e42:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e52:	d004      	beq.n	8000e5e <HAL_ADC_Start+0xe6>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a4e      	ldr	r2, [pc, #312]	@ (8000f94 <HAL_ADC_Start+0x21c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d10a      	bne.n	8000e74 <HAL_ADC_Start+0xfc>
 8000e5e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	bf14      	ite	ne
 8000e6c:	2301      	movne	r3, #1
 8000e6e:	2300      	moveq	r3, #0
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	e008      	b.n	8000e86 <HAL_ADC_Start+0x10e>
 8000e74:	4b4a      	ldr	r3, [pc, #296]	@ (8000fa0 <HAL_ADC_Start+0x228>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	bf14      	ite	ne
 8000e80:	2301      	movne	r3, #1
 8000e82:	2300      	moveq	r3, #0
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d007      	beq.n	8000e9a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000e92:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ea2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000ea6:	d106      	bne.n	8000eb6 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eac:	f023 0206 	bic.w	r2, r3, #6
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	645a      	str	r2, [r3, #68]	@ 0x44
 8000eb4:	e002      	b.n	8000ebc <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	221c      	movs	r2, #28
 8000eca:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ed4:	d004      	beq.n	8000ee0 <HAL_ADC_Start+0x168>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a2e      	ldr	r2, [pc, #184]	@ (8000f94 <HAL_ADC_Start+0x21c>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d106      	bne.n	8000eee <HAL_ADC_Start+0x176>
 8000ee0:	4b2d      	ldr	r3, [pc, #180]	@ (8000f98 <HAL_ADC_Start+0x220>)
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	f003 031f 	and.w	r3, r3, #31
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d03e      	beq.n	8000f6a <HAL_ADC_Start+0x1f2>
 8000eec:	e005      	b.n	8000efa <HAL_ADC_Start+0x182>
 8000eee:	4b2b      	ldr	r3, [pc, #172]	@ (8000f9c <HAL_ADC_Start+0x224>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	f003 031f 	and.w	r3, r3, #31
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d037      	beq.n	8000f6a <HAL_ADC_Start+0x1f2>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f02:	d004      	beq.n	8000f0e <HAL_ADC_Start+0x196>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a22      	ldr	r2, [pc, #136]	@ (8000f94 <HAL_ADC_Start+0x21c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d106      	bne.n	8000f1c <HAL_ADC_Start+0x1a4>
 8000f0e:	4b22      	ldr	r3, [pc, #136]	@ (8000f98 <HAL_ADC_Start+0x220>)
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	f003 031f 	and.w	r3, r3, #31
 8000f16:	2b05      	cmp	r3, #5
 8000f18:	d027      	beq.n	8000f6a <HAL_ADC_Start+0x1f2>
 8000f1a:	e005      	b.n	8000f28 <HAL_ADC_Start+0x1b0>
 8000f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f9c <HAL_ADC_Start+0x224>)
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	f003 031f 	and.w	r3, r3, #31
 8000f24:	2b05      	cmp	r3, #5
 8000f26:	d020      	beq.n	8000f6a <HAL_ADC_Start+0x1f2>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f30:	d004      	beq.n	8000f3c <HAL_ADC_Start+0x1c4>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a17      	ldr	r2, [pc, #92]	@ (8000f94 <HAL_ADC_Start+0x21c>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d106      	bne.n	8000f4a <HAL_ADC_Start+0x1d2>
 8000f3c:	4b16      	ldr	r3, [pc, #88]	@ (8000f98 <HAL_ADC_Start+0x220>)
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f003 031f 	and.w	r3, r3, #31
 8000f44:	2b09      	cmp	r3, #9
 8000f46:	d010      	beq.n	8000f6a <HAL_ADC_Start+0x1f2>
 8000f48:	e005      	b.n	8000f56 <HAL_ADC_Start+0x1de>
 8000f4a:	4b14      	ldr	r3, [pc, #80]	@ (8000f9c <HAL_ADC_Start+0x224>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f003 031f 	and.w	r3, r3, #31
 8000f52:	2b09      	cmp	r3, #9
 8000f54:	d009      	beq.n	8000f6a <HAL_ADC_Start+0x1f2>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f5e:	d004      	beq.n	8000f6a <HAL_ADC_Start+0x1f2>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa0 <HAL_ADC_Start+0x228>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d10f      	bne.n	8000f8a <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f042 0204 	orr.w	r2, r2, #4
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	e006      	b.n	8000f8a <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8000f84:	e001      	b.n	8000f8a <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f86:	2302      	movs	r3, #2
 8000f88:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	50000100 	.word	0x50000100
 8000f98:	50000300 	.word	0x50000300
 8000f9c:	50000700 	.word	0x50000700
 8000fa0:	50000400 	.word	0x50000400

08000fa4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	2b08      	cmp	r3, #8
 8000fb8:	d102      	bne.n	8000fc0 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000fba:	2308      	movs	r3, #8
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	e03a      	b.n	8001036 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000fc8:	d004      	beq.n	8000fd4 <HAL_ADC_PollForConversion+0x30>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a72      	ldr	r2, [pc, #456]	@ (8001198 <HAL_ADC_PollForConversion+0x1f4>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d101      	bne.n	8000fd8 <HAL_ADC_PollForConversion+0x34>
 8000fd4:	4b71      	ldr	r3, [pc, #452]	@ (800119c <HAL_ADC_PollForConversion+0x1f8>)
 8000fd6:	e000      	b.n	8000fda <HAL_ADC_PollForConversion+0x36>
 8000fd8:	4b71      	ldr	r3, [pc, #452]	@ (80011a0 <HAL_ADC_PollForConversion+0x1fc>)
 8000fda:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f003 031f 	and.w	r3, r3, #31
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d112      	bne.n	800100e <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d11d      	bne.n	8001032 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffa:	f043 0220 	orr.w	r2, r3, #32
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e0bf      	b.n	800118e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d00b      	beq.n	8001032 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101e:	f043 0220 	orr.w	r2, r3, #32
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e0ad      	b.n	800118e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001032:	230c      	movs	r3, #12
 8001034:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800103e:	d004      	beq.n	800104a <HAL_ADC_PollForConversion+0xa6>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a54      	ldr	r2, [pc, #336]	@ (8001198 <HAL_ADC_PollForConversion+0x1f4>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d106      	bne.n	8001058 <HAL_ADC_PollForConversion+0xb4>
 800104a:	4b54      	ldr	r3, [pc, #336]	@ (800119c <HAL_ADC_PollForConversion+0x1f8>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f003 031f 	and.w	r3, r3, #31
 8001052:	2b00      	cmp	r3, #0
 8001054:	d010      	beq.n	8001078 <HAL_ADC_PollForConversion+0xd4>
 8001056:	e005      	b.n	8001064 <HAL_ADC_PollForConversion+0xc0>
 8001058:	4b51      	ldr	r3, [pc, #324]	@ (80011a0 <HAL_ADC_PollForConversion+0x1fc>)
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f003 031f 	and.w	r3, r3, #31
 8001060:	2b00      	cmp	r3, #0
 8001062:	d009      	beq.n	8001078 <HAL_ADC_PollForConversion+0xd4>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800106c:	d004      	beq.n	8001078 <HAL_ADC_PollForConversion+0xd4>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a4c      	ldr	r2, [pc, #304]	@ (80011a4 <HAL_ADC_PollForConversion+0x200>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d104      	bne.n	8001082 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	e00f      	b.n	80010a2 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800108a:	d004      	beq.n	8001096 <HAL_ADC_PollForConversion+0xf2>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a41      	ldr	r2, [pc, #260]	@ (8001198 <HAL_ADC_PollForConversion+0x1f4>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d102      	bne.n	800109c <HAL_ADC_PollForConversion+0xf8>
 8001096:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800109a:	e000      	b.n	800109e <HAL_ADC_PollForConversion+0xfa>
 800109c:	4b41      	ldr	r3, [pc, #260]	@ (80011a4 <HAL_ADC_PollForConversion+0x200>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80010a2:	f7ff fc3f 	bl	8000924 <HAL_GetTick>
 80010a6:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80010a8:	e021      	b.n	80010ee <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b0:	d01d      	beq.n	80010ee <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d007      	beq.n	80010c8 <HAL_ADC_PollForConversion+0x124>
 80010b8:	f7ff fc34 	bl	8000924 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d212      	bcs.n	80010ee <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	4013      	ands	r3, r2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10b      	bne.n	80010ee <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	f043 0204 	orr.w	r2, r3, #4
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e04f      	b.n	800118e <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	4013      	ands	r3, r2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0d6      	beq.n	80010aa <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001100:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001112:	2b00      	cmp	r3, #0
 8001114:	d131      	bne.n	800117a <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800111c:	2b00      	cmp	r3, #0
 800111e:	d12c      	bne.n	800117a <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0308 	and.w	r3, r3, #8
 800112a:	2b08      	cmp	r3, #8
 800112c:	d125      	bne.n	800117a <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	2b00      	cmp	r3, #0
 800113a:	d112      	bne.n	8001162 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001140:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d112      	bne.n	800117a <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001158:	f043 0201 	orr.w	r2, r3, #1
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001160:	e00b      	b.n	800117a <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001166:	f043 0220 	orr.w	r2, r3, #32
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001172:	f043 0201 	orr.w	r2, r3, #1
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d103      	bne.n	800118c <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	697a      	ldr	r2, [r7, #20]
 800118a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	50000100 	.word	0x50000100
 800119c:	50000300 	.word	0x50000300
 80011a0:	50000700 	.word	0x50000700
 80011a4:	50000400 	.word	0x50000400

080011a8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b09b      	sub	sp, #108	@ 0x6c
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d101      	bne.n	80011e6 <HAL_ADC_ConfigChannel+0x22>
 80011e2:	2302      	movs	r3, #2
 80011e4:	e2c8      	b.n	8001778 <HAL_ADC_ConfigChannel+0x5b4>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2201      	movs	r2, #1
 80011ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f040 82ac 	bne.w	8001756 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2b04      	cmp	r3, #4
 8001204:	d81c      	bhi.n	8001240 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	4613      	mov	r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4413      	add	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	461a      	mov	r2, r3
 800121a:	231f      	movs	r3, #31
 800121c:	4093      	lsls	r3, r2
 800121e:	43db      	mvns	r3, r3
 8001220:	4019      	ands	r1, r3
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	6818      	ldr	r0, [r3, #0]
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	4613      	mov	r3, r2
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	4413      	add	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	fa00 f203 	lsl.w	r2, r0, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	430a      	orrs	r2, r1
 800123c:	631a      	str	r2, [r3, #48]	@ 0x30
 800123e:	e063      	b.n	8001308 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b09      	cmp	r3, #9
 8001246:	d81e      	bhi.n	8001286 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	4413      	add	r3, r2
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	3b1e      	subs	r3, #30
 800125c:	221f      	movs	r2, #31
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	4019      	ands	r1, r3
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	6818      	ldr	r0, [r3, #0]
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	4613      	mov	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4413      	add	r3, r2
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	3b1e      	subs	r3, #30
 8001278:	fa00 f203 	lsl.w	r2, r0, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	430a      	orrs	r2, r1
 8001282:	635a      	str	r2, [r3, #52]	@ 0x34
 8001284:	e040      	b.n	8001308 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b0e      	cmp	r3, #14
 800128c:	d81e      	bhi.n	80012cc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	4613      	mov	r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	4413      	add	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	3b3c      	subs	r3, #60	@ 0x3c
 80012a2:	221f      	movs	r2, #31
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	4019      	ands	r1, r3
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	6818      	ldr	r0, [r3, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	4613      	mov	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	3b3c      	subs	r3, #60	@ 0x3c
 80012be:	fa00 f203 	lsl.w	r2, r0, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	430a      	orrs	r2, r1
 80012c8:	639a      	str	r2, [r3, #56]	@ 0x38
 80012ca:	e01d      	b.n	8001308 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	4613      	mov	r3, r2
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	4413      	add	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	3b5a      	subs	r3, #90	@ 0x5a
 80012e0:	221f      	movs	r2, #31
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	4019      	ands	r1, r3
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	6818      	ldr	r0, [r3, #0]
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	4613      	mov	r3, r2
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	4413      	add	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	3b5a      	subs	r3, #90	@ 0x5a
 80012fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	430a      	orrs	r2, r1
 8001306:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 030c 	and.w	r3, r3, #12
 8001312:	2b00      	cmp	r3, #0
 8001314:	f040 80e5 	bne.w	80014e2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b09      	cmp	r3, #9
 800131e:	d91c      	bls.n	800135a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6999      	ldr	r1, [r3, #24]
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	4613      	mov	r3, r2
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	4413      	add	r3, r2
 8001330:	3b1e      	subs	r3, #30
 8001332:	2207      	movs	r2, #7
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	4019      	ands	r1, r3
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	6898      	ldr	r0, [r3, #8]
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4613      	mov	r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4413      	add	r3, r2
 800134a:	3b1e      	subs	r3, #30
 800134c:	fa00 f203 	lsl.w	r2, r0, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	430a      	orrs	r2, r1
 8001356:	619a      	str	r2, [r3, #24]
 8001358:	e019      	b.n	800138e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6959      	ldr	r1, [r3, #20]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4613      	mov	r3, r2
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	4413      	add	r3, r2
 800136a:	2207      	movs	r2, #7
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	4019      	ands	r1, r3
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	6898      	ldr	r0, [r3, #8]
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4613      	mov	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4413      	add	r3, r2
 8001382:	fa00 f203 	lsl.w	r2, r0, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	695a      	ldr	r2, [r3, #20]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	08db      	lsrs	r3, r3, #3
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	2b03      	cmp	r3, #3
 80013ae:	d84f      	bhi.n	8001450 <HAL_ADC_ConfigChannel+0x28c>
 80013b0:	a201      	add	r2, pc, #4	@ (adr r2, 80013b8 <HAL_ADC_ConfigChannel+0x1f4>)
 80013b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b6:	bf00      	nop
 80013b8:	080013c9 	.word	0x080013c9
 80013bc:	080013eb 	.word	0x080013eb
 80013c0:	0800140d 	.word	0x0800140d
 80013c4:	0800142f 	.word	0x0800142f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013ce:	4b99      	ldr	r3, [pc, #612]	@ (8001634 <HAL_ADC_ConfigChannel+0x470>)
 80013d0:	4013      	ands	r3, r2
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	6812      	ldr	r2, [r2, #0]
 80013d6:	0691      	lsls	r1, r2, #26
 80013d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80013da:	430a      	orrs	r2, r1
 80013dc:	431a      	orrs	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80013e6:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80013e8:	e07b      	b.n	80014e2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80013f0:	4b90      	ldr	r3, [pc, #576]	@ (8001634 <HAL_ADC_ConfigChannel+0x470>)
 80013f2:	4013      	ands	r3, r2
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	6812      	ldr	r2, [r2, #0]
 80013f8:	0691      	lsls	r1, r2, #26
 80013fa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80013fc:	430a      	orrs	r2, r1
 80013fe:	431a      	orrs	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001408:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800140a:	e06a      	b.n	80014e2 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001412:	4b88      	ldr	r3, [pc, #544]	@ (8001634 <HAL_ADC_ConfigChannel+0x470>)
 8001414:	4013      	ands	r3, r2
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	6812      	ldr	r2, [r2, #0]
 800141a:	0691      	lsls	r1, r2, #26
 800141c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800141e:	430a      	orrs	r2, r1
 8001420:	431a      	orrs	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800142a:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800142c:	e059      	b.n	80014e2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001434:	4b7f      	ldr	r3, [pc, #508]	@ (8001634 <HAL_ADC_ConfigChannel+0x470>)
 8001436:	4013      	ands	r3, r2
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	6812      	ldr	r2, [r2, #0]
 800143c:	0691      	lsls	r1, r2, #26
 800143e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001440:	430a      	orrs	r2, r1
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800144c:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800144e:	e048      	b.n	80014e2 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001456:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	069b      	lsls	r3, r3, #26
 8001460:	429a      	cmp	r2, r3
 8001462:	d107      	bne.n	8001474 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001472:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800147a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	069b      	lsls	r3, r3, #26
 8001484:	429a      	cmp	r2, r3
 8001486:	d107      	bne.n	8001498 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001496:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800149e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	069b      	lsls	r3, r3, #26
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d107      	bne.n	80014bc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80014ba:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80014c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	069b      	lsls	r3, r3, #26
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d107      	bne.n	80014e0 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80014de:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80014e0:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d108      	bne.n	8001502 <HAL_ADC_ConfigChannel+0x33e>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d101      	bne.n	8001502 <HAL_ADC_ConfigChannel+0x33e>
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <HAL_ADC_ConfigChannel+0x340>
 8001502:	2300      	movs	r3, #0
 8001504:	2b00      	cmp	r3, #0
 8001506:	f040 8131 	bne.w	800176c <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d00f      	beq.n	8001532 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2201      	movs	r2, #1
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43da      	mvns	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	400a      	ands	r2, r1
 800152c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001530:	e049      	b.n	80015c6 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2201      	movs	r2, #1
 8001540:	409a      	lsls	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	430a      	orrs	r2, r1
 8001548:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b09      	cmp	r3, #9
 8001552:	d91c      	bls.n	800158e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6999      	ldr	r1, [r3, #24]
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	4613      	mov	r3, r2
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	4413      	add	r3, r2
 8001564:	3b1b      	subs	r3, #27
 8001566:	2207      	movs	r2, #7
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	4019      	ands	r1, r3
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	6898      	ldr	r0, [r3, #8]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4613      	mov	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4413      	add	r3, r2
 800157e:	3b1b      	subs	r3, #27
 8001580:	fa00 f203 	lsl.w	r2, r0, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	430a      	orrs	r2, r1
 800158a:	619a      	str	r2, [r3, #24]
 800158c:	e01b      	b.n	80015c6 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6959      	ldr	r1, [r3, #20]
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	1c5a      	adds	r2, r3, #1
 800159a:	4613      	mov	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4413      	add	r3, r2
 80015a0:	2207      	movs	r2, #7
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	4019      	ands	r1, r3
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	6898      	ldr	r0, [r3, #8]
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	1c5a      	adds	r2, r3, #1
 80015b4:	4613      	mov	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4413      	add	r3, r2
 80015ba:	fa00 f203 	lsl.w	r2, r0, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015ce:	d004      	beq.n	80015da <HAL_ADC_ConfigChannel+0x416>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a18      	ldr	r2, [pc, #96]	@ (8001638 <HAL_ADC_ConfigChannel+0x474>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d101      	bne.n	80015de <HAL_ADC_ConfigChannel+0x41a>
 80015da:	4b18      	ldr	r3, [pc, #96]	@ (800163c <HAL_ADC_ConfigChannel+0x478>)
 80015dc:	e000      	b.n	80015e0 <HAL_ADC_ConfigChannel+0x41c>
 80015de:	4b18      	ldr	r3, [pc, #96]	@ (8001640 <HAL_ADC_ConfigChannel+0x47c>)
 80015e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b10      	cmp	r3, #16
 80015e8:	d105      	bne.n	80015f6 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80015ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d015      	beq.n	8001622 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80015fa:	2b11      	cmp	r3, #17
 80015fc:	d105      	bne.n	800160a <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80015fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00b      	beq.n	8001622 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800160e:	2b12      	cmp	r3, #18
 8001610:	f040 80ac 	bne.w	800176c <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001614:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800161c:	2b00      	cmp	r3, #0
 800161e:	f040 80a5 	bne.w	800176c <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800162a:	d10b      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x480>
 800162c:	4b02      	ldr	r3, [pc, #8]	@ (8001638 <HAL_ADC_ConfigChannel+0x474>)
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	e023      	b.n	800167a <HAL_ADC_ConfigChannel+0x4b6>
 8001632:	bf00      	nop
 8001634:	83fff000 	.word	0x83fff000
 8001638:	50000100 	.word	0x50000100
 800163c:	50000300 	.word	0x50000300
 8001640:	50000700 	.word	0x50000700
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a4e      	ldr	r2, [pc, #312]	@ (8001784 <HAL_ADC_ConfigChannel+0x5c0>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d103      	bne.n	8001656 <HAL_ADC_ConfigChannel+0x492>
 800164e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	e011      	b.n	800167a <HAL_ADC_ConfigChannel+0x4b6>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a4b      	ldr	r2, [pc, #300]	@ (8001788 <HAL_ADC_ConfigChannel+0x5c4>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d102      	bne.n	8001666 <HAL_ADC_ConfigChannel+0x4a2>
 8001660:	4b4a      	ldr	r3, [pc, #296]	@ (800178c <HAL_ADC_ConfigChannel+0x5c8>)
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	e009      	b.n	800167a <HAL_ADC_ConfigChannel+0x4b6>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a48      	ldr	r2, [pc, #288]	@ (800178c <HAL_ADC_ConfigChannel+0x5c8>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d102      	bne.n	8001676 <HAL_ADC_ConfigChannel+0x4b2>
 8001670:	4b45      	ldr	r3, [pc, #276]	@ (8001788 <HAL_ADC_ConfigChannel+0x5c4>)
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	e001      	b.n	800167a <HAL_ADC_ConfigChannel+0x4b6>
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	2b01      	cmp	r3, #1
 8001686:	d108      	bne.n	800169a <HAL_ADC_ConfigChannel+0x4d6>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b01      	cmp	r3, #1
 8001694:	d101      	bne.n	800169a <HAL_ADC_ConfigChannel+0x4d6>
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <HAL_ADC_ConfigChannel+0x4d8>
 800169a:	2300      	movs	r3, #0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d150      	bne.n	8001742 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016a0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d010      	beq.n	80016c8 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d107      	bne.n	80016c2 <HAL_ADC_ConfigChannel+0x4fe>
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d101      	bne.n	80016c2 <HAL_ADC_ConfigChannel+0x4fe>
 80016be:	2301      	movs	r3, #1
 80016c0:	e000      	b.n	80016c4 <HAL_ADC_ConfigChannel+0x500>
 80016c2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d13c      	bne.n	8001742 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b10      	cmp	r3, #16
 80016ce:	d11d      	bne.n	800170c <HAL_ADC_ConfigChannel+0x548>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016d8:	d118      	bne.n	800170c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80016da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80016e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016e4:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001790 <HAL_ADC_ConfigChannel+0x5cc>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a2a      	ldr	r2, [pc, #168]	@ (8001794 <HAL_ADC_ConfigChannel+0x5d0>)
 80016ec:	fba2 2303 	umull	r2, r3, r2, r3
 80016f0:	0c9a      	lsrs	r2, r3, #18
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016fc:	e002      	b.n	8001704 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	3b01      	subs	r3, #1
 8001702:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f9      	bne.n	80016fe <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800170a:	e02e      	b.n	800176a <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b11      	cmp	r3, #17
 8001712:	d10b      	bne.n	800172c <HAL_ADC_ConfigChannel+0x568>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800171c:	d106      	bne.n	800172c <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800171e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001726:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001728:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800172a:	e01e      	b.n	800176a <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b12      	cmp	r3, #18
 8001732:	d11a      	bne.n	800176a <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001734:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800173c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800173e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001740:	e013      	b.n	800176a <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001746:	f043 0220 	orr.w	r2, r3, #32
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001754:	e00a      	b.n	800176c <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	f043 0220 	orr.w	r2, r3, #32
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001768:	e000      	b.n	800176c <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800176a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001774:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001778:	4618      	mov	r0, r3
 800177a:	376c      	adds	r7, #108	@ 0x6c
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	50000100 	.word	0x50000100
 8001788:	50000400 	.word	0x50000400
 800178c:	50000500 	.word	0x50000500
 8001790:	20000000 	.word	0x20000000
 8001794:	431bde83 	.word	0x431bde83

08001798 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001798:	b480      	push	{r7}
 800179a:	b099      	sub	sp, #100	@ 0x64
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017b0:	d102      	bne.n	80017b8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80017b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001968 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	e01a      	b.n	80017ee <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a6a      	ldr	r2, [pc, #424]	@ (8001968 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d103      	bne.n	80017ca <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80017c2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	e011      	b.n	80017ee <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a67      	ldr	r2, [pc, #412]	@ (800196c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d102      	bne.n	80017da <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80017d4:	4b66      	ldr	r3, [pc, #408]	@ (8001970 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	e009      	b.n	80017ee <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a64      	ldr	r2, [pc, #400]	@ (8001970 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d102      	bne.n	80017ea <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80017e4:	4b61      	ldr	r3, [pc, #388]	@ (800196c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	e001      	b.n	80017ee <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e0b0      	b.n	800195a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d101      	bne.n	8001806 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001802:	2302      	movs	r3, #2
 8001804:	e0a9      	b.n	800195a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	f040 808d 	bne.w	8001938 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	2b00      	cmp	r3, #0
 8001828:	f040 8086 	bne.w	8001938 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001834:	d004      	beq.n	8001840 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a4b      	ldr	r2, [pc, #300]	@ (8001968 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d101      	bne.n	8001844 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001840:	4b4c      	ldr	r3, [pc, #304]	@ (8001974 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001842:	e000      	b.n	8001846 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001844:	4b4c      	ldr	r3, [pc, #304]	@ (8001978 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001846:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d040      	beq.n	80018d2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001850:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	6859      	ldr	r1, [r3, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001862:	035b      	lsls	r3, r3, #13
 8001864:	430b      	orrs	r3, r1
 8001866:	431a      	orrs	r2, r3
 8001868:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800186a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	2b01      	cmp	r3, #1
 8001878:	d108      	bne.n	800188c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b01      	cmp	r3, #1
 8001886:	d101      	bne.n	800188c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001888:	2301      	movs	r3, #1
 800188a:	e000      	b.n	800188e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800188c:	2300      	movs	r3, #0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d15c      	bne.n	800194c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	2b01      	cmp	r3, #1
 800189c:	d107      	bne.n	80018ae <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d101      	bne.n	80018ae <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80018aa:	2301      	movs	r3, #1
 80018ac:	e000      	b.n	80018b0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80018ae:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d14b      	bne.n	800194c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80018b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80018bc:	f023 030f 	bic.w	r3, r3, #15
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	6811      	ldr	r1, [r2, #0]
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	6892      	ldr	r2, [r2, #8]
 80018c8:	430a      	orrs	r2, r1
 80018ca:	431a      	orrs	r2, r3
 80018cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018ce:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80018d0:	e03c      	b.n	800194c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80018d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018dc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 0303 	and.w	r3, r3, #3
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d108      	bne.n	80018fe <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d101      	bne.n	80018fe <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80018fe:	2300      	movs	r3, #0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d123      	bne.n	800194c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 0303 	and.w	r3, r3, #3
 800190c:	2b01      	cmp	r3, #1
 800190e:	d107      	bne.n	8001920 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b01      	cmp	r3, #1
 800191a:	d101      	bne.n	8001920 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800191c:	2301      	movs	r3, #1
 800191e:	e000      	b.n	8001922 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001920:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001922:	2b00      	cmp	r3, #0
 8001924:	d112      	bne.n	800194c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001926:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800192e:	f023 030f 	bic.w	r3, r3, #15
 8001932:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001934:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001936:	e009      	b.n	800194c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193c:	f043 0220 	orr.w	r2, r3, #32
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800194a:	e000      	b.n	800194e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800194c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001956:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 800195a:	4618      	mov	r0, r3
 800195c:	3764      	adds	r7, #100	@ 0x64
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	50000100 	.word	0x50000100
 800196c:	50000400 	.word	0x50000400
 8001970:	50000500 	.word	0x50000500
 8001974:	50000300 	.word	0x50000300
 8001978:	50000700 	.word	0x50000700

0800197c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	2b01      	cmp	r3, #1
 8001994:	d108      	bne.n	80019a8 <ADC_Enable+0x2c>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d101      	bne.n	80019a8 <ADC_Enable+0x2c>
 80019a4:	2301      	movs	r3, #1
 80019a6:	e000      	b.n	80019aa <ADC_Enable+0x2e>
 80019a8:	2300      	movs	r3, #0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d143      	bne.n	8001a36 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	4b22      	ldr	r3, [pc, #136]	@ (8001a40 <ADC_Enable+0xc4>)
 80019b6:	4013      	ands	r3, r2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d00d      	beq.n	80019d8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c0:	f043 0210 	orr.w	r2, r3, #16
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019cc:	f043 0201 	orr.w	r2, r3, #1
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e02f      	b.n	8001a38 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0201 	orr.w	r2, r2, #1
 80019e6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80019e8:	f7fe ff9c 	bl	8000924 <HAL_GetTick>
 80019ec:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80019ee:	e01b      	b.n	8001a28 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019f0:	f7fe ff98 	bl	8000924 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d914      	bls.n	8001a28 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d00d      	beq.n	8001a28 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a10:	f043 0210 	orr.w	r2, r3, #16
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1c:	f043 0201 	orr.w	r2, r3, #1
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e007      	b.n	8001a38 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d1dc      	bne.n	80019f0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	8000003f 	.word	0x8000003f

08001a44 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d108      	bne.n	8001a70 <ADC_Disable+0x2c>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d101      	bne.n	8001a70 <ADC_Disable+0x2c>
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e000      	b.n	8001a72 <ADC_Disable+0x2e>
 8001a70:	2300      	movs	r3, #0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d047      	beq.n	8001b06 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 030d 	and.w	r3, r3, #13
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d10f      	bne.n	8001aa4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f042 0202 	orr.w	r2, r2, #2
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2203      	movs	r2, #3
 8001a9a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001a9c:	f7fe ff42 	bl	8000924 <HAL_GetTick>
 8001aa0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001aa2:	e029      	b.n	8001af8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa8:	f043 0210 	orr.w	r2, r3, #16
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab4:	f043 0201 	orr.w	r2, r3, #1
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e023      	b.n	8001b08 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ac0:	f7fe ff30 	bl	8000924 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d914      	bls.n	8001af8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d10d      	bne.n	8001af8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae0:	f043 0210 	orr.w	r2, r3, #16
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aec:	f043 0201 	orr.w	r2, r3, #1
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e007      	b.n	8001b08 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d0dc      	beq.n	8001ac0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b20:	4b0c      	ldr	r3, [pc, #48]	@ (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b42:	4a04      	ldr	r2, [pc, #16]	@ (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	60d3      	str	r3, [r2, #12]
}
 8001b48:	bf00      	nop
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b5c:	4b04      	ldr	r3, [pc, #16]	@ (8001b70 <__NVIC_GetPriorityGrouping+0x18>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	0a1b      	lsrs	r3, r3, #8
 8001b62:	f003 0307 	and.w	r3, r3, #7
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	6039      	str	r1, [r7, #0]
 8001b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	db0a      	blt.n	8001b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	490c      	ldr	r1, [pc, #48]	@ (8001bc0 <__NVIC_SetPriority+0x4c>)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	0112      	lsls	r2, r2, #4
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	440b      	add	r3, r1
 8001b98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b9c:	e00a      	b.n	8001bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	4908      	ldr	r1, [pc, #32]	@ (8001bc4 <__NVIC_SetPriority+0x50>)
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	3b04      	subs	r3, #4
 8001bac:	0112      	lsls	r2, r2, #4
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	761a      	strb	r2, [r3, #24]
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000e100 	.word	0xe000e100
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b089      	sub	sp, #36	@ 0x24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f1c3 0307 	rsb	r3, r3, #7
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	bf28      	it	cs
 8001be6:	2304      	movcs	r3, #4
 8001be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3304      	adds	r3, #4
 8001bee:	2b06      	cmp	r3, #6
 8001bf0:	d902      	bls.n	8001bf8 <NVIC_EncodePriority+0x30>
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3b03      	subs	r3, #3
 8001bf6:	e000      	b.n	8001bfa <NVIC_EncodePriority+0x32>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43da      	mvns	r2, r3
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	401a      	ands	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c10:	f04f 31ff 	mov.w	r1, #4294967295
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1a:	43d9      	mvns	r1, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	4313      	orrs	r3, r2
         );
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3724      	adds	r7, #36	@ 0x24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c40:	d301      	bcc.n	8001c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c42:	2301      	movs	r3, #1
 8001c44:	e00f      	b.n	8001c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c46:	4a0a      	ldr	r2, [pc, #40]	@ (8001c70 <SysTick_Config+0x40>)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c4e:	210f      	movs	r1, #15
 8001c50:	f04f 30ff 	mov.w	r0, #4294967295
 8001c54:	f7ff ff8e 	bl	8001b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c58:	4b05      	ldr	r3, [pc, #20]	@ (8001c70 <SysTick_Config+0x40>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c5e:	4b04      	ldr	r3, [pc, #16]	@ (8001c70 <SysTick_Config+0x40>)
 8001c60:	2207      	movs	r2, #7
 8001c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	e000e010 	.word	0xe000e010

08001c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff ff47 	bl	8001b10 <__NVIC_SetPriorityGrouping>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b086      	sub	sp, #24
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	4603      	mov	r3, r0
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
 8001c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c9c:	f7ff ff5c 	bl	8001b58 <__NVIC_GetPriorityGrouping>
 8001ca0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	68b9      	ldr	r1, [r7, #8]
 8001ca6:	6978      	ldr	r0, [r7, #20]
 8001ca8:	f7ff ff8e 	bl	8001bc8 <NVIC_EncodePriority>
 8001cac:	4602      	mov	r2, r0
 8001cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff5d 	bl	8001b74 <__NVIC_SetPriority>
}
 8001cba:	bf00      	nop
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff ffb0 	bl	8001c30 <SysTick_Config>
 8001cd0:	4603      	mov	r3, r0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b087      	sub	sp, #28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cea:	e160      	b.n	8001fae <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 8152 	beq.w	8001fa8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 0303 	and.w	r3, r3, #3
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d005      	beq.n	8001d1c <HAL_GPIO_Init+0x40>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d130      	bne.n	8001d7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	2203      	movs	r2, #3
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	4013      	ands	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d52:	2201      	movs	r2, #1
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	091b      	lsrs	r3, r3, #4
 8001d68:	f003 0201 	and.w	r2, r3, #1
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d017      	beq.n	8001dba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	2203      	movs	r2, #3
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d123      	bne.n	8001e0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	08da      	lsrs	r2, r3, #3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3208      	adds	r2, #8
 8001dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	220f      	movs	r2, #15
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4013      	ands	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	691a      	ldr	r2, [r3, #16]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	08da      	lsrs	r2, r3, #3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3208      	adds	r2, #8
 8001e08:	6939      	ldr	r1, [r7, #16]
 8001e0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	2203      	movs	r2, #3
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	4013      	ands	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 0203 	and.w	r2, r3, #3
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 80ac 	beq.w	8001fa8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e50:	4b5e      	ldr	r3, [pc, #376]	@ (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	4a5d      	ldr	r2, [pc, #372]	@ (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	6193      	str	r3, [r2, #24]
 8001e5c:	4b5b      	ldr	r3, [pc, #364]	@ (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e68:	4a59      	ldr	r2, [pc, #356]	@ (8001fd0 <HAL_GPIO_Init+0x2f4>)
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	089b      	lsrs	r3, r3, #2
 8001e6e:	3302      	adds	r3, #2
 8001e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	220f      	movs	r2, #15
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e92:	d025      	beq.n	8001ee0 <HAL_GPIO_Init+0x204>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a4f      	ldr	r2, [pc, #316]	@ (8001fd4 <HAL_GPIO_Init+0x2f8>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d01f      	beq.n	8001edc <HAL_GPIO_Init+0x200>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a4e      	ldr	r2, [pc, #312]	@ (8001fd8 <HAL_GPIO_Init+0x2fc>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d019      	beq.n	8001ed8 <HAL_GPIO_Init+0x1fc>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a4d      	ldr	r2, [pc, #308]	@ (8001fdc <HAL_GPIO_Init+0x300>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d013      	beq.n	8001ed4 <HAL_GPIO_Init+0x1f8>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a4c      	ldr	r2, [pc, #304]	@ (8001fe0 <HAL_GPIO_Init+0x304>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d00d      	beq.n	8001ed0 <HAL_GPIO_Init+0x1f4>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a4b      	ldr	r2, [pc, #300]	@ (8001fe4 <HAL_GPIO_Init+0x308>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d007      	beq.n	8001ecc <HAL_GPIO_Init+0x1f0>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a4a      	ldr	r2, [pc, #296]	@ (8001fe8 <HAL_GPIO_Init+0x30c>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d101      	bne.n	8001ec8 <HAL_GPIO_Init+0x1ec>
 8001ec4:	2306      	movs	r3, #6
 8001ec6:	e00c      	b.n	8001ee2 <HAL_GPIO_Init+0x206>
 8001ec8:	2307      	movs	r3, #7
 8001eca:	e00a      	b.n	8001ee2 <HAL_GPIO_Init+0x206>
 8001ecc:	2305      	movs	r3, #5
 8001ece:	e008      	b.n	8001ee2 <HAL_GPIO_Init+0x206>
 8001ed0:	2304      	movs	r3, #4
 8001ed2:	e006      	b.n	8001ee2 <HAL_GPIO_Init+0x206>
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e004      	b.n	8001ee2 <HAL_GPIO_Init+0x206>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e002      	b.n	8001ee2 <HAL_GPIO_Init+0x206>
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <HAL_GPIO_Init+0x206>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	f002 0203 	and.w	r2, r2, #3
 8001ee8:	0092      	lsls	r2, r2, #2
 8001eea:	4093      	lsls	r3, r2
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ef2:	4937      	ldr	r1, [pc, #220]	@ (8001fd0 <HAL_GPIO_Init+0x2f4>)
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	089b      	lsrs	r3, r3, #2
 8001ef8:	3302      	adds	r3, #2
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f00:	4b3a      	ldr	r3, [pc, #232]	@ (8001fec <HAL_GPIO_Init+0x310>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f24:	4a31      	ldr	r2, [pc, #196]	@ (8001fec <HAL_GPIO_Init+0x310>)
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f2a:	4b30      	ldr	r3, [pc, #192]	@ (8001fec <HAL_GPIO_Init+0x310>)
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	43db      	mvns	r3, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4013      	ands	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f4e:	4a27      	ldr	r2, [pc, #156]	@ (8001fec <HAL_GPIO_Init+0x310>)
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f54:	4b25      	ldr	r3, [pc, #148]	@ (8001fec <HAL_GPIO_Init+0x310>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4013      	ands	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f78:	4a1c      	ldr	r2, [pc, #112]	@ (8001fec <HAL_GPIO_Init+0x310>)
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fec <HAL_GPIO_Init+0x310>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001fa2:	4a12      	ldr	r2, [pc, #72]	@ (8001fec <HAL_GPIO_Init+0x310>)
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	3301      	adds	r3, #1
 8001fac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f47f ae97 	bne.w	8001cec <HAL_GPIO_Init+0x10>
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	bf00      	nop
 8001fc2:	371c      	adds	r7, #28
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40010000 	.word	0x40010000
 8001fd4:	48000400 	.word	0x48000400
 8001fd8:	48000800 	.word	0x48000800
 8001fdc:	48000c00 	.word	0x48000c00
 8001fe0:	48001000 	.word	0x48001000
 8001fe4:	48001400 	.word	0x48001400
 8001fe8:	48001800 	.word	0x48001800
 8001fec:	40010400 	.word	0x40010400

08001ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	807b      	strh	r3, [r7, #2]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002000:	787b      	ldrb	r3, [r7, #1]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002006:	887a      	ldrh	r2, [r7, #2]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800200c:	e002      	b.n	8002014 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800200e:	887a      	ldrh	r2, [r7, #2]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8002026:	af00      	add	r7, sp, #0
 8002028:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800202c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002030:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002032:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002036:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d102      	bne.n	8002046 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	f001 b83a 	b.w	80030ba <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002046:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800204a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 816f 	beq.w	800233a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800205c:	4bb5      	ldr	r3, [pc, #724]	@ (8002334 <HAL_RCC_OscConfig+0x314>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 030c 	and.w	r3, r3, #12
 8002064:	2b04      	cmp	r3, #4
 8002066:	d00c      	beq.n	8002082 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002068:	4bb2      	ldr	r3, [pc, #712]	@ (8002334 <HAL_RCC_OscConfig+0x314>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 030c 	and.w	r3, r3, #12
 8002070:	2b08      	cmp	r3, #8
 8002072:	d15c      	bne.n	800212e <HAL_RCC_OscConfig+0x10e>
 8002074:	4baf      	ldr	r3, [pc, #700]	@ (8002334 <HAL_RCC_OscConfig+0x314>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800207c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002080:	d155      	bne.n	800212e <HAL_RCC_OscConfig+0x10e>
 8002082:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002086:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800208e:	fa93 f3a3 	rbit	r3, r3
 8002092:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002096:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800209a:	fab3 f383 	clz	r3, r3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	095b      	lsrs	r3, r3, #5
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d102      	bne.n	80020b4 <HAL_RCC_OscConfig+0x94>
 80020ae:	4ba1      	ldr	r3, [pc, #644]	@ (8002334 <HAL_RCC_OscConfig+0x314>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	e015      	b.n	80020e0 <HAL_RCC_OscConfig+0xc0>
 80020b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020b8:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020bc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80020c0:	fa93 f3a3 	rbit	r3, r3
 80020c4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80020c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020cc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80020d0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80020d4:	fa93 f3a3 	rbit	r3, r3
 80020d8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80020dc:	4b95      	ldr	r3, [pc, #596]	@ (8002334 <HAL_RCC_OscConfig+0x314>)
 80020de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80020e4:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80020e8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80020ec:	fa92 f2a2 	rbit	r2, r2
 80020f0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80020f4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80020f8:	fab2 f282 	clz	r2, r2
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	f042 0220 	orr.w	r2, r2, #32
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	f002 021f 	and.w	r2, r2, #31
 8002108:	2101      	movs	r1, #1
 800210a:	fa01 f202 	lsl.w	r2, r1, r2
 800210e:	4013      	ands	r3, r2
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 8111 	beq.w	8002338 <HAL_RCC_OscConfig+0x318>
 8002116:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800211a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	f040 8108 	bne.w	8002338 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	f000 bfc6 	b.w	80030ba <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800212e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002132:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800213e:	d106      	bne.n	800214e <HAL_RCC_OscConfig+0x12e>
 8002140:	4b7c      	ldr	r3, [pc, #496]	@ (8002334 <HAL_RCC_OscConfig+0x314>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a7b      	ldr	r2, [pc, #492]	@ (8002334 <HAL_RCC_OscConfig+0x314>)
 8002146:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800214a:	6013      	str	r3, [r2, #0]
 800214c:	e036      	b.n	80021bc <HAL_RCC_OscConfig+0x19c>
 800214e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002152:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10c      	bne.n	8002178 <HAL_RCC_OscConfig+0x158>
 800215e:	4b75      	ldr	r3, [pc, #468]	@ (8002334 <HAL_RCC_OscConfig+0x314>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a74      	ldr	r2, [pc, #464]	@ (8002334 <HAL_RCC_OscConfig+0x314>)
 8002164:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	4b72      	ldr	r3, [pc, #456]	@ (8002334 <HAL_RCC_OscConfig+0x314>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a71      	ldr	r2, [pc, #452]	@ (8002334 <HAL_RCC_OscConfig+0x314>)
 8002170:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	e021      	b.n	80021bc <HAL_RCC_OscConfig+0x19c>
 8002178:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800217c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002188:	d10c      	bne.n	80021a4 <HAL_RCC_OscConfig+0x184>
 800218a:	4b6a      	ldr	r3, [pc, #424]	@ (8002334 <HAL_RCC_OscConfig+0x314>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a69      	ldr	r2, [pc, #420]	@ (8002334 <HAL_RCC_OscConfig+0x314>)
 8002190:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	4b67      	ldr	r3, [pc, #412]	@ (8002334 <HAL_RCC_OscConfig+0x314>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a66      	ldr	r2, [pc, #408]	@ (8002334 <HAL_RCC_OscConfig+0x314>)
 800219c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	e00b      	b.n	80021bc <HAL_RCC_OscConfig+0x19c>
 80021a4:	4b63      	ldr	r3, [pc, #396]	@ (8002334 <HAL_RCC_OscConfig+0x314>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a62      	ldr	r2, [pc, #392]	@ (8002334 <HAL_RCC_OscConfig+0x314>)
 80021aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021ae:	6013      	str	r3, [r2, #0]
 80021b0:	4b60      	ldr	r3, [pc, #384]	@ (8002334 <HAL_RCC_OscConfig+0x314>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a5f      	ldr	r2, [pc, #380]	@ (8002334 <HAL_RCC_OscConfig+0x314>)
 80021b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021ba:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021c0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d059      	beq.n	8002280 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021cc:	f7fe fbaa 	bl	8000924 <HAL_GetTick>
 80021d0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d4:	e00a      	b.n	80021ec <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021d6:	f7fe fba5 	bl	8000924 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	@ 0x64
 80021e4:	d902      	bls.n	80021ec <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	f000 bf67 	b.w	80030ba <HAL_RCC_OscConfig+0x109a>
 80021ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021f0:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80021f8:	fa93 f3a3 	rbit	r3, r3
 80021fc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002200:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002204:	fab3 f383 	clz	r3, r3
 8002208:	b2db      	uxtb	r3, r3
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	b2db      	uxtb	r3, r3
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b01      	cmp	r3, #1
 8002216:	d102      	bne.n	800221e <HAL_RCC_OscConfig+0x1fe>
 8002218:	4b46      	ldr	r3, [pc, #280]	@ (8002334 <HAL_RCC_OscConfig+0x314>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	e015      	b.n	800224a <HAL_RCC_OscConfig+0x22a>
 800221e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002222:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002226:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800222a:	fa93 f3a3 	rbit	r3, r3
 800222e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002232:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002236:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800223a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800223e:	fa93 f3a3 	rbit	r3, r3
 8002242:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002246:	4b3b      	ldr	r3, [pc, #236]	@ (8002334 <HAL_RCC_OscConfig+0x314>)
 8002248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800224e:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8002252:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8002256:	fa92 f2a2 	rbit	r2, r2
 800225a:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800225e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002262:	fab2 f282 	clz	r2, r2
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	f042 0220 	orr.w	r2, r2, #32
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	f002 021f 	and.w	r2, r2, #31
 8002272:	2101      	movs	r1, #1
 8002274:	fa01 f202 	lsl.w	r2, r1, r2
 8002278:	4013      	ands	r3, r2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0ab      	beq.n	80021d6 <HAL_RCC_OscConfig+0x1b6>
 800227e:	e05c      	b.n	800233a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002280:	f7fe fb50 	bl	8000924 <HAL_GetTick>
 8002284:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002288:	e00a      	b.n	80022a0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800228a:	f7fe fb4b 	bl	8000924 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b64      	cmp	r3, #100	@ 0x64
 8002298:	d902      	bls.n	80022a0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	f000 bf0d 	b.w	80030ba <HAL_RCC_OscConfig+0x109a>
 80022a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022a4:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80022b4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b8:	fab3 f383 	clz	r3, r3
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	095b      	lsrs	r3, r3, #5
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d102      	bne.n	80022d2 <HAL_RCC_OscConfig+0x2b2>
 80022cc:	4b19      	ldr	r3, [pc, #100]	@ (8002334 <HAL_RCC_OscConfig+0x314>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	e015      	b.n	80022fe <HAL_RCC_OscConfig+0x2de>
 80022d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022d6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022da:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80022de:	fa93 f3a3 	rbit	r3, r3
 80022e2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80022e6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022ea:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80022ee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80022f2:	fa93 f3a3 	rbit	r3, r3
 80022f6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80022fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002334 <HAL_RCC_OscConfig+0x314>)
 80022fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002302:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002306:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800230a:	fa92 f2a2 	rbit	r2, r2
 800230e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8002312:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002316:	fab2 f282 	clz	r2, r2
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	f042 0220 	orr.w	r2, r2, #32
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	f002 021f 	and.w	r2, r2, #31
 8002326:	2101      	movs	r1, #1
 8002328:	fa01 f202 	lsl.w	r2, r1, r2
 800232c:	4013      	ands	r3, r2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1ab      	bne.n	800228a <HAL_RCC_OscConfig+0x26a>
 8002332:	e002      	b.n	800233a <HAL_RCC_OscConfig+0x31a>
 8002334:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800233a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800233e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 817f 	beq.w	800264e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002350:	4ba7      	ldr	r3, [pc, #668]	@ (80025f0 <HAL_RCC_OscConfig+0x5d0>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 030c 	and.w	r3, r3, #12
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00c      	beq.n	8002376 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800235c:	4ba4      	ldr	r3, [pc, #656]	@ (80025f0 <HAL_RCC_OscConfig+0x5d0>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 030c 	and.w	r3, r3, #12
 8002364:	2b08      	cmp	r3, #8
 8002366:	d173      	bne.n	8002450 <HAL_RCC_OscConfig+0x430>
 8002368:	4ba1      	ldr	r3, [pc, #644]	@ (80025f0 <HAL_RCC_OscConfig+0x5d0>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002370:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002374:	d16c      	bne.n	8002450 <HAL_RCC_OscConfig+0x430>
 8002376:	2302      	movs	r3, #2
 8002378:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002380:	fa93 f3a3 	rbit	r3, r3
 8002384:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002388:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238c:	fab3 f383 	clz	r3, r3
 8002390:	b2db      	uxtb	r3, r3
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	b2db      	uxtb	r3, r3
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b01      	cmp	r3, #1
 800239e:	d102      	bne.n	80023a6 <HAL_RCC_OscConfig+0x386>
 80023a0:	4b93      	ldr	r3, [pc, #588]	@ (80025f0 <HAL_RCC_OscConfig+0x5d0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	e013      	b.n	80023ce <HAL_RCC_OscConfig+0x3ae>
 80023a6:	2302      	movs	r3, #2
 80023a8:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ac:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80023b0:	fa93 f3a3 	rbit	r3, r3
 80023b4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80023b8:	2302      	movs	r3, #2
 80023ba:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80023be:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80023c2:	fa93 f3a3 	rbit	r3, r3
 80023c6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80023ca:	4b89      	ldr	r3, [pc, #548]	@ (80025f0 <HAL_RCC_OscConfig+0x5d0>)
 80023cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ce:	2202      	movs	r2, #2
 80023d0:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80023d4:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80023d8:	fa92 f2a2 	rbit	r2, r2
 80023dc:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80023e0:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80023e4:	fab2 f282 	clz	r2, r2
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	f042 0220 	orr.w	r2, r2, #32
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	f002 021f 	and.w	r2, r2, #31
 80023f4:	2101      	movs	r1, #1
 80023f6:	fa01 f202 	lsl.w	r2, r1, r2
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00a      	beq.n	8002416 <HAL_RCC_OscConfig+0x3f6>
 8002400:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002404:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d002      	beq.n	8002416 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	f000 be52 	b.w	80030ba <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002416:	4b76      	ldr	r3, [pc, #472]	@ (80025f0 <HAL_RCC_OscConfig+0x5d0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800241e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002422:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	21f8      	movs	r1, #248	@ 0xf8
 800242c:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8002434:	fa91 f1a1 	rbit	r1, r1
 8002438:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 800243c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002440:	fab1 f181 	clz	r1, r1
 8002444:	b2c9      	uxtb	r1, r1
 8002446:	408b      	lsls	r3, r1
 8002448:	4969      	ldr	r1, [pc, #420]	@ (80025f0 <HAL_RCC_OscConfig+0x5d0>)
 800244a:	4313      	orrs	r3, r2
 800244c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244e:	e0fe      	b.n	800264e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002450:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002454:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 8088 	beq.w	8002572 <HAL_RCC_OscConfig+0x552>
 8002462:	2301      	movs	r3, #1
 8002464:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800246c:	fa93 f3a3 	rbit	r3, r3
 8002470:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8002474:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002478:	fab3 f383 	clz	r3, r3
 800247c:	b2db      	uxtb	r3, r3
 800247e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002482:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	461a      	mov	r2, r3
 800248a:	2301      	movs	r3, #1
 800248c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248e:	f7fe fa49 	bl	8000924 <HAL_GetTick>
 8002492:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002496:	e00a      	b.n	80024ae <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002498:	f7fe fa44 	bl	8000924 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d902      	bls.n	80024ae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	f000 be06 	b.w	80030ba <HAL_RCC_OscConfig+0x109a>
 80024ae:	2302      	movs	r3, #2
 80024b0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b4:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80024b8:	fa93 f3a3 	rbit	r3, r3
 80024bc:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80024c0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c4:	fab3 f383 	clz	r3, r3
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	095b      	lsrs	r3, r3, #5
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d102      	bne.n	80024de <HAL_RCC_OscConfig+0x4be>
 80024d8:	4b45      	ldr	r3, [pc, #276]	@ (80025f0 <HAL_RCC_OscConfig+0x5d0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	e013      	b.n	8002506 <HAL_RCC_OscConfig+0x4e6>
 80024de:	2302      	movs	r3, #2
 80024e0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80024e8:	fa93 f3a3 	rbit	r3, r3
 80024ec:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80024f0:	2302      	movs	r3, #2
 80024f2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80024f6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002502:	4b3b      	ldr	r3, [pc, #236]	@ (80025f0 <HAL_RCC_OscConfig+0x5d0>)
 8002504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002506:	2202      	movs	r2, #2
 8002508:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800250c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002510:	fa92 f2a2 	rbit	r2, r2
 8002514:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002518:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800251c:	fab2 f282 	clz	r2, r2
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	f042 0220 	orr.w	r2, r2, #32
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	f002 021f 	and.w	r2, r2, #31
 800252c:	2101      	movs	r1, #1
 800252e:	fa01 f202 	lsl.w	r2, r1, r2
 8002532:	4013      	ands	r3, r2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0af      	beq.n	8002498 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002538:	4b2d      	ldr	r3, [pc, #180]	@ (80025f0 <HAL_RCC_OscConfig+0x5d0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002540:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002544:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	21f8      	movs	r1, #248	@ 0xf8
 800254e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002552:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8002556:	fa91 f1a1 	rbit	r1, r1
 800255a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800255e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002562:	fab1 f181 	clz	r1, r1
 8002566:	b2c9      	uxtb	r1, r1
 8002568:	408b      	lsls	r3, r1
 800256a:	4921      	ldr	r1, [pc, #132]	@ (80025f0 <HAL_RCC_OscConfig+0x5d0>)
 800256c:	4313      	orrs	r3, r2
 800256e:	600b      	str	r3, [r1, #0]
 8002570:	e06d      	b.n	800264e <HAL_RCC_OscConfig+0x62e>
 8002572:	2301      	movs	r3, #1
 8002574:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800257c:	fa93 f3a3 	rbit	r3, r3
 8002580:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8002584:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002588:	fab3 f383 	clz	r3, r3
 800258c:	b2db      	uxtb	r3, r3
 800258e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002592:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	461a      	mov	r2, r3
 800259a:	2300      	movs	r3, #0
 800259c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259e:	f7fe f9c1 	bl	8000924 <HAL_GetTick>
 80025a2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a6:	e00a      	b.n	80025be <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025a8:	f7fe f9bc 	bl	8000924 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d902      	bls.n	80025be <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	f000 bd7e 	b.w	80030ba <HAL_RCC_OscConfig+0x109a>
 80025be:	2302      	movs	r3, #2
 80025c0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80025c8:	fa93 f3a3 	rbit	r3, r3
 80025cc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80025d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d4:	fab3 f383 	clz	r3, r3
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d105      	bne.n	80025f4 <HAL_RCC_OscConfig+0x5d4>
 80025e8:	4b01      	ldr	r3, [pc, #4]	@ (80025f0 <HAL_RCC_OscConfig+0x5d0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	e016      	b.n	800261c <HAL_RCC_OscConfig+0x5fc>
 80025ee:	bf00      	nop
 80025f0:	40021000 	.word	0x40021000
 80025f4:	2302      	movs	r3, #2
 80025f6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80025fe:	fa93 f3a3 	rbit	r3, r3
 8002602:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002606:	2302      	movs	r3, #2
 8002608:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800260c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002610:	fa93 f3a3 	rbit	r3, r3
 8002614:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002618:	4bbf      	ldr	r3, [pc, #764]	@ (8002918 <HAL_RCC_OscConfig+0x8f8>)
 800261a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261c:	2202      	movs	r2, #2
 800261e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002622:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002626:	fa92 f2a2 	rbit	r2, r2
 800262a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800262e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002632:	fab2 f282 	clz	r2, r2
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	f042 0220 	orr.w	r2, r2, #32
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	f002 021f 	and.w	r2, r2, #31
 8002642:	2101      	movs	r1, #1
 8002644:	fa01 f202 	lsl.w	r2, r1, r2
 8002648:	4013      	ands	r3, r2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1ac      	bne.n	80025a8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800264e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002652:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 8113 	beq.w	800288a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002664:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002668:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d07c      	beq.n	800276e <HAL_RCC_OscConfig+0x74e>
 8002674:	2301      	movs	r3, #1
 8002676:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800267e:	fa93 f3a3 	rbit	r3, r3
 8002682:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8002686:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800268a:	fab3 f383 	clz	r3, r3
 800268e:	b2db      	uxtb	r3, r3
 8002690:	461a      	mov	r2, r3
 8002692:	4ba2      	ldr	r3, [pc, #648]	@ (800291c <HAL_RCC_OscConfig+0x8fc>)
 8002694:	4413      	add	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	461a      	mov	r2, r3
 800269a:	2301      	movs	r3, #1
 800269c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800269e:	f7fe f941 	bl	8000924 <HAL_GetTick>
 80026a2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a6:	e00a      	b.n	80026be <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a8:	f7fe f93c 	bl	8000924 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d902      	bls.n	80026be <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	f000 bcfe 	b.w	80030ba <HAL_RCC_OscConfig+0x109a>
 80026be:	2302      	movs	r3, #2
 80026c0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80026c8:	fa93 f2a3 	rbit	r2, r3
 80026cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026d0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80026de:	2202      	movs	r2, #2
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	fa93 f2a3 	rbit	r2, r3
 80026f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002702:	2202      	movs	r2, #2
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800270a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	fa93 f2a3 	rbit	r2, r3
 8002714:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002718:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800271c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271e:	4b7e      	ldr	r3, [pc, #504]	@ (8002918 <HAL_RCC_OscConfig+0x8f8>)
 8002720:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002722:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002726:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800272a:	2102      	movs	r1, #2
 800272c:	6019      	str	r1, [r3, #0]
 800272e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002732:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	fa93 f1a3 	rbit	r1, r3
 800273c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002740:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002744:	6019      	str	r1, [r3, #0]
  return result;
 8002746:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800274a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	fab3 f383 	clz	r3, r3
 8002754:	b2db      	uxtb	r3, r3
 8002756:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800275a:	b2db      	uxtb	r3, r3
 800275c:	f003 031f 	and.w	r3, r3, #31
 8002760:	2101      	movs	r1, #1
 8002762:	fa01 f303 	lsl.w	r3, r1, r3
 8002766:	4013      	ands	r3, r2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d09d      	beq.n	80026a8 <HAL_RCC_OscConfig+0x688>
 800276c:	e08d      	b.n	800288a <HAL_RCC_OscConfig+0x86a>
 800276e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002772:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002776:	2201      	movs	r2, #1
 8002778:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800277e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	fa93 f2a3 	rbit	r2, r3
 8002788:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800278c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002790:	601a      	str	r2, [r3, #0]
  return result;
 8002792:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002796:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800279a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800279c:	fab3 f383 	clz	r3, r3
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	461a      	mov	r2, r3
 80027a4:	4b5d      	ldr	r3, [pc, #372]	@ (800291c <HAL_RCC_OscConfig+0x8fc>)
 80027a6:	4413      	add	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	461a      	mov	r2, r3
 80027ac:	2300      	movs	r3, #0
 80027ae:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b0:	f7fe f8b8 	bl	8000924 <HAL_GetTick>
 80027b4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b8:	e00a      	b.n	80027d0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ba:	f7fe f8b3 	bl	8000924 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d902      	bls.n	80027d0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	f000 bc75 	b.w	80030ba <HAL_RCC_OscConfig+0x109a>
 80027d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027d4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80027d8:	2202      	movs	r2, #2
 80027da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027e0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	fa93 f2a3 	rbit	r2, r3
 80027ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027ee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80027fc:	2202      	movs	r2, #2
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002804:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	fa93 f2a3 	rbit	r2, r3
 800280e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002812:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800281c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002820:	2202      	movs	r2, #2
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002828:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	fa93 f2a3 	rbit	r2, r3
 8002832:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002836:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800283a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800283c:	4b36      	ldr	r3, [pc, #216]	@ (8002918 <HAL_RCC_OscConfig+0x8f8>)
 800283e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002840:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002844:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002848:	2102      	movs	r1, #2
 800284a:	6019      	str	r1, [r3, #0]
 800284c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002850:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	fa93 f1a3 	rbit	r1, r3
 800285a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800285e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002862:	6019      	str	r1, [r3, #0]
  return result;
 8002864:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002868:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	fab3 f383 	clz	r3, r3
 8002872:	b2db      	uxtb	r3, r3
 8002874:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002878:	b2db      	uxtb	r3, r3
 800287a:	f003 031f 	and.w	r3, r3, #31
 800287e:	2101      	movs	r1, #1
 8002880:	fa01 f303 	lsl.w	r3, r1, r3
 8002884:	4013      	ands	r3, r2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d197      	bne.n	80027ba <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800288a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800288e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0304 	and.w	r3, r3, #4
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 81a5 	beq.w	8002bea <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028a0:	2300      	movs	r3, #0
 80028a2:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002918 <HAL_RCC_OscConfig+0x8f8>)
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d116      	bne.n	80028e0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b2:	4b19      	ldr	r3, [pc, #100]	@ (8002918 <HAL_RCC_OscConfig+0x8f8>)
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	4a18      	ldr	r2, [pc, #96]	@ (8002918 <HAL_RCC_OscConfig+0x8f8>)
 80028b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028bc:	61d3      	str	r3, [r2, #28]
 80028be:	4b16      	ldr	r3, [pc, #88]	@ (8002918 <HAL_RCC_OscConfig+0x8f8>)
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80028c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028d8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80028da:	2301      	movs	r3, #1
 80028dc:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002920 <HAL_RCC_OscConfig+0x900>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d121      	bne.n	8002930 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002920 <HAL_RCC_OscConfig+0x900>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a0b      	ldr	r2, [pc, #44]	@ (8002920 <HAL_RCC_OscConfig+0x900>)
 80028f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028f6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028f8:	f7fe f814 	bl	8000924 <HAL_GetTick>
 80028fc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002900:	e010      	b.n	8002924 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002902:	f7fe f80f 	bl	8000924 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b64      	cmp	r3, #100	@ 0x64
 8002910:	d908      	bls.n	8002924 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e3d1      	b.n	80030ba <HAL_RCC_OscConfig+0x109a>
 8002916:	bf00      	nop
 8002918:	40021000 	.word	0x40021000
 800291c:	10908120 	.word	0x10908120
 8002920:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002924:	4b8d      	ldr	r3, [pc, #564]	@ (8002b5c <HAL_RCC_OscConfig+0xb3c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0e8      	beq.n	8002902 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002930:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002934:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d106      	bne.n	800294e <HAL_RCC_OscConfig+0x92e>
 8002940:	4b87      	ldr	r3, [pc, #540]	@ (8002b60 <HAL_RCC_OscConfig+0xb40>)
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	4a86      	ldr	r2, [pc, #536]	@ (8002b60 <HAL_RCC_OscConfig+0xb40>)
 8002946:	f043 0301 	orr.w	r3, r3, #1
 800294a:	6213      	str	r3, [r2, #32]
 800294c:	e035      	b.n	80029ba <HAL_RCC_OscConfig+0x99a>
 800294e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002952:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10c      	bne.n	8002978 <HAL_RCC_OscConfig+0x958>
 800295e:	4b80      	ldr	r3, [pc, #512]	@ (8002b60 <HAL_RCC_OscConfig+0xb40>)
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	4a7f      	ldr	r2, [pc, #508]	@ (8002b60 <HAL_RCC_OscConfig+0xb40>)
 8002964:	f023 0301 	bic.w	r3, r3, #1
 8002968:	6213      	str	r3, [r2, #32]
 800296a:	4b7d      	ldr	r3, [pc, #500]	@ (8002b60 <HAL_RCC_OscConfig+0xb40>)
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	4a7c      	ldr	r2, [pc, #496]	@ (8002b60 <HAL_RCC_OscConfig+0xb40>)
 8002970:	f023 0304 	bic.w	r3, r3, #4
 8002974:	6213      	str	r3, [r2, #32]
 8002976:	e020      	b.n	80029ba <HAL_RCC_OscConfig+0x99a>
 8002978:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800297c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	2b05      	cmp	r3, #5
 8002986:	d10c      	bne.n	80029a2 <HAL_RCC_OscConfig+0x982>
 8002988:	4b75      	ldr	r3, [pc, #468]	@ (8002b60 <HAL_RCC_OscConfig+0xb40>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	4a74      	ldr	r2, [pc, #464]	@ (8002b60 <HAL_RCC_OscConfig+0xb40>)
 800298e:	f043 0304 	orr.w	r3, r3, #4
 8002992:	6213      	str	r3, [r2, #32]
 8002994:	4b72      	ldr	r3, [pc, #456]	@ (8002b60 <HAL_RCC_OscConfig+0xb40>)
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	4a71      	ldr	r2, [pc, #452]	@ (8002b60 <HAL_RCC_OscConfig+0xb40>)
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	6213      	str	r3, [r2, #32]
 80029a0:	e00b      	b.n	80029ba <HAL_RCC_OscConfig+0x99a>
 80029a2:	4b6f      	ldr	r3, [pc, #444]	@ (8002b60 <HAL_RCC_OscConfig+0xb40>)
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	4a6e      	ldr	r2, [pc, #440]	@ (8002b60 <HAL_RCC_OscConfig+0xb40>)
 80029a8:	f023 0301 	bic.w	r3, r3, #1
 80029ac:	6213      	str	r3, [r2, #32]
 80029ae:	4b6c      	ldr	r3, [pc, #432]	@ (8002b60 <HAL_RCC_OscConfig+0xb40>)
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	4a6b      	ldr	r2, [pc, #428]	@ (8002b60 <HAL_RCC_OscConfig+0xb40>)
 80029b4:	f023 0304 	bic.w	r3, r3, #4
 80029b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029be:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 8081 	beq.w	8002ace <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029cc:	f7fd ffaa 	bl	8000924 <HAL_GetTick>
 80029d0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d4:	e00b      	b.n	80029ee <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d6:	f7fd ffa5 	bl	8000924 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e365      	b.n	80030ba <HAL_RCC_OscConfig+0x109a>
 80029ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029f2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80029f6:	2202      	movs	r2, #2
 80029f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029fe:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	fa93 f2a3 	rbit	r2, r3
 8002a08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a0c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a16:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a22:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	fa93 f2a3 	rbit	r2, r3
 8002a2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a30:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002a34:	601a      	str	r2, [r3, #0]
  return result;
 8002a36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a3a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002a3e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a40:	fab3 f383 	clz	r3, r3
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	095b      	lsrs	r3, r3, #5
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	f043 0302 	orr.w	r3, r3, #2
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d102      	bne.n	8002a5a <HAL_RCC_OscConfig+0xa3a>
 8002a54:	4b42      	ldr	r3, [pc, #264]	@ (8002b60 <HAL_RCC_OscConfig+0xb40>)
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	e013      	b.n	8002a82 <HAL_RCC_OscConfig+0xa62>
 8002a5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a5e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002a62:	2202      	movs	r2, #2
 8002a64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a6a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	fa93 f2a3 	rbit	r2, r3
 8002a74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a78:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	4b38      	ldr	r3, [pc, #224]	@ (8002b60 <HAL_RCC_OscConfig+0xb40>)
 8002a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a82:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002a86:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002a8a:	2102      	movs	r1, #2
 8002a8c:	6011      	str	r1, [r2, #0]
 8002a8e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002a92:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	fa92 f1a2 	rbit	r1, r2
 8002a9c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002aa0:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002aa4:	6011      	str	r1, [r2, #0]
  return result;
 8002aa6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002aaa:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	fab2 f282 	clz	r2, r2
 8002ab4:	b2d2      	uxtb	r2, r2
 8002ab6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	f002 021f 	and.w	r2, r2, #31
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d084      	beq.n	80029d6 <HAL_RCC_OscConfig+0x9b6>
 8002acc:	e083      	b.n	8002bd6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ace:	f7fd ff29 	bl	8000924 <HAL_GetTick>
 8002ad2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad6:	e00b      	b.n	8002af0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad8:	f7fd ff24 	bl	8000924 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e2e4      	b.n	80030ba <HAL_RCC_OscConfig+0x109a>
 8002af0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002af4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002af8:	2202      	movs	r2, #2
 8002afa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b00:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	fa93 f2a3 	rbit	r2, r3
 8002b0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b0e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b18:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b24:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	fa93 f2a3 	rbit	r2, r3
 8002b2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b32:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002b36:	601a      	str	r2, [r3, #0]
  return result;
 8002b38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b3c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002b40:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b42:	fab3 f383 	clz	r3, r3
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	095b      	lsrs	r3, r3, #5
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	f043 0302 	orr.w	r3, r3, #2
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d106      	bne.n	8002b64 <HAL_RCC_OscConfig+0xb44>
 8002b56:	4b02      	ldr	r3, [pc, #8]	@ (8002b60 <HAL_RCC_OscConfig+0xb40>)
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	e017      	b.n	8002b8c <HAL_RCC_OscConfig+0xb6c>
 8002b5c:	40007000 	.word	0x40007000
 8002b60:	40021000 	.word	0x40021000
 8002b64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b68:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b74:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	fa93 f2a3 	rbit	r2, r3
 8002b7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b82:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	4bb3      	ldr	r3, [pc, #716]	@ (8002e58 <HAL_RCC_OscConfig+0xe38>)
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b90:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002b94:	2102      	movs	r1, #2
 8002b96:	6011      	str	r1, [r2, #0]
 8002b98:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b9c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002ba0:	6812      	ldr	r2, [r2, #0]
 8002ba2:	fa92 f1a2 	rbit	r1, r2
 8002ba6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002baa:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002bae:	6011      	str	r1, [r2, #0]
  return result;
 8002bb0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002bb4:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002bb8:	6812      	ldr	r2, [r2, #0]
 8002bba:	fab2 f282 	clz	r2, r2
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	f002 021f 	and.w	r2, r2, #31
 8002bca:	2101      	movs	r1, #1
 8002bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d180      	bne.n	8002ad8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bd6:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d105      	bne.n	8002bea <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bde:	4b9e      	ldr	r3, [pc, #632]	@ (8002e58 <HAL_RCC_OscConfig+0xe38>)
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	4a9d      	ldr	r2, [pc, #628]	@ (8002e58 <HAL_RCC_OscConfig+0xe38>)
 8002be4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002be8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 825e 	beq.w	80030b8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bfc:	4b96      	ldr	r3, [pc, #600]	@ (8002e58 <HAL_RCC_OscConfig+0xe38>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 030c 	and.w	r3, r3, #12
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	f000 821f 	beq.w	8003048 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c0e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	f040 8170 	bne.w	8002efc <HAL_RCC_OscConfig+0xedc>
 8002c1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c20:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002c24:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c2e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	fa93 f2a3 	rbit	r2, r3
 8002c38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c3c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002c40:	601a      	str	r2, [r3, #0]
  return result;
 8002c42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c46:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002c4a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4c:	fab3 f383 	clz	r3, r3
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002c56:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	2300      	movs	r3, #0
 8002c60:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c62:	f7fd fe5f 	bl	8000924 <HAL_GetTick>
 8002c66:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c6a:	e009      	b.n	8002c80 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c6c:	f7fd fe5a 	bl	8000924 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e21c      	b.n	80030ba <HAL_RCC_OscConfig+0x109a>
 8002c80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c84:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002c88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c92:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	fa93 f2a3 	rbit	r2, r3
 8002c9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ca0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002ca4:	601a      	str	r2, [r3, #0]
  return result;
 8002ca6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002caa:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002cae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb0:	fab3 f383 	clz	r3, r3
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	095b      	lsrs	r3, r3, #5
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	f043 0301 	orr.w	r3, r3, #1
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d102      	bne.n	8002cca <HAL_RCC_OscConfig+0xcaa>
 8002cc4:	4b64      	ldr	r3, [pc, #400]	@ (8002e58 <HAL_RCC_OscConfig+0xe38>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	e027      	b.n	8002d1a <HAL_RCC_OscConfig+0xcfa>
 8002cca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cce:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002cd2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cdc:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	fa93 f2a3 	rbit	r2, r3
 8002ce6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cea:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cf4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002cf8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d02:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	fa93 f2a3 	rbit	r2, r3
 8002d0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d10:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	4b50      	ldr	r3, [pc, #320]	@ (8002e58 <HAL_RCC_OscConfig+0xe38>)
 8002d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d1e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002d22:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002d26:	6011      	str	r1, [r2, #0]
 8002d28:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d2c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002d30:	6812      	ldr	r2, [r2, #0]
 8002d32:	fa92 f1a2 	rbit	r1, r2
 8002d36:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d3a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002d3e:	6011      	str	r1, [r2, #0]
  return result;
 8002d40:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d44:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002d48:	6812      	ldr	r2, [r2, #0]
 8002d4a:	fab2 f282 	clz	r2, r2
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	f042 0220 	orr.w	r2, r2, #32
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	f002 021f 	and.w	r2, r2, #31
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d60:	4013      	ands	r3, r2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d182      	bne.n	8002c6c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d66:	4b3c      	ldr	r3, [pc, #240]	@ (8002e58 <HAL_RCC_OscConfig+0xe38>)
 8002d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d6a:	f023 020f 	bic.w	r2, r3, #15
 8002d6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d72:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7a:	4937      	ldr	r1, [pc, #220]	@ (8002e58 <HAL_RCC_OscConfig+0xe38>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002d80:	4b35      	ldr	r3, [pc, #212]	@ (8002e58 <HAL_RCC_OscConfig+0xe38>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002d88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d8c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6a19      	ldr	r1, [r3, #32]
 8002d94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d98:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	430b      	orrs	r3, r1
 8002da2:	492d      	ldr	r1, [pc, #180]	@ (8002e58 <HAL_RCC_OscConfig+0xe38>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	604b      	str	r3, [r1, #4]
 8002da8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dac:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002db0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002db4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dba:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	fa93 f2a3 	rbit	r2, r3
 8002dc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dc8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002dcc:	601a      	str	r2, [r3, #0]
  return result;
 8002dce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dd2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002dd6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dd8:	fab3 f383 	clz	r3, r3
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002de2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	461a      	mov	r2, r3
 8002dea:	2301      	movs	r3, #1
 8002dec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dee:	f7fd fd99 	bl	8000924 <HAL_GetTick>
 8002df2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002df6:	e009      	b.n	8002e0c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df8:	f7fd fd94 	bl	8000924 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e156      	b.n	80030ba <HAL_RCC_OscConfig+0x109a>
 8002e0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e10:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002e14:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e1e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	fa93 f2a3 	rbit	r2, r3
 8002e28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e2c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002e30:	601a      	str	r2, [r3, #0]
  return result;
 8002e32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e36:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002e3a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e3c:	fab3 f383 	clz	r3, r3
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	095b      	lsrs	r3, r3, #5
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d105      	bne.n	8002e5c <HAL_RCC_OscConfig+0xe3c>
 8002e50:	4b01      	ldr	r3, [pc, #4]	@ (8002e58 <HAL_RCC_OscConfig+0xe38>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	e02a      	b.n	8002eac <HAL_RCC_OscConfig+0xe8c>
 8002e56:	bf00      	nop
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e60:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002e64:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e6e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	fa93 f2a3 	rbit	r2, r3
 8002e78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e7c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e86:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002e8a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e94:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	fa93 f2a3 	rbit	r2, r3
 8002e9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ea2:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	4b86      	ldr	r3, [pc, #536]	@ (80030c4 <HAL_RCC_OscConfig+0x10a4>)
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eac:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002eb0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002eb4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002eb8:	6011      	str	r1, [r2, #0]
 8002eba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ebe:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002ec2:	6812      	ldr	r2, [r2, #0]
 8002ec4:	fa92 f1a2 	rbit	r1, r2
 8002ec8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ecc:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002ed0:	6011      	str	r1, [r2, #0]
  return result;
 8002ed2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ed6:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	fab2 f282 	clz	r2, r2
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	f042 0220 	orr.w	r2, r2, #32
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	f002 021f 	and.w	r2, r2, #31
 8002eec:	2101      	movs	r1, #1
 8002eee:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f43f af7f 	beq.w	8002df8 <HAL_RCC_OscConfig+0xdd8>
 8002efa:	e0dd      	b.n	80030b8 <HAL_RCC_OscConfig+0x1098>
 8002efc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f00:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002f04:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f0e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	fa93 f2a3 	rbit	r2, r3
 8002f18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f1c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002f20:	601a      	str	r2, [r3, #0]
  return result;
 8002f22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f26:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002f2a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f2c:	fab3 f383 	clz	r3, r3
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f36:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	2300      	movs	r3, #0
 8002f40:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f42:	f7fd fcef 	bl	8000924 <HAL_GetTick>
 8002f46:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f4a:	e009      	b.n	8002f60 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f4c:	f7fd fcea 	bl	8000924 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e0ac      	b.n	80030ba <HAL_RCC_OscConfig+0x109a>
 8002f60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f64:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002f68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f72:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	fa93 f2a3 	rbit	r2, r3
 8002f7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f80:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002f84:	601a      	str	r2, [r3, #0]
  return result;
 8002f86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f8a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002f8e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f90:	fab3 f383 	clz	r3, r3
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	095b      	lsrs	r3, r3, #5
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	f043 0301 	orr.w	r3, r3, #1
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d102      	bne.n	8002faa <HAL_RCC_OscConfig+0xf8a>
 8002fa4:	4b47      	ldr	r3, [pc, #284]	@ (80030c4 <HAL_RCC_OscConfig+0x10a4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	e027      	b.n	8002ffa <HAL_RCC_OscConfig+0xfda>
 8002faa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fae:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002fb2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fbc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	fa93 f2a3 	rbit	r2, r3
 8002fc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fca:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fd4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002fd8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fe2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	fa93 f2a3 	rbit	r2, r3
 8002fec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ff0:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	4b33      	ldr	r3, [pc, #204]	@ (80030c4 <HAL_RCC_OscConfig+0x10a4>)
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ffe:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003002:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003006:	6011      	str	r1, [r2, #0]
 8003008:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800300c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	fa92 f1a2 	rbit	r1, r2
 8003016:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800301a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800301e:	6011      	str	r1, [r2, #0]
  return result;
 8003020:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003024:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	fab2 f282 	clz	r2, r2
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	f042 0220 	orr.w	r2, r2, #32
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	f002 021f 	and.w	r2, r2, #31
 800303a:	2101      	movs	r1, #1
 800303c:	fa01 f202 	lsl.w	r2, r1, r2
 8003040:	4013      	ands	r3, r2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d182      	bne.n	8002f4c <HAL_RCC_OscConfig+0xf2c>
 8003046:	e037      	b.n	80030b8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003048:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800304c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e02e      	b.n	80030ba <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800305c:	4b19      	ldr	r3, [pc, #100]	@ (80030c4 <HAL_RCC_OscConfig+0x10a4>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003064:	4b17      	ldr	r3, [pc, #92]	@ (80030c4 <HAL_RCC_OscConfig+0x10a4>)
 8003066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003068:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800306c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003070:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003074:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003078:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	429a      	cmp	r2, r3
 8003082:	d117      	bne.n	80030b4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003084:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003088:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800308c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003090:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003098:	429a      	cmp	r2, r3
 800309a:	d10b      	bne.n	80030b4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800309c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030a0:	f003 020f 	and.w	r2, r3, #15
 80030a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d001      	beq.n	80030b8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e000      	b.n	80030ba <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40021000 	.word	0x40021000

080030c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b09e      	sub	sp, #120	@ 0x78
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e162      	b.n	80033a6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030e0:	4b90      	ldr	r3, [pc, #576]	@ (8003324 <HAL_RCC_ClockConfig+0x25c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d910      	bls.n	8003110 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ee:	4b8d      	ldr	r3, [pc, #564]	@ (8003324 <HAL_RCC_ClockConfig+0x25c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f023 0207 	bic.w	r2, r3, #7
 80030f6:	498b      	ldr	r1, [pc, #556]	@ (8003324 <HAL_RCC_ClockConfig+0x25c>)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fe:	4b89      	ldr	r3, [pc, #548]	@ (8003324 <HAL_RCC_ClockConfig+0x25c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	429a      	cmp	r2, r3
 800310a:	d001      	beq.n	8003110 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e14a      	b.n	80033a6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800311c:	4b82      	ldr	r3, [pc, #520]	@ (8003328 <HAL_RCC_ClockConfig+0x260>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	497f      	ldr	r1, [pc, #508]	@ (8003328 <HAL_RCC_ClockConfig+0x260>)
 800312a:	4313      	orrs	r3, r2
 800312c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 80dc 	beq.w	80032f4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d13c      	bne.n	80031be <HAL_RCC_ClockConfig+0xf6>
 8003144:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003148:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800314c:	fa93 f3a3 	rbit	r3, r3
 8003150:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003152:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003154:	fab3 f383 	clz	r3, r3
 8003158:	b2db      	uxtb	r3, r3
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	b2db      	uxtb	r3, r3
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b01      	cmp	r3, #1
 8003166:	d102      	bne.n	800316e <HAL_RCC_ClockConfig+0xa6>
 8003168:	4b6f      	ldr	r3, [pc, #444]	@ (8003328 <HAL_RCC_ClockConfig+0x260>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	e00f      	b.n	800318e <HAL_RCC_ClockConfig+0xc6>
 800316e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003172:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003174:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003176:	fa93 f3a3 	rbit	r3, r3
 800317a:	667b      	str	r3, [r7, #100]	@ 0x64
 800317c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003180:	663b      	str	r3, [r7, #96]	@ 0x60
 8003182:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003184:	fa93 f3a3 	rbit	r3, r3
 8003188:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800318a:	4b67      	ldr	r3, [pc, #412]	@ (8003328 <HAL_RCC_ClockConfig+0x260>)
 800318c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003192:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003194:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003196:	fa92 f2a2 	rbit	r2, r2
 800319a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800319c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800319e:	fab2 f282 	clz	r2, r2
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	f042 0220 	orr.w	r2, r2, #32
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	f002 021f 	and.w	r2, r2, #31
 80031ae:	2101      	movs	r1, #1
 80031b0:	fa01 f202 	lsl.w	r2, r1, r2
 80031b4:	4013      	ands	r3, r2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d17b      	bne.n	80032b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e0f3      	b.n	80033a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d13c      	bne.n	8003240 <HAL_RCC_ClockConfig+0x178>
 80031c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031ca:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031ce:	fa93 f3a3 	rbit	r3, r3
 80031d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80031d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d6:	fab3 f383 	clz	r3, r3
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	095b      	lsrs	r3, r3, #5
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d102      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x128>
 80031ea:	4b4f      	ldr	r3, [pc, #316]	@ (8003328 <HAL_RCC_ClockConfig+0x260>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	e00f      	b.n	8003210 <HAL_RCC_ClockConfig+0x148>
 80031f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031f8:	fa93 f3a3 	rbit	r3, r3
 80031fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80031fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003202:	643b      	str	r3, [r7, #64]	@ 0x40
 8003204:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003206:	fa93 f3a3 	rbit	r3, r3
 800320a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800320c:	4b46      	ldr	r3, [pc, #280]	@ (8003328 <HAL_RCC_ClockConfig+0x260>)
 800320e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003210:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003214:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003216:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003218:	fa92 f2a2 	rbit	r2, r2
 800321c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800321e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003220:	fab2 f282 	clz	r2, r2
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	f042 0220 	orr.w	r2, r2, #32
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	f002 021f 	and.w	r2, r2, #31
 8003230:	2101      	movs	r1, #1
 8003232:	fa01 f202 	lsl.w	r2, r1, r2
 8003236:	4013      	ands	r3, r2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d13a      	bne.n	80032b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e0b2      	b.n	80033a6 <HAL_RCC_ClockConfig+0x2de>
 8003240:	2302      	movs	r3, #2
 8003242:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003246:	fa93 f3a3 	rbit	r3, r3
 800324a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800324c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324e:	fab3 f383 	clz	r3, r3
 8003252:	b2db      	uxtb	r3, r3
 8003254:	095b      	lsrs	r3, r3, #5
 8003256:	b2db      	uxtb	r3, r3
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b01      	cmp	r3, #1
 8003260:	d102      	bne.n	8003268 <HAL_RCC_ClockConfig+0x1a0>
 8003262:	4b31      	ldr	r3, [pc, #196]	@ (8003328 <HAL_RCC_ClockConfig+0x260>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	e00d      	b.n	8003284 <HAL_RCC_ClockConfig+0x1bc>
 8003268:	2302      	movs	r3, #2
 800326a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800326e:	fa93 f3a3 	rbit	r3, r3
 8003272:	627b      	str	r3, [r7, #36]	@ 0x24
 8003274:	2302      	movs	r3, #2
 8003276:	623b      	str	r3, [r7, #32]
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	61fb      	str	r3, [r7, #28]
 8003280:	4b29      	ldr	r3, [pc, #164]	@ (8003328 <HAL_RCC_ClockConfig+0x260>)
 8003282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003284:	2202      	movs	r2, #2
 8003286:	61ba      	str	r2, [r7, #24]
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	fa92 f2a2 	rbit	r2, r2
 800328e:	617a      	str	r2, [r7, #20]
  return result;
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	fab2 f282 	clz	r2, r2
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	f042 0220 	orr.w	r2, r2, #32
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	f002 021f 	and.w	r2, r2, #31
 80032a2:	2101      	movs	r1, #1
 80032a4:	fa01 f202 	lsl.w	r2, r1, r2
 80032a8:	4013      	ands	r3, r2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e079      	b.n	80033a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003328 <HAL_RCC_ClockConfig+0x260>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f023 0203 	bic.w	r2, r3, #3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	491a      	ldr	r1, [pc, #104]	@ (8003328 <HAL_RCC_ClockConfig+0x260>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032c4:	f7fd fb2e 	bl	8000924 <HAL_GetTick>
 80032c8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ca:	e00a      	b.n	80032e2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032cc:	f7fd fb2a 	bl	8000924 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032da:	4293      	cmp	r3, r2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e061      	b.n	80033a6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e2:	4b11      	ldr	r3, [pc, #68]	@ (8003328 <HAL_RCC_ClockConfig+0x260>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f003 020c 	and.w	r2, r3, #12
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d1eb      	bne.n	80032cc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003324 <HAL_RCC_ClockConfig+0x25c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d214      	bcs.n	800332c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003302:	4b08      	ldr	r3, [pc, #32]	@ (8003324 <HAL_RCC_ClockConfig+0x25c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f023 0207 	bic.w	r2, r3, #7
 800330a:	4906      	ldr	r1, [pc, #24]	@ (8003324 <HAL_RCC_ClockConfig+0x25c>)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	4313      	orrs	r3, r2
 8003310:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003312:	4b04      	ldr	r3, [pc, #16]	@ (8003324 <HAL_RCC_ClockConfig+0x25c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d005      	beq.n	800332c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e040      	b.n	80033a6 <HAL_RCC_ClockConfig+0x2de>
 8003324:	40022000 	.word	0x40022000
 8003328:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b00      	cmp	r3, #0
 8003336:	d008      	beq.n	800334a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003338:	4b1d      	ldr	r3, [pc, #116]	@ (80033b0 <HAL_RCC_ClockConfig+0x2e8>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	491a      	ldr	r1, [pc, #104]	@ (80033b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003346:	4313      	orrs	r3, r2
 8003348:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	d009      	beq.n	800336a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003356:	4b16      	ldr	r3, [pc, #88]	@ (80033b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	4912      	ldr	r1, [pc, #72]	@ (80033b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003366:	4313      	orrs	r3, r2
 8003368:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800336a:	f000 f829 	bl	80033c0 <HAL_RCC_GetSysClockFreq>
 800336e:	4601      	mov	r1, r0
 8003370:	4b0f      	ldr	r3, [pc, #60]	@ (80033b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003378:	22f0      	movs	r2, #240	@ 0xf0
 800337a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	fa92 f2a2 	rbit	r2, r2
 8003382:	60fa      	str	r2, [r7, #12]
  return result;
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	fab2 f282 	clz	r2, r2
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	40d3      	lsrs	r3, r2
 800338e:	4a09      	ldr	r2, [pc, #36]	@ (80033b4 <HAL_RCC_ClockConfig+0x2ec>)
 8003390:	5cd3      	ldrb	r3, [r2, r3]
 8003392:	fa21 f303 	lsr.w	r3, r1, r3
 8003396:	4a08      	ldr	r2, [pc, #32]	@ (80033b8 <HAL_RCC_ClockConfig+0x2f0>)
 8003398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800339a:	4b08      	ldr	r3, [pc, #32]	@ (80033bc <HAL_RCC_ClockConfig+0x2f4>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fd fa7c 	bl	800089c <HAL_InitTick>
  
  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3778      	adds	r7, #120	@ 0x78
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40021000 	.word	0x40021000
 80033b4:	08004c60 	.word	0x08004c60
 80033b8:	20000000 	.word	0x20000000
 80033bc:	20000004 	.word	0x20000004

080033c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	2300      	movs	r3, #0
 80033cc:	60bb      	str	r3, [r7, #8]
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	2300      	movs	r3, #0
 80033d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80033da:	4b1f      	ldr	r3, [pc, #124]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x98>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f003 030c 	and.w	r3, r3, #12
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d002      	beq.n	80033f0 <HAL_RCC_GetSysClockFreq+0x30>
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d003      	beq.n	80033f6 <HAL_RCC_GetSysClockFreq+0x36>
 80033ee:	e029      	b.n	8003444 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033f0:	4b1a      	ldr	r3, [pc, #104]	@ (800345c <HAL_RCC_GetSysClockFreq+0x9c>)
 80033f2:	613b      	str	r3, [r7, #16]
      break;
 80033f4:	e029      	b.n	800344a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	0c9b      	lsrs	r3, r3, #18
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	4a18      	ldr	r2, [pc, #96]	@ (8003460 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003400:	5cd3      	ldrb	r3, [r2, r3]
 8003402:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003404:	4b14      	ldr	r3, [pc, #80]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x98>)
 8003406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003408:	f003 030f 	and.w	r3, r3, #15
 800340c:	4a15      	ldr	r2, [pc, #84]	@ (8003464 <HAL_RCC_GetSysClockFreq+0xa4>)
 800340e:	5cd3      	ldrb	r3, [r2, r3]
 8003410:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d008      	beq.n	800342e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800341c:	4a0f      	ldr	r2, [pc, #60]	@ (800345c <HAL_RCC_GetSysClockFreq+0x9c>)
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	fbb2 f2f3 	udiv	r2, r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	fb02 f303 	mul.w	r3, r2, r3
 800342a:	617b      	str	r3, [r7, #20]
 800342c:	e007      	b.n	800343e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800342e:	4a0b      	ldr	r2, [pc, #44]	@ (800345c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	fbb2 f2f3 	udiv	r2, r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	fb02 f303 	mul.w	r3, r2, r3
 800343c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	613b      	str	r3, [r7, #16]
      break;
 8003442:	e002      	b.n	800344a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003444:	4b05      	ldr	r3, [pc, #20]	@ (800345c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003446:	613b      	str	r3, [r7, #16]
      break;
 8003448:	bf00      	nop
    }
  }
  return sysclockfreq;
 800344a:	693b      	ldr	r3, [r7, #16]
}
 800344c:	4618      	mov	r0, r3
 800344e:	371c      	adds	r7, #28
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	40021000 	.word	0x40021000
 800345c:	007a1200 	.word	0x007a1200
 8003460:	08004c78 	.word	0x08004c78
 8003464:	08004c88 	.word	0x08004c88

08003468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800346c:	4b03      	ldr	r3, [pc, #12]	@ (800347c <HAL_RCC_GetHCLKFreq+0x14>)
 800346e:	681b      	ldr	r3, [r3, #0]
}
 8003470:	4618      	mov	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	20000000 	.word	0x20000000

08003480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003486:	f7ff ffef 	bl	8003468 <HAL_RCC_GetHCLKFreq>
 800348a:	4601      	mov	r1, r0
 800348c:	4b0b      	ldr	r3, [pc, #44]	@ (80034bc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003494:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003498:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	fa92 f2a2 	rbit	r2, r2
 80034a0:	603a      	str	r2, [r7, #0]
  return result;
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	fab2 f282 	clz	r2, r2
 80034a8:	b2d2      	uxtb	r2, r2
 80034aa:	40d3      	lsrs	r3, r2
 80034ac:	4a04      	ldr	r2, [pc, #16]	@ (80034c0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80034ae:	5cd3      	ldrb	r3, [r2, r3]
 80034b0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80034b4:	4618      	mov	r0, r3
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40021000 	.word	0x40021000
 80034c0:	08004c70 	.word	0x08004c70

080034c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80034ca:	f7ff ffcd 	bl	8003468 <HAL_RCC_GetHCLKFreq>
 80034ce:	4601      	mov	r1, r0
 80034d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003500 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80034d8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80034dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	fa92 f2a2 	rbit	r2, r2
 80034e4:	603a      	str	r2, [r7, #0]
  return result;
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	fab2 f282 	clz	r2, r2
 80034ec:	b2d2      	uxtb	r2, r2
 80034ee:	40d3      	lsrs	r3, r2
 80034f0:	4a04      	ldr	r2, [pc, #16]	@ (8003504 <HAL_RCC_GetPCLK2Freq+0x40>)
 80034f2:	5cd3      	ldrb	r3, [r2, r3]
 80034f4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80034f8:	4618      	mov	r0, r3
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40021000 	.word	0x40021000
 8003504:	08004c70 	.word	0x08004c70

08003508 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b092      	sub	sp, #72	@ 0x48
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003518:	2300      	movs	r3, #0
 800351a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 80d4 	beq.w	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800352c:	4b4e      	ldr	r3, [pc, #312]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10e      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003538:	4b4b      	ldr	r3, [pc, #300]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	4a4a      	ldr	r2, [pc, #296]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800353e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003542:	61d3      	str	r3, [r2, #28]
 8003544:	4b48      	ldr	r3, [pc, #288]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800354c:	60bb      	str	r3, [r7, #8]
 800354e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003550:	2301      	movs	r3, #1
 8003552:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003556:	4b45      	ldr	r3, [pc, #276]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800355e:	2b00      	cmp	r3, #0
 8003560:	d118      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003562:	4b42      	ldr	r3, [pc, #264]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a41      	ldr	r2, [pc, #260]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003568:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800356c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800356e:	f7fd f9d9 	bl	8000924 <HAL_GetTick>
 8003572:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003574:	e008      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003576:	f7fd f9d5 	bl	8000924 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b64      	cmp	r3, #100	@ 0x64
 8003582:	d901      	bls.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e1d6      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003588:	4b38      	ldr	r3, [pc, #224]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0f0      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003594:	4b34      	ldr	r3, [pc, #208]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800359c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800359e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 8084 	beq.w	80036ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d07c      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035b4:	4b2c      	ldr	r3, [pc, #176]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035c2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c6:	fa93 f3a3 	rbit	r3, r3
 80035ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80035cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035ce:	fab3 f383 	clz	r3, r3
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	461a      	mov	r2, r3
 80035d6:	4b26      	ldr	r3, [pc, #152]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	461a      	mov	r2, r3
 80035de:	2301      	movs	r3, #1
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ea:	fa93 f3a3 	rbit	r3, r3
 80035ee:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80035f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035f2:	fab3 f383 	clz	r3, r3
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	461a      	mov	r2, r3
 80035fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	461a      	mov	r2, r3
 8003602:	2300      	movs	r3, #0
 8003604:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003606:	4a18      	ldr	r2, [pc, #96]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800360a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800360c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d04b      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003616:	f7fd f985 	bl	8000924 <HAL_GetTick>
 800361a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800361c:	e00a      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800361e:	f7fd f981 	bl	8000924 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	f241 3288 	movw	r2, #5000	@ 0x1388
 800362c:	4293      	cmp	r3, r2
 800362e:	d901      	bls.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e180      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003634:	2302      	movs	r3, #2
 8003636:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800363a:	fa93 f3a3 	rbit	r3, r3
 800363e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003640:	2302      	movs	r3, #2
 8003642:	623b      	str	r3, [r7, #32]
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	fa93 f3a3 	rbit	r3, r3
 800364a:	61fb      	str	r3, [r7, #28]
  return result;
 800364c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800364e:	fab3 f383 	clz	r3, r3
 8003652:	b2db      	uxtb	r3, r3
 8003654:	095b      	lsrs	r3, r3, #5
 8003656:	b2db      	uxtb	r3, r3
 8003658:	f043 0302 	orr.w	r3, r3, #2
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d108      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003662:	4b01      	ldr	r3, [pc, #4]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	e00d      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003668:	40021000 	.word	0x40021000
 800366c:	40007000 	.word	0x40007000
 8003670:	10908100 	.word	0x10908100
 8003674:	2302      	movs	r3, #2
 8003676:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	fa93 f3a3 	rbit	r3, r3
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	4b9a      	ldr	r3, [pc, #616]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003684:	2202      	movs	r2, #2
 8003686:	613a      	str	r2, [r7, #16]
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	fa92 f2a2 	rbit	r2, r2
 800368e:	60fa      	str	r2, [r7, #12]
  return result;
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	fab2 f282 	clz	r2, r2
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800369c:	b2d2      	uxtb	r2, r2
 800369e:	f002 021f 	and.w	r2, r2, #31
 80036a2:	2101      	movs	r1, #1
 80036a4:	fa01 f202 	lsl.w	r2, r1, r2
 80036a8:	4013      	ands	r3, r2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0b7      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80036ae:	4b8f      	ldr	r3, [pc, #572]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	498c      	ldr	r1, [pc, #560]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036c0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d105      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c8:	4b88      	ldr	r3, [pc, #544]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	4a87      	ldr	r2, [pc, #540]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d008      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036e0:	4b82      	ldr	r3, [pc, #520]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e4:	f023 0203 	bic.w	r2, r3, #3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	497f      	ldr	r1, [pc, #508]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d008      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036fe:	4b7b      	ldr	r3, [pc, #492]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003702:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	4978      	ldr	r1, [pc, #480]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800370c:	4313      	orrs	r3, r2
 800370e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	d008      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800371c:	4b73      	ldr	r3, [pc, #460]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800371e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003720:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	4970      	ldr	r1, [pc, #448]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800372a:	4313      	orrs	r3, r2
 800372c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0320 	and.w	r3, r3, #32
 8003736:	2b00      	cmp	r3, #0
 8003738:	d008      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800373a:	4b6c      	ldr	r3, [pc, #432]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800373c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373e:	f023 0210 	bic.w	r2, r3, #16
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	4969      	ldr	r1, [pc, #420]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003748:	4313      	orrs	r3, r2
 800374a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003758:	4b64      	ldr	r3, [pc, #400]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003764:	4961      	ldr	r1, [pc, #388]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003766:	4313      	orrs	r3, r2
 8003768:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003772:	2b00      	cmp	r3, #0
 8003774:	d008      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003776:	4b5d      	ldr	r3, [pc, #372]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377a:	f023 0220 	bic.w	r2, r3, #32
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	495a      	ldr	r1, [pc, #360]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003784:	4313      	orrs	r3, r2
 8003786:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d008      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003794:	4b55      	ldr	r3, [pc, #340]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003798:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a0:	4952      	ldr	r1, [pc, #328]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d008      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037b2:	4b4e      	ldr	r3, [pc, #312]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	494b      	ldr	r1, [pc, #300]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0310 	and.w	r3, r3, #16
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037d0:	4b46      	ldr	r3, [pc, #280]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	4943      	ldr	r1, [pc, #268]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d008      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80037ee:	4b3f      	ldr	r3, [pc, #252]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fa:	493c      	ldr	r1, [pc, #240]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800380c:	4b37      	ldr	r3, [pc, #220]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800380e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003810:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003818:	4934      	ldr	r1, [pc, #208]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800381a:	4313      	orrs	r3, r2
 800381c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003826:	2b00      	cmp	r3, #0
 8003828:	d008      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800382a:	4b30      	ldr	r3, [pc, #192]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800382c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382e:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003836:	492d      	ldr	r1, [pc, #180]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003838:	4313      	orrs	r3, r2
 800383a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d008      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003848:	4b28      	ldr	r3, [pc, #160]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800384a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003854:	4925      	ldr	r1, [pc, #148]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003856:	4313      	orrs	r3, r2
 8003858:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d008      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003866:	4b21      	ldr	r3, [pc, #132]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003872:	491e      	ldr	r1, [pc, #120]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003874:	4313      	orrs	r3, r2
 8003876:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d008      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003884:	4b19      	ldr	r3, [pc, #100]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003888:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003890:	4916      	ldr	r1, [pc, #88]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003892:	4313      	orrs	r3, r2
 8003894:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d008      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80038a2:	4b12      	ldr	r3, [pc, #72]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ae:	490f      	ldr	r1, [pc, #60]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80038c0:	4b0a      	ldr	r3, [pc, #40]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038cc:	4907      	ldr	r1, [pc, #28]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00c      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80038de:	4b03      	ldr	r3, [pc, #12]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	e002      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80038ea:	bf00      	nop
 80038ec:	40021000 	.word	0x40021000
 80038f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038f2:	4913      	ldr	r1, [pc, #76]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d008      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003904:	4b0e      	ldr	r3, [pc, #56]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003908:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003910:	490b      	ldr	r1, [pc, #44]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003912:	4313      	orrs	r3, r2
 8003914:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d008      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003922:	4b07      	ldr	r3, [pc, #28]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003926:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800392e:	4904      	ldr	r1, [pc, #16]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003930:	4313      	orrs	r3, r2
 8003932:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3748      	adds	r7, #72	@ 0x48
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	40021000 	.word	0x40021000

08003944 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e040      	b.n	80039d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800395a:	2b00      	cmp	r3, #0
 800395c:	d106      	bne.n	800396c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7fc fe9e 	bl	80006a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2224      	movs	r2, #36	@ 0x24
 8003970:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0201 	bic.w	r2, r2, #1
 8003980:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003986:	2b00      	cmp	r3, #0
 8003988:	d002      	beq.n	8003990 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 fa86 	bl	8003e9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f8af 	bl	8003af4 <UART_SetConfig>
 8003996:	4603      	mov	r3, r0
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e01b      	b.n	80039d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0201 	orr.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 fb05 	bl	8003fe0 <UART_CheckIdleState>
 80039d6:	4603      	mov	r3, r0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08a      	sub	sp, #40	@ 0x28
 80039e4:	af02      	add	r7, sp, #8
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	603b      	str	r3, [r7, #0]
 80039ec:	4613      	mov	r3, r2
 80039ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039f4:	2b20      	cmp	r3, #32
 80039f6:	d177      	bne.n	8003ae8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d002      	beq.n	8003a04 <HAL_UART_Transmit+0x24>
 80039fe:	88fb      	ldrh	r3, [r7, #6]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e070      	b.n	8003aea <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2221      	movs	r2, #33	@ 0x21
 8003a14:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a16:	f7fc ff85 	bl	8000924 <HAL_GetTick>
 8003a1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	88fa      	ldrh	r2, [r7, #6]
 8003a20:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	88fa      	ldrh	r2, [r7, #6]
 8003a28:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a34:	d108      	bne.n	8003a48 <HAL_UART_Transmit+0x68>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d104      	bne.n	8003a48 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	e003      	b.n	8003a50 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a50:	e02f      	b.n	8003ab2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	2180      	movs	r1, #128	@ 0x80
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 fb67 	bl	8004130 <UART_WaitOnFlagUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d004      	beq.n	8003a72 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e03b      	b.n	8003aea <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10b      	bne.n	8003a90 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	881a      	ldrh	r2, [r3, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a84:	b292      	uxth	r2, r2
 8003a86:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	3302      	adds	r3, #2
 8003a8c:	61bb      	str	r3, [r7, #24]
 8003a8e:	e007      	b.n	8003aa0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	781a      	ldrb	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1c9      	bne.n	8003a52 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	2140      	movs	r1, #64	@ 0x40
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 fb31 	bl	8004130 <UART_WaitOnFlagUntilTimeout>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d004      	beq.n	8003ade <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e005      	b.n	8003aea <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	e000      	b.n	8003aea <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003ae8:	2302      	movs	r3, #2
  }
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3720      	adds	r7, #32
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b088      	sub	sp, #32
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003afc:	2300      	movs	r3, #0
 8003afe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	4b92      	ldr	r3, [pc, #584]	@ (8003d68 <UART_SetConfig+0x274>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6812      	ldr	r2, [r2, #0]
 8003b26:	6979      	ldr	r1, [r7, #20]
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a80      	ldr	r2, [pc, #512]	@ (8003d6c <UART_SetConfig+0x278>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d120      	bne.n	8003bb2 <UART_SetConfig+0xbe>
 8003b70:	4b7f      	ldr	r3, [pc, #508]	@ (8003d70 <UART_SetConfig+0x27c>)
 8003b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b74:	f003 0303 	and.w	r3, r3, #3
 8003b78:	2b03      	cmp	r3, #3
 8003b7a:	d817      	bhi.n	8003bac <UART_SetConfig+0xb8>
 8003b7c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b84 <UART_SetConfig+0x90>)
 8003b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b82:	bf00      	nop
 8003b84:	08003b95 	.word	0x08003b95
 8003b88:	08003ba1 	.word	0x08003ba1
 8003b8c:	08003ba7 	.word	0x08003ba7
 8003b90:	08003b9b 	.word	0x08003b9b
 8003b94:	2301      	movs	r3, #1
 8003b96:	77fb      	strb	r3, [r7, #31]
 8003b98:	e0b5      	b.n	8003d06 <UART_SetConfig+0x212>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	77fb      	strb	r3, [r7, #31]
 8003b9e:	e0b2      	b.n	8003d06 <UART_SetConfig+0x212>
 8003ba0:	2304      	movs	r3, #4
 8003ba2:	77fb      	strb	r3, [r7, #31]
 8003ba4:	e0af      	b.n	8003d06 <UART_SetConfig+0x212>
 8003ba6:	2308      	movs	r3, #8
 8003ba8:	77fb      	strb	r3, [r7, #31]
 8003baa:	e0ac      	b.n	8003d06 <UART_SetConfig+0x212>
 8003bac:	2310      	movs	r3, #16
 8003bae:	77fb      	strb	r3, [r7, #31]
 8003bb0:	e0a9      	b.n	8003d06 <UART_SetConfig+0x212>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a6f      	ldr	r2, [pc, #444]	@ (8003d74 <UART_SetConfig+0x280>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d124      	bne.n	8003c06 <UART_SetConfig+0x112>
 8003bbc:	4b6c      	ldr	r3, [pc, #432]	@ (8003d70 <UART_SetConfig+0x27c>)
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003bc4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003bc8:	d011      	beq.n	8003bee <UART_SetConfig+0xfa>
 8003bca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003bce:	d817      	bhi.n	8003c00 <UART_SetConfig+0x10c>
 8003bd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bd4:	d011      	beq.n	8003bfa <UART_SetConfig+0x106>
 8003bd6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bda:	d811      	bhi.n	8003c00 <UART_SetConfig+0x10c>
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <UART_SetConfig+0xf4>
 8003be0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003be4:	d006      	beq.n	8003bf4 <UART_SetConfig+0x100>
 8003be6:	e00b      	b.n	8003c00 <UART_SetConfig+0x10c>
 8003be8:	2300      	movs	r3, #0
 8003bea:	77fb      	strb	r3, [r7, #31]
 8003bec:	e08b      	b.n	8003d06 <UART_SetConfig+0x212>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	77fb      	strb	r3, [r7, #31]
 8003bf2:	e088      	b.n	8003d06 <UART_SetConfig+0x212>
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	77fb      	strb	r3, [r7, #31]
 8003bf8:	e085      	b.n	8003d06 <UART_SetConfig+0x212>
 8003bfa:	2308      	movs	r3, #8
 8003bfc:	77fb      	strb	r3, [r7, #31]
 8003bfe:	e082      	b.n	8003d06 <UART_SetConfig+0x212>
 8003c00:	2310      	movs	r3, #16
 8003c02:	77fb      	strb	r3, [r7, #31]
 8003c04:	e07f      	b.n	8003d06 <UART_SetConfig+0x212>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a5b      	ldr	r2, [pc, #364]	@ (8003d78 <UART_SetConfig+0x284>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d124      	bne.n	8003c5a <UART_SetConfig+0x166>
 8003c10:	4b57      	ldr	r3, [pc, #348]	@ (8003d70 <UART_SetConfig+0x27c>)
 8003c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c14:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003c18:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003c1c:	d011      	beq.n	8003c42 <UART_SetConfig+0x14e>
 8003c1e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003c22:	d817      	bhi.n	8003c54 <UART_SetConfig+0x160>
 8003c24:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003c28:	d011      	beq.n	8003c4e <UART_SetConfig+0x15a>
 8003c2a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003c2e:	d811      	bhi.n	8003c54 <UART_SetConfig+0x160>
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <UART_SetConfig+0x148>
 8003c34:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c38:	d006      	beq.n	8003c48 <UART_SetConfig+0x154>
 8003c3a:	e00b      	b.n	8003c54 <UART_SetConfig+0x160>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	77fb      	strb	r3, [r7, #31]
 8003c40:	e061      	b.n	8003d06 <UART_SetConfig+0x212>
 8003c42:	2302      	movs	r3, #2
 8003c44:	77fb      	strb	r3, [r7, #31]
 8003c46:	e05e      	b.n	8003d06 <UART_SetConfig+0x212>
 8003c48:	2304      	movs	r3, #4
 8003c4a:	77fb      	strb	r3, [r7, #31]
 8003c4c:	e05b      	b.n	8003d06 <UART_SetConfig+0x212>
 8003c4e:	2308      	movs	r3, #8
 8003c50:	77fb      	strb	r3, [r7, #31]
 8003c52:	e058      	b.n	8003d06 <UART_SetConfig+0x212>
 8003c54:	2310      	movs	r3, #16
 8003c56:	77fb      	strb	r3, [r7, #31]
 8003c58:	e055      	b.n	8003d06 <UART_SetConfig+0x212>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a47      	ldr	r2, [pc, #284]	@ (8003d7c <UART_SetConfig+0x288>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d124      	bne.n	8003cae <UART_SetConfig+0x1ba>
 8003c64:	4b42      	ldr	r3, [pc, #264]	@ (8003d70 <UART_SetConfig+0x27c>)
 8003c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c68:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003c6c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c70:	d011      	beq.n	8003c96 <UART_SetConfig+0x1a2>
 8003c72:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c76:	d817      	bhi.n	8003ca8 <UART_SetConfig+0x1b4>
 8003c78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c7c:	d011      	beq.n	8003ca2 <UART_SetConfig+0x1ae>
 8003c7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c82:	d811      	bhi.n	8003ca8 <UART_SetConfig+0x1b4>
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <UART_SetConfig+0x19c>
 8003c88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c8c:	d006      	beq.n	8003c9c <UART_SetConfig+0x1a8>
 8003c8e:	e00b      	b.n	8003ca8 <UART_SetConfig+0x1b4>
 8003c90:	2300      	movs	r3, #0
 8003c92:	77fb      	strb	r3, [r7, #31]
 8003c94:	e037      	b.n	8003d06 <UART_SetConfig+0x212>
 8003c96:	2302      	movs	r3, #2
 8003c98:	77fb      	strb	r3, [r7, #31]
 8003c9a:	e034      	b.n	8003d06 <UART_SetConfig+0x212>
 8003c9c:	2304      	movs	r3, #4
 8003c9e:	77fb      	strb	r3, [r7, #31]
 8003ca0:	e031      	b.n	8003d06 <UART_SetConfig+0x212>
 8003ca2:	2308      	movs	r3, #8
 8003ca4:	77fb      	strb	r3, [r7, #31]
 8003ca6:	e02e      	b.n	8003d06 <UART_SetConfig+0x212>
 8003ca8:	2310      	movs	r3, #16
 8003caa:	77fb      	strb	r3, [r7, #31]
 8003cac:	e02b      	b.n	8003d06 <UART_SetConfig+0x212>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a33      	ldr	r2, [pc, #204]	@ (8003d80 <UART_SetConfig+0x28c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d124      	bne.n	8003d02 <UART_SetConfig+0x20e>
 8003cb8:	4b2d      	ldr	r3, [pc, #180]	@ (8003d70 <UART_SetConfig+0x27c>)
 8003cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cbc:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003cc0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003cc4:	d011      	beq.n	8003cea <UART_SetConfig+0x1f6>
 8003cc6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003cca:	d817      	bhi.n	8003cfc <UART_SetConfig+0x208>
 8003ccc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003cd0:	d011      	beq.n	8003cf6 <UART_SetConfig+0x202>
 8003cd2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003cd6:	d811      	bhi.n	8003cfc <UART_SetConfig+0x208>
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <UART_SetConfig+0x1f0>
 8003cdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ce0:	d006      	beq.n	8003cf0 <UART_SetConfig+0x1fc>
 8003ce2:	e00b      	b.n	8003cfc <UART_SetConfig+0x208>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	77fb      	strb	r3, [r7, #31]
 8003ce8:	e00d      	b.n	8003d06 <UART_SetConfig+0x212>
 8003cea:	2302      	movs	r3, #2
 8003cec:	77fb      	strb	r3, [r7, #31]
 8003cee:	e00a      	b.n	8003d06 <UART_SetConfig+0x212>
 8003cf0:	2304      	movs	r3, #4
 8003cf2:	77fb      	strb	r3, [r7, #31]
 8003cf4:	e007      	b.n	8003d06 <UART_SetConfig+0x212>
 8003cf6:	2308      	movs	r3, #8
 8003cf8:	77fb      	strb	r3, [r7, #31]
 8003cfa:	e004      	b.n	8003d06 <UART_SetConfig+0x212>
 8003cfc:	2310      	movs	r3, #16
 8003cfe:	77fb      	strb	r3, [r7, #31]
 8003d00:	e001      	b.n	8003d06 <UART_SetConfig+0x212>
 8003d02:	2310      	movs	r3, #16
 8003d04:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d0e:	d16b      	bne.n	8003de8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003d10:	7ffb      	ldrb	r3, [r7, #31]
 8003d12:	2b08      	cmp	r3, #8
 8003d14:	d838      	bhi.n	8003d88 <UART_SetConfig+0x294>
 8003d16:	a201      	add	r2, pc, #4	@ (adr r2, 8003d1c <UART_SetConfig+0x228>)
 8003d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1c:	08003d41 	.word	0x08003d41
 8003d20:	08003d49 	.word	0x08003d49
 8003d24:	08003d51 	.word	0x08003d51
 8003d28:	08003d89 	.word	0x08003d89
 8003d2c:	08003d57 	.word	0x08003d57
 8003d30:	08003d89 	.word	0x08003d89
 8003d34:	08003d89 	.word	0x08003d89
 8003d38:	08003d89 	.word	0x08003d89
 8003d3c:	08003d5f 	.word	0x08003d5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d40:	f7ff fb9e 	bl	8003480 <HAL_RCC_GetPCLK1Freq>
 8003d44:	61b8      	str	r0, [r7, #24]
        break;
 8003d46:	e024      	b.n	8003d92 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d48:	f7ff fbbc 	bl	80034c4 <HAL_RCC_GetPCLK2Freq>
 8003d4c:	61b8      	str	r0, [r7, #24]
        break;
 8003d4e:	e020      	b.n	8003d92 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d50:	4b0c      	ldr	r3, [pc, #48]	@ (8003d84 <UART_SetConfig+0x290>)
 8003d52:	61bb      	str	r3, [r7, #24]
        break;
 8003d54:	e01d      	b.n	8003d92 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d56:	f7ff fb33 	bl	80033c0 <HAL_RCC_GetSysClockFreq>
 8003d5a:	61b8      	str	r0, [r7, #24]
        break;
 8003d5c:	e019      	b.n	8003d92 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d62:	61bb      	str	r3, [r7, #24]
        break;
 8003d64:	e015      	b.n	8003d92 <UART_SetConfig+0x29e>
 8003d66:	bf00      	nop
 8003d68:	efff69f3 	.word	0xefff69f3
 8003d6c:	40013800 	.word	0x40013800
 8003d70:	40021000 	.word	0x40021000
 8003d74:	40004400 	.word	0x40004400
 8003d78:	40004800 	.word	0x40004800
 8003d7c:	40004c00 	.word	0x40004c00
 8003d80:	40005000 	.word	0x40005000
 8003d84:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	77bb      	strb	r3, [r7, #30]
        break;
 8003d90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d073      	beq.n	8003e80 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	005a      	lsls	r2, r3, #1
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	085b      	lsrs	r3, r3, #1
 8003da2:	441a      	add	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	2b0f      	cmp	r3, #15
 8003db2:	d916      	bls.n	8003de2 <UART_SetConfig+0x2ee>
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dba:	d212      	bcs.n	8003de2 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	f023 030f 	bic.w	r3, r3, #15
 8003dc4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	085b      	lsrs	r3, r3, #1
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	89fb      	ldrh	r3, [r7, #14]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	89fa      	ldrh	r2, [r7, #14]
 8003dde:	60da      	str	r2, [r3, #12]
 8003de0:	e04e      	b.n	8003e80 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	77bb      	strb	r3, [r7, #30]
 8003de6:	e04b      	b.n	8003e80 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003de8:	7ffb      	ldrb	r3, [r7, #31]
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d827      	bhi.n	8003e3e <UART_SetConfig+0x34a>
 8003dee:	a201      	add	r2, pc, #4	@ (adr r2, 8003df4 <UART_SetConfig+0x300>)
 8003df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df4:	08003e19 	.word	0x08003e19
 8003df8:	08003e21 	.word	0x08003e21
 8003dfc:	08003e29 	.word	0x08003e29
 8003e00:	08003e3f 	.word	0x08003e3f
 8003e04:	08003e2f 	.word	0x08003e2f
 8003e08:	08003e3f 	.word	0x08003e3f
 8003e0c:	08003e3f 	.word	0x08003e3f
 8003e10:	08003e3f 	.word	0x08003e3f
 8003e14:	08003e37 	.word	0x08003e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e18:	f7ff fb32 	bl	8003480 <HAL_RCC_GetPCLK1Freq>
 8003e1c:	61b8      	str	r0, [r7, #24]
        break;
 8003e1e:	e013      	b.n	8003e48 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e20:	f7ff fb50 	bl	80034c4 <HAL_RCC_GetPCLK2Freq>
 8003e24:	61b8      	str	r0, [r7, #24]
        break;
 8003e26:	e00f      	b.n	8003e48 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e28:	4b1b      	ldr	r3, [pc, #108]	@ (8003e98 <UART_SetConfig+0x3a4>)
 8003e2a:	61bb      	str	r3, [r7, #24]
        break;
 8003e2c:	e00c      	b.n	8003e48 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e2e:	f7ff fac7 	bl	80033c0 <HAL_RCC_GetSysClockFreq>
 8003e32:	61b8      	str	r0, [r7, #24]
        break;
 8003e34:	e008      	b.n	8003e48 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e3a:	61bb      	str	r3, [r7, #24]
        break;
 8003e3c:	e004      	b.n	8003e48 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	77bb      	strb	r3, [r7, #30]
        break;
 8003e46:	bf00      	nop
    }

    if (pclk != 0U)
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d018      	beq.n	8003e80 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	085a      	lsrs	r2, r3, #1
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	441a      	add	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e60:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	2b0f      	cmp	r3, #15
 8003e66:	d909      	bls.n	8003e7c <UART_SetConfig+0x388>
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e6e:	d205      	bcs.n	8003e7c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	60da      	str	r2, [r3, #12]
 8003e7a:	e001      	b.n	8003e80 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003e8c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3720      	adds	r7, #32
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	007a1200 	.word	0x007a1200

08003e9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f30:	f003 0310 	and.w	r3, r3, #16
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d01a      	beq.n	8003fb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f9a:	d10a      	bne.n	8003fb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00a      	beq.n	8003fd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	605a      	str	r2, [r3, #4]
  }
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b098      	sub	sp, #96	@ 0x60
 8003fe4:	af02      	add	r7, sp, #8
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ff0:	f7fc fc98 	bl	8000924 <HAL_GetTick>
 8003ff4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b08      	cmp	r3, #8
 8004002:	d12e      	bne.n	8004062 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004004:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800400c:	2200      	movs	r2, #0
 800400e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f88c 	bl	8004130 <UART_WaitOnFlagUntilTimeout>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d021      	beq.n	8004062 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004026:	e853 3f00 	ldrex	r3, [r3]
 800402a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800402c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800402e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004032:	653b      	str	r3, [r7, #80]	@ 0x50
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	461a      	mov	r2, r3
 800403a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800403c:	647b      	str	r3, [r7, #68]	@ 0x44
 800403e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004040:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004042:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004044:	e841 2300 	strex	r3, r2, [r1]
 8004048:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800404a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1e6      	bne.n	800401e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2220      	movs	r2, #32
 8004054:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e062      	b.n	8004128 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b04      	cmp	r3, #4
 800406e:	d149      	bne.n	8004104 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004070:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004078:	2200      	movs	r2, #0
 800407a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f856 	bl	8004130 <UART_WaitOnFlagUntilTimeout>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d03c      	beq.n	8004104 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004092:	e853 3f00 	ldrex	r3, [r3]
 8004096:	623b      	str	r3, [r7, #32]
   return(result);
 8004098:	6a3b      	ldr	r3, [r7, #32]
 800409a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800409e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	461a      	mov	r2, r3
 80040a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80040aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040b0:	e841 2300 	strex	r3, r2, [r1]
 80040b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1e6      	bne.n	800408a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3308      	adds	r3, #8
 80040c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	e853 3f00 	ldrex	r3, [r3]
 80040ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f023 0301 	bic.w	r3, r3, #1
 80040d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	3308      	adds	r3, #8
 80040da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040dc:	61fa      	str	r2, [r7, #28]
 80040de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e0:	69b9      	ldr	r1, [r7, #24]
 80040e2:	69fa      	ldr	r2, [r7, #28]
 80040e4:	e841 2300 	strex	r3, r2, [r1]
 80040e8:	617b      	str	r3, [r7, #20]
   return(result);
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1e5      	bne.n	80040bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e011      	b.n	8004128 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2220      	movs	r2, #32
 8004108:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2220      	movs	r2, #32
 800410e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3758      	adds	r7, #88	@ 0x58
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	603b      	str	r3, [r7, #0]
 800413c:	4613      	mov	r3, r2
 800413e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004140:	e04f      	b.n	80041e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004148:	d04b      	beq.n	80041e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800414a:	f7fc fbeb 	bl	8000924 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	429a      	cmp	r2, r3
 8004158:	d302      	bcc.n	8004160 <UART_WaitOnFlagUntilTimeout+0x30>
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e04e      	b.n	8004202 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0304 	and.w	r3, r3, #4
 800416e:	2b00      	cmp	r3, #0
 8004170:	d037      	beq.n	80041e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2b80      	cmp	r3, #128	@ 0x80
 8004176:	d034      	beq.n	80041e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	2b40      	cmp	r3, #64	@ 0x40
 800417c:	d031      	beq.n	80041e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	f003 0308 	and.w	r3, r3, #8
 8004188:	2b08      	cmp	r3, #8
 800418a:	d110      	bne.n	80041ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2208      	movs	r2, #8
 8004192:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 f838 	bl	800420a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2208      	movs	r2, #8
 800419e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e029      	b.n	8004202 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041bc:	d111      	bne.n	80041e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f000 f81e 	bl	800420a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e00f      	b.n	8004202 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69da      	ldr	r2, [r3, #28]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	4013      	ands	r3, r2
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	bf0c      	ite	eq
 80041f2:	2301      	moveq	r3, #1
 80041f4:	2300      	movne	r3, #0
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	461a      	mov	r2, r3
 80041fa:	79fb      	ldrb	r3, [r7, #7]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d0a0      	beq.n	8004142 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800420a:	b480      	push	{r7}
 800420c:	b095      	sub	sp, #84	@ 0x54
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800421a:	e853 3f00 	ldrex	r3, [r3]
 800421e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004222:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004226:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	461a      	mov	r2, r3
 800422e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004230:	643b      	str	r3, [r7, #64]	@ 0x40
 8004232:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004234:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004236:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004238:	e841 2300 	strex	r3, r2, [r1]
 800423c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800423e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e6      	bne.n	8004212 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3308      	adds	r3, #8
 800424a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	e853 3f00 	ldrex	r3, [r3]
 8004252:	61fb      	str	r3, [r7, #28]
   return(result);
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	f023 0301 	bic.w	r3, r3, #1
 800425a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3308      	adds	r3, #8
 8004262:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004264:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004266:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004268:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800426a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800426c:	e841 2300 	strex	r3, r2, [r1]
 8004270:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1e5      	bne.n	8004244 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800427c:	2b01      	cmp	r3, #1
 800427e:	d118      	bne.n	80042b2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	e853 3f00 	ldrex	r3, [r3]
 800428c:	60bb      	str	r3, [r7, #8]
   return(result);
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	f023 0310 	bic.w	r3, r3, #16
 8004294:	647b      	str	r3, [r7, #68]	@ 0x44
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	461a      	mov	r2, r3
 800429c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800429e:	61bb      	str	r3, [r7, #24]
 80042a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a2:	6979      	ldr	r1, [r7, #20]
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	e841 2300 	strex	r3, r2, [r1]
 80042aa:	613b      	str	r3, [r7, #16]
   return(result);
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1e6      	bne.n	8004280 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2220      	movs	r2, #32
 80042b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80042c6:	bf00      	nop
 80042c8:	3754      	adds	r7, #84	@ 0x54
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
	...

080042d4 <sniprintf>:
 80042d4:	b40c      	push	{r2, r3}
 80042d6:	b530      	push	{r4, r5, lr}
 80042d8:	4b17      	ldr	r3, [pc, #92]	@ (8004338 <sniprintf+0x64>)
 80042da:	1e0c      	subs	r4, r1, #0
 80042dc:	681d      	ldr	r5, [r3, #0]
 80042de:	b09d      	sub	sp, #116	@ 0x74
 80042e0:	da08      	bge.n	80042f4 <sniprintf+0x20>
 80042e2:	238b      	movs	r3, #139	@ 0x8b
 80042e4:	602b      	str	r3, [r5, #0]
 80042e6:	f04f 30ff 	mov.w	r0, #4294967295
 80042ea:	b01d      	add	sp, #116	@ 0x74
 80042ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80042f0:	b002      	add	sp, #8
 80042f2:	4770      	bx	lr
 80042f4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80042f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80042fc:	bf14      	ite	ne
 80042fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004302:	4623      	moveq	r3, r4
 8004304:	9304      	str	r3, [sp, #16]
 8004306:	9307      	str	r3, [sp, #28]
 8004308:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800430c:	9002      	str	r0, [sp, #8]
 800430e:	9006      	str	r0, [sp, #24]
 8004310:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004314:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004316:	ab21      	add	r3, sp, #132	@ 0x84
 8004318:	a902      	add	r1, sp, #8
 800431a:	4628      	mov	r0, r5
 800431c:	9301      	str	r3, [sp, #4]
 800431e:	f000 f995 	bl	800464c <_svfiprintf_r>
 8004322:	1c43      	adds	r3, r0, #1
 8004324:	bfbc      	itt	lt
 8004326:	238b      	movlt	r3, #139	@ 0x8b
 8004328:	602b      	strlt	r3, [r5, #0]
 800432a:	2c00      	cmp	r4, #0
 800432c:	d0dd      	beq.n	80042ea <sniprintf+0x16>
 800432e:	9b02      	ldr	r3, [sp, #8]
 8004330:	2200      	movs	r2, #0
 8004332:	701a      	strb	r2, [r3, #0]
 8004334:	e7d9      	b.n	80042ea <sniprintf+0x16>
 8004336:	bf00      	nop
 8004338:	2000000c 	.word	0x2000000c

0800433c <memset>:
 800433c:	4402      	add	r2, r0
 800433e:	4603      	mov	r3, r0
 8004340:	4293      	cmp	r3, r2
 8004342:	d100      	bne.n	8004346 <memset+0xa>
 8004344:	4770      	bx	lr
 8004346:	f803 1b01 	strb.w	r1, [r3], #1
 800434a:	e7f9      	b.n	8004340 <memset+0x4>

0800434c <__errno>:
 800434c:	4b01      	ldr	r3, [pc, #4]	@ (8004354 <__errno+0x8>)
 800434e:	6818      	ldr	r0, [r3, #0]
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	2000000c 	.word	0x2000000c

08004358 <__libc_init_array>:
 8004358:	b570      	push	{r4, r5, r6, lr}
 800435a:	4d0d      	ldr	r5, [pc, #52]	@ (8004390 <__libc_init_array+0x38>)
 800435c:	4c0d      	ldr	r4, [pc, #52]	@ (8004394 <__libc_init_array+0x3c>)
 800435e:	1b64      	subs	r4, r4, r5
 8004360:	10a4      	asrs	r4, r4, #2
 8004362:	2600      	movs	r6, #0
 8004364:	42a6      	cmp	r6, r4
 8004366:	d109      	bne.n	800437c <__libc_init_array+0x24>
 8004368:	4d0b      	ldr	r5, [pc, #44]	@ (8004398 <__libc_init_array+0x40>)
 800436a:	4c0c      	ldr	r4, [pc, #48]	@ (800439c <__libc_init_array+0x44>)
 800436c:	f000 fc66 	bl	8004c3c <_init>
 8004370:	1b64      	subs	r4, r4, r5
 8004372:	10a4      	asrs	r4, r4, #2
 8004374:	2600      	movs	r6, #0
 8004376:	42a6      	cmp	r6, r4
 8004378:	d105      	bne.n	8004386 <__libc_init_array+0x2e>
 800437a:	bd70      	pop	{r4, r5, r6, pc}
 800437c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004380:	4798      	blx	r3
 8004382:	3601      	adds	r6, #1
 8004384:	e7ee      	b.n	8004364 <__libc_init_array+0xc>
 8004386:	f855 3b04 	ldr.w	r3, [r5], #4
 800438a:	4798      	blx	r3
 800438c:	3601      	adds	r6, #1
 800438e:	e7f2      	b.n	8004376 <__libc_init_array+0x1e>
 8004390:	08004cd4 	.word	0x08004cd4
 8004394:	08004cd4 	.word	0x08004cd4
 8004398:	08004cd4 	.word	0x08004cd4
 800439c:	08004cd8 	.word	0x08004cd8

080043a0 <__retarget_lock_acquire_recursive>:
 80043a0:	4770      	bx	lr

080043a2 <__retarget_lock_release_recursive>:
 80043a2:	4770      	bx	lr

080043a4 <_free_r>:
 80043a4:	b538      	push	{r3, r4, r5, lr}
 80043a6:	4605      	mov	r5, r0
 80043a8:	2900      	cmp	r1, #0
 80043aa:	d041      	beq.n	8004430 <_free_r+0x8c>
 80043ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043b0:	1f0c      	subs	r4, r1, #4
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	bfb8      	it	lt
 80043b6:	18e4      	addlt	r4, r4, r3
 80043b8:	f000 f8e0 	bl	800457c <__malloc_lock>
 80043bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004434 <_free_r+0x90>)
 80043be:	6813      	ldr	r3, [r2, #0]
 80043c0:	b933      	cbnz	r3, 80043d0 <_free_r+0x2c>
 80043c2:	6063      	str	r3, [r4, #4]
 80043c4:	6014      	str	r4, [r2, #0]
 80043c6:	4628      	mov	r0, r5
 80043c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043cc:	f000 b8dc 	b.w	8004588 <__malloc_unlock>
 80043d0:	42a3      	cmp	r3, r4
 80043d2:	d908      	bls.n	80043e6 <_free_r+0x42>
 80043d4:	6820      	ldr	r0, [r4, #0]
 80043d6:	1821      	adds	r1, r4, r0
 80043d8:	428b      	cmp	r3, r1
 80043da:	bf01      	itttt	eq
 80043dc:	6819      	ldreq	r1, [r3, #0]
 80043de:	685b      	ldreq	r3, [r3, #4]
 80043e0:	1809      	addeq	r1, r1, r0
 80043e2:	6021      	streq	r1, [r4, #0]
 80043e4:	e7ed      	b.n	80043c2 <_free_r+0x1e>
 80043e6:	461a      	mov	r2, r3
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	b10b      	cbz	r3, 80043f0 <_free_r+0x4c>
 80043ec:	42a3      	cmp	r3, r4
 80043ee:	d9fa      	bls.n	80043e6 <_free_r+0x42>
 80043f0:	6811      	ldr	r1, [r2, #0]
 80043f2:	1850      	adds	r0, r2, r1
 80043f4:	42a0      	cmp	r0, r4
 80043f6:	d10b      	bne.n	8004410 <_free_r+0x6c>
 80043f8:	6820      	ldr	r0, [r4, #0]
 80043fa:	4401      	add	r1, r0
 80043fc:	1850      	adds	r0, r2, r1
 80043fe:	4283      	cmp	r3, r0
 8004400:	6011      	str	r1, [r2, #0]
 8004402:	d1e0      	bne.n	80043c6 <_free_r+0x22>
 8004404:	6818      	ldr	r0, [r3, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	6053      	str	r3, [r2, #4]
 800440a:	4408      	add	r0, r1
 800440c:	6010      	str	r0, [r2, #0]
 800440e:	e7da      	b.n	80043c6 <_free_r+0x22>
 8004410:	d902      	bls.n	8004418 <_free_r+0x74>
 8004412:	230c      	movs	r3, #12
 8004414:	602b      	str	r3, [r5, #0]
 8004416:	e7d6      	b.n	80043c6 <_free_r+0x22>
 8004418:	6820      	ldr	r0, [r4, #0]
 800441a:	1821      	adds	r1, r4, r0
 800441c:	428b      	cmp	r3, r1
 800441e:	bf04      	itt	eq
 8004420:	6819      	ldreq	r1, [r3, #0]
 8004422:	685b      	ldreq	r3, [r3, #4]
 8004424:	6063      	str	r3, [r4, #4]
 8004426:	bf04      	itt	eq
 8004428:	1809      	addeq	r1, r1, r0
 800442a:	6021      	streq	r1, [r4, #0]
 800442c:	6054      	str	r4, [r2, #4]
 800442e:	e7ca      	b.n	80043c6 <_free_r+0x22>
 8004430:	bd38      	pop	{r3, r4, r5, pc}
 8004432:	bf00      	nop
 8004434:	200002b4 	.word	0x200002b4

08004438 <sbrk_aligned>:
 8004438:	b570      	push	{r4, r5, r6, lr}
 800443a:	4e0f      	ldr	r6, [pc, #60]	@ (8004478 <sbrk_aligned+0x40>)
 800443c:	460c      	mov	r4, r1
 800443e:	6831      	ldr	r1, [r6, #0]
 8004440:	4605      	mov	r5, r0
 8004442:	b911      	cbnz	r1, 800444a <sbrk_aligned+0x12>
 8004444:	f000 fba6 	bl	8004b94 <_sbrk_r>
 8004448:	6030      	str	r0, [r6, #0]
 800444a:	4621      	mov	r1, r4
 800444c:	4628      	mov	r0, r5
 800444e:	f000 fba1 	bl	8004b94 <_sbrk_r>
 8004452:	1c43      	adds	r3, r0, #1
 8004454:	d103      	bne.n	800445e <sbrk_aligned+0x26>
 8004456:	f04f 34ff 	mov.w	r4, #4294967295
 800445a:	4620      	mov	r0, r4
 800445c:	bd70      	pop	{r4, r5, r6, pc}
 800445e:	1cc4      	adds	r4, r0, #3
 8004460:	f024 0403 	bic.w	r4, r4, #3
 8004464:	42a0      	cmp	r0, r4
 8004466:	d0f8      	beq.n	800445a <sbrk_aligned+0x22>
 8004468:	1a21      	subs	r1, r4, r0
 800446a:	4628      	mov	r0, r5
 800446c:	f000 fb92 	bl	8004b94 <_sbrk_r>
 8004470:	3001      	adds	r0, #1
 8004472:	d1f2      	bne.n	800445a <sbrk_aligned+0x22>
 8004474:	e7ef      	b.n	8004456 <sbrk_aligned+0x1e>
 8004476:	bf00      	nop
 8004478:	200002b0 	.word	0x200002b0

0800447c <_malloc_r>:
 800447c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004480:	1ccd      	adds	r5, r1, #3
 8004482:	f025 0503 	bic.w	r5, r5, #3
 8004486:	3508      	adds	r5, #8
 8004488:	2d0c      	cmp	r5, #12
 800448a:	bf38      	it	cc
 800448c:	250c      	movcc	r5, #12
 800448e:	2d00      	cmp	r5, #0
 8004490:	4606      	mov	r6, r0
 8004492:	db01      	blt.n	8004498 <_malloc_r+0x1c>
 8004494:	42a9      	cmp	r1, r5
 8004496:	d904      	bls.n	80044a2 <_malloc_r+0x26>
 8004498:	230c      	movs	r3, #12
 800449a:	6033      	str	r3, [r6, #0]
 800449c:	2000      	movs	r0, #0
 800449e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004578 <_malloc_r+0xfc>
 80044a6:	f000 f869 	bl	800457c <__malloc_lock>
 80044aa:	f8d8 3000 	ldr.w	r3, [r8]
 80044ae:	461c      	mov	r4, r3
 80044b0:	bb44      	cbnz	r4, 8004504 <_malloc_r+0x88>
 80044b2:	4629      	mov	r1, r5
 80044b4:	4630      	mov	r0, r6
 80044b6:	f7ff ffbf 	bl	8004438 <sbrk_aligned>
 80044ba:	1c43      	adds	r3, r0, #1
 80044bc:	4604      	mov	r4, r0
 80044be:	d158      	bne.n	8004572 <_malloc_r+0xf6>
 80044c0:	f8d8 4000 	ldr.w	r4, [r8]
 80044c4:	4627      	mov	r7, r4
 80044c6:	2f00      	cmp	r7, #0
 80044c8:	d143      	bne.n	8004552 <_malloc_r+0xd6>
 80044ca:	2c00      	cmp	r4, #0
 80044cc:	d04b      	beq.n	8004566 <_malloc_r+0xea>
 80044ce:	6823      	ldr	r3, [r4, #0]
 80044d0:	4639      	mov	r1, r7
 80044d2:	4630      	mov	r0, r6
 80044d4:	eb04 0903 	add.w	r9, r4, r3
 80044d8:	f000 fb5c 	bl	8004b94 <_sbrk_r>
 80044dc:	4581      	cmp	r9, r0
 80044de:	d142      	bne.n	8004566 <_malloc_r+0xea>
 80044e0:	6821      	ldr	r1, [r4, #0]
 80044e2:	1a6d      	subs	r5, r5, r1
 80044e4:	4629      	mov	r1, r5
 80044e6:	4630      	mov	r0, r6
 80044e8:	f7ff ffa6 	bl	8004438 <sbrk_aligned>
 80044ec:	3001      	adds	r0, #1
 80044ee:	d03a      	beq.n	8004566 <_malloc_r+0xea>
 80044f0:	6823      	ldr	r3, [r4, #0]
 80044f2:	442b      	add	r3, r5
 80044f4:	6023      	str	r3, [r4, #0]
 80044f6:	f8d8 3000 	ldr.w	r3, [r8]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	bb62      	cbnz	r2, 8004558 <_malloc_r+0xdc>
 80044fe:	f8c8 7000 	str.w	r7, [r8]
 8004502:	e00f      	b.n	8004524 <_malloc_r+0xa8>
 8004504:	6822      	ldr	r2, [r4, #0]
 8004506:	1b52      	subs	r2, r2, r5
 8004508:	d420      	bmi.n	800454c <_malloc_r+0xd0>
 800450a:	2a0b      	cmp	r2, #11
 800450c:	d917      	bls.n	800453e <_malloc_r+0xc2>
 800450e:	1961      	adds	r1, r4, r5
 8004510:	42a3      	cmp	r3, r4
 8004512:	6025      	str	r5, [r4, #0]
 8004514:	bf18      	it	ne
 8004516:	6059      	strne	r1, [r3, #4]
 8004518:	6863      	ldr	r3, [r4, #4]
 800451a:	bf08      	it	eq
 800451c:	f8c8 1000 	streq.w	r1, [r8]
 8004520:	5162      	str	r2, [r4, r5]
 8004522:	604b      	str	r3, [r1, #4]
 8004524:	4630      	mov	r0, r6
 8004526:	f000 f82f 	bl	8004588 <__malloc_unlock>
 800452a:	f104 000b 	add.w	r0, r4, #11
 800452e:	1d23      	adds	r3, r4, #4
 8004530:	f020 0007 	bic.w	r0, r0, #7
 8004534:	1ac2      	subs	r2, r0, r3
 8004536:	bf1c      	itt	ne
 8004538:	1a1b      	subne	r3, r3, r0
 800453a:	50a3      	strne	r3, [r4, r2]
 800453c:	e7af      	b.n	800449e <_malloc_r+0x22>
 800453e:	6862      	ldr	r2, [r4, #4]
 8004540:	42a3      	cmp	r3, r4
 8004542:	bf0c      	ite	eq
 8004544:	f8c8 2000 	streq.w	r2, [r8]
 8004548:	605a      	strne	r2, [r3, #4]
 800454a:	e7eb      	b.n	8004524 <_malloc_r+0xa8>
 800454c:	4623      	mov	r3, r4
 800454e:	6864      	ldr	r4, [r4, #4]
 8004550:	e7ae      	b.n	80044b0 <_malloc_r+0x34>
 8004552:	463c      	mov	r4, r7
 8004554:	687f      	ldr	r7, [r7, #4]
 8004556:	e7b6      	b.n	80044c6 <_malloc_r+0x4a>
 8004558:	461a      	mov	r2, r3
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	42a3      	cmp	r3, r4
 800455e:	d1fb      	bne.n	8004558 <_malloc_r+0xdc>
 8004560:	2300      	movs	r3, #0
 8004562:	6053      	str	r3, [r2, #4]
 8004564:	e7de      	b.n	8004524 <_malloc_r+0xa8>
 8004566:	230c      	movs	r3, #12
 8004568:	6033      	str	r3, [r6, #0]
 800456a:	4630      	mov	r0, r6
 800456c:	f000 f80c 	bl	8004588 <__malloc_unlock>
 8004570:	e794      	b.n	800449c <_malloc_r+0x20>
 8004572:	6005      	str	r5, [r0, #0]
 8004574:	e7d6      	b.n	8004524 <_malloc_r+0xa8>
 8004576:	bf00      	nop
 8004578:	200002b4 	.word	0x200002b4

0800457c <__malloc_lock>:
 800457c:	4801      	ldr	r0, [pc, #4]	@ (8004584 <__malloc_lock+0x8>)
 800457e:	f7ff bf0f 	b.w	80043a0 <__retarget_lock_acquire_recursive>
 8004582:	bf00      	nop
 8004584:	200002ac 	.word	0x200002ac

08004588 <__malloc_unlock>:
 8004588:	4801      	ldr	r0, [pc, #4]	@ (8004590 <__malloc_unlock+0x8>)
 800458a:	f7ff bf0a 	b.w	80043a2 <__retarget_lock_release_recursive>
 800458e:	bf00      	nop
 8004590:	200002ac 	.word	0x200002ac

08004594 <__ssputs_r>:
 8004594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004598:	688e      	ldr	r6, [r1, #8]
 800459a:	461f      	mov	r7, r3
 800459c:	42be      	cmp	r6, r7
 800459e:	680b      	ldr	r3, [r1, #0]
 80045a0:	4682      	mov	sl, r0
 80045a2:	460c      	mov	r4, r1
 80045a4:	4690      	mov	r8, r2
 80045a6:	d82d      	bhi.n	8004604 <__ssputs_r+0x70>
 80045a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80045ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80045b0:	d026      	beq.n	8004600 <__ssputs_r+0x6c>
 80045b2:	6965      	ldr	r5, [r4, #20]
 80045b4:	6909      	ldr	r1, [r1, #16]
 80045b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045ba:	eba3 0901 	sub.w	r9, r3, r1
 80045be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045c2:	1c7b      	adds	r3, r7, #1
 80045c4:	444b      	add	r3, r9
 80045c6:	106d      	asrs	r5, r5, #1
 80045c8:	429d      	cmp	r5, r3
 80045ca:	bf38      	it	cc
 80045cc:	461d      	movcc	r5, r3
 80045ce:	0553      	lsls	r3, r2, #21
 80045d0:	d527      	bpl.n	8004622 <__ssputs_r+0x8e>
 80045d2:	4629      	mov	r1, r5
 80045d4:	f7ff ff52 	bl	800447c <_malloc_r>
 80045d8:	4606      	mov	r6, r0
 80045da:	b360      	cbz	r0, 8004636 <__ssputs_r+0xa2>
 80045dc:	6921      	ldr	r1, [r4, #16]
 80045de:	464a      	mov	r2, r9
 80045e0:	f000 fae8 	bl	8004bb4 <memcpy>
 80045e4:	89a3      	ldrh	r3, [r4, #12]
 80045e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80045ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045ee:	81a3      	strh	r3, [r4, #12]
 80045f0:	6126      	str	r6, [r4, #16]
 80045f2:	6165      	str	r5, [r4, #20]
 80045f4:	444e      	add	r6, r9
 80045f6:	eba5 0509 	sub.w	r5, r5, r9
 80045fa:	6026      	str	r6, [r4, #0]
 80045fc:	60a5      	str	r5, [r4, #8]
 80045fe:	463e      	mov	r6, r7
 8004600:	42be      	cmp	r6, r7
 8004602:	d900      	bls.n	8004606 <__ssputs_r+0x72>
 8004604:	463e      	mov	r6, r7
 8004606:	6820      	ldr	r0, [r4, #0]
 8004608:	4632      	mov	r2, r6
 800460a:	4641      	mov	r1, r8
 800460c:	f000 faa8 	bl	8004b60 <memmove>
 8004610:	68a3      	ldr	r3, [r4, #8]
 8004612:	1b9b      	subs	r3, r3, r6
 8004614:	60a3      	str	r3, [r4, #8]
 8004616:	6823      	ldr	r3, [r4, #0]
 8004618:	4433      	add	r3, r6
 800461a:	6023      	str	r3, [r4, #0]
 800461c:	2000      	movs	r0, #0
 800461e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004622:	462a      	mov	r2, r5
 8004624:	f000 fad4 	bl	8004bd0 <_realloc_r>
 8004628:	4606      	mov	r6, r0
 800462a:	2800      	cmp	r0, #0
 800462c:	d1e0      	bne.n	80045f0 <__ssputs_r+0x5c>
 800462e:	6921      	ldr	r1, [r4, #16]
 8004630:	4650      	mov	r0, sl
 8004632:	f7ff feb7 	bl	80043a4 <_free_r>
 8004636:	230c      	movs	r3, #12
 8004638:	f8ca 3000 	str.w	r3, [sl]
 800463c:	89a3      	ldrh	r3, [r4, #12]
 800463e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004642:	81a3      	strh	r3, [r4, #12]
 8004644:	f04f 30ff 	mov.w	r0, #4294967295
 8004648:	e7e9      	b.n	800461e <__ssputs_r+0x8a>
	...

0800464c <_svfiprintf_r>:
 800464c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004650:	4698      	mov	r8, r3
 8004652:	898b      	ldrh	r3, [r1, #12]
 8004654:	061b      	lsls	r3, r3, #24
 8004656:	b09d      	sub	sp, #116	@ 0x74
 8004658:	4607      	mov	r7, r0
 800465a:	460d      	mov	r5, r1
 800465c:	4614      	mov	r4, r2
 800465e:	d510      	bpl.n	8004682 <_svfiprintf_r+0x36>
 8004660:	690b      	ldr	r3, [r1, #16]
 8004662:	b973      	cbnz	r3, 8004682 <_svfiprintf_r+0x36>
 8004664:	2140      	movs	r1, #64	@ 0x40
 8004666:	f7ff ff09 	bl	800447c <_malloc_r>
 800466a:	6028      	str	r0, [r5, #0]
 800466c:	6128      	str	r0, [r5, #16]
 800466e:	b930      	cbnz	r0, 800467e <_svfiprintf_r+0x32>
 8004670:	230c      	movs	r3, #12
 8004672:	603b      	str	r3, [r7, #0]
 8004674:	f04f 30ff 	mov.w	r0, #4294967295
 8004678:	b01d      	add	sp, #116	@ 0x74
 800467a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800467e:	2340      	movs	r3, #64	@ 0x40
 8004680:	616b      	str	r3, [r5, #20]
 8004682:	2300      	movs	r3, #0
 8004684:	9309      	str	r3, [sp, #36]	@ 0x24
 8004686:	2320      	movs	r3, #32
 8004688:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800468c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004690:	2330      	movs	r3, #48	@ 0x30
 8004692:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004830 <_svfiprintf_r+0x1e4>
 8004696:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800469a:	f04f 0901 	mov.w	r9, #1
 800469e:	4623      	mov	r3, r4
 80046a0:	469a      	mov	sl, r3
 80046a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046a6:	b10a      	cbz	r2, 80046ac <_svfiprintf_r+0x60>
 80046a8:	2a25      	cmp	r2, #37	@ 0x25
 80046aa:	d1f9      	bne.n	80046a0 <_svfiprintf_r+0x54>
 80046ac:	ebba 0b04 	subs.w	fp, sl, r4
 80046b0:	d00b      	beq.n	80046ca <_svfiprintf_r+0x7e>
 80046b2:	465b      	mov	r3, fp
 80046b4:	4622      	mov	r2, r4
 80046b6:	4629      	mov	r1, r5
 80046b8:	4638      	mov	r0, r7
 80046ba:	f7ff ff6b 	bl	8004594 <__ssputs_r>
 80046be:	3001      	adds	r0, #1
 80046c0:	f000 80a7 	beq.w	8004812 <_svfiprintf_r+0x1c6>
 80046c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80046c6:	445a      	add	r2, fp
 80046c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80046ca:	f89a 3000 	ldrb.w	r3, [sl]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 809f 	beq.w	8004812 <_svfiprintf_r+0x1c6>
 80046d4:	2300      	movs	r3, #0
 80046d6:	f04f 32ff 	mov.w	r2, #4294967295
 80046da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046de:	f10a 0a01 	add.w	sl, sl, #1
 80046e2:	9304      	str	r3, [sp, #16]
 80046e4:	9307      	str	r3, [sp, #28]
 80046e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80046ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80046ec:	4654      	mov	r4, sl
 80046ee:	2205      	movs	r2, #5
 80046f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046f4:	484e      	ldr	r0, [pc, #312]	@ (8004830 <_svfiprintf_r+0x1e4>)
 80046f6:	f7fb fd73 	bl	80001e0 <memchr>
 80046fa:	9a04      	ldr	r2, [sp, #16]
 80046fc:	b9d8      	cbnz	r0, 8004736 <_svfiprintf_r+0xea>
 80046fe:	06d0      	lsls	r0, r2, #27
 8004700:	bf44      	itt	mi
 8004702:	2320      	movmi	r3, #32
 8004704:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004708:	0711      	lsls	r1, r2, #28
 800470a:	bf44      	itt	mi
 800470c:	232b      	movmi	r3, #43	@ 0x2b
 800470e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004712:	f89a 3000 	ldrb.w	r3, [sl]
 8004716:	2b2a      	cmp	r3, #42	@ 0x2a
 8004718:	d015      	beq.n	8004746 <_svfiprintf_r+0xfa>
 800471a:	9a07      	ldr	r2, [sp, #28]
 800471c:	4654      	mov	r4, sl
 800471e:	2000      	movs	r0, #0
 8004720:	f04f 0c0a 	mov.w	ip, #10
 8004724:	4621      	mov	r1, r4
 8004726:	f811 3b01 	ldrb.w	r3, [r1], #1
 800472a:	3b30      	subs	r3, #48	@ 0x30
 800472c:	2b09      	cmp	r3, #9
 800472e:	d94b      	bls.n	80047c8 <_svfiprintf_r+0x17c>
 8004730:	b1b0      	cbz	r0, 8004760 <_svfiprintf_r+0x114>
 8004732:	9207      	str	r2, [sp, #28]
 8004734:	e014      	b.n	8004760 <_svfiprintf_r+0x114>
 8004736:	eba0 0308 	sub.w	r3, r0, r8
 800473a:	fa09 f303 	lsl.w	r3, r9, r3
 800473e:	4313      	orrs	r3, r2
 8004740:	9304      	str	r3, [sp, #16]
 8004742:	46a2      	mov	sl, r4
 8004744:	e7d2      	b.n	80046ec <_svfiprintf_r+0xa0>
 8004746:	9b03      	ldr	r3, [sp, #12]
 8004748:	1d19      	adds	r1, r3, #4
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	9103      	str	r1, [sp, #12]
 800474e:	2b00      	cmp	r3, #0
 8004750:	bfbb      	ittet	lt
 8004752:	425b      	neglt	r3, r3
 8004754:	f042 0202 	orrlt.w	r2, r2, #2
 8004758:	9307      	strge	r3, [sp, #28]
 800475a:	9307      	strlt	r3, [sp, #28]
 800475c:	bfb8      	it	lt
 800475e:	9204      	strlt	r2, [sp, #16]
 8004760:	7823      	ldrb	r3, [r4, #0]
 8004762:	2b2e      	cmp	r3, #46	@ 0x2e
 8004764:	d10a      	bne.n	800477c <_svfiprintf_r+0x130>
 8004766:	7863      	ldrb	r3, [r4, #1]
 8004768:	2b2a      	cmp	r3, #42	@ 0x2a
 800476a:	d132      	bne.n	80047d2 <_svfiprintf_r+0x186>
 800476c:	9b03      	ldr	r3, [sp, #12]
 800476e:	1d1a      	adds	r2, r3, #4
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	9203      	str	r2, [sp, #12]
 8004774:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004778:	3402      	adds	r4, #2
 800477a:	9305      	str	r3, [sp, #20]
 800477c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004840 <_svfiprintf_r+0x1f4>
 8004780:	7821      	ldrb	r1, [r4, #0]
 8004782:	2203      	movs	r2, #3
 8004784:	4650      	mov	r0, sl
 8004786:	f7fb fd2b 	bl	80001e0 <memchr>
 800478a:	b138      	cbz	r0, 800479c <_svfiprintf_r+0x150>
 800478c:	9b04      	ldr	r3, [sp, #16]
 800478e:	eba0 000a 	sub.w	r0, r0, sl
 8004792:	2240      	movs	r2, #64	@ 0x40
 8004794:	4082      	lsls	r2, r0
 8004796:	4313      	orrs	r3, r2
 8004798:	3401      	adds	r4, #1
 800479a:	9304      	str	r3, [sp, #16]
 800479c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047a0:	4824      	ldr	r0, [pc, #144]	@ (8004834 <_svfiprintf_r+0x1e8>)
 80047a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80047a6:	2206      	movs	r2, #6
 80047a8:	f7fb fd1a 	bl	80001e0 <memchr>
 80047ac:	2800      	cmp	r0, #0
 80047ae:	d036      	beq.n	800481e <_svfiprintf_r+0x1d2>
 80047b0:	4b21      	ldr	r3, [pc, #132]	@ (8004838 <_svfiprintf_r+0x1ec>)
 80047b2:	bb1b      	cbnz	r3, 80047fc <_svfiprintf_r+0x1b0>
 80047b4:	9b03      	ldr	r3, [sp, #12]
 80047b6:	3307      	adds	r3, #7
 80047b8:	f023 0307 	bic.w	r3, r3, #7
 80047bc:	3308      	adds	r3, #8
 80047be:	9303      	str	r3, [sp, #12]
 80047c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047c2:	4433      	add	r3, r6
 80047c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80047c6:	e76a      	b.n	800469e <_svfiprintf_r+0x52>
 80047c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80047cc:	460c      	mov	r4, r1
 80047ce:	2001      	movs	r0, #1
 80047d0:	e7a8      	b.n	8004724 <_svfiprintf_r+0xd8>
 80047d2:	2300      	movs	r3, #0
 80047d4:	3401      	adds	r4, #1
 80047d6:	9305      	str	r3, [sp, #20]
 80047d8:	4619      	mov	r1, r3
 80047da:	f04f 0c0a 	mov.w	ip, #10
 80047de:	4620      	mov	r0, r4
 80047e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047e4:	3a30      	subs	r2, #48	@ 0x30
 80047e6:	2a09      	cmp	r2, #9
 80047e8:	d903      	bls.n	80047f2 <_svfiprintf_r+0x1a6>
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0c6      	beq.n	800477c <_svfiprintf_r+0x130>
 80047ee:	9105      	str	r1, [sp, #20]
 80047f0:	e7c4      	b.n	800477c <_svfiprintf_r+0x130>
 80047f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80047f6:	4604      	mov	r4, r0
 80047f8:	2301      	movs	r3, #1
 80047fa:	e7f0      	b.n	80047de <_svfiprintf_r+0x192>
 80047fc:	ab03      	add	r3, sp, #12
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	462a      	mov	r2, r5
 8004802:	4b0e      	ldr	r3, [pc, #56]	@ (800483c <_svfiprintf_r+0x1f0>)
 8004804:	a904      	add	r1, sp, #16
 8004806:	4638      	mov	r0, r7
 8004808:	f3af 8000 	nop.w
 800480c:	1c42      	adds	r2, r0, #1
 800480e:	4606      	mov	r6, r0
 8004810:	d1d6      	bne.n	80047c0 <_svfiprintf_r+0x174>
 8004812:	89ab      	ldrh	r3, [r5, #12]
 8004814:	065b      	lsls	r3, r3, #25
 8004816:	f53f af2d 	bmi.w	8004674 <_svfiprintf_r+0x28>
 800481a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800481c:	e72c      	b.n	8004678 <_svfiprintf_r+0x2c>
 800481e:	ab03      	add	r3, sp, #12
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	462a      	mov	r2, r5
 8004824:	4b05      	ldr	r3, [pc, #20]	@ (800483c <_svfiprintf_r+0x1f0>)
 8004826:	a904      	add	r1, sp, #16
 8004828:	4638      	mov	r0, r7
 800482a:	f000 f879 	bl	8004920 <_printf_i>
 800482e:	e7ed      	b.n	800480c <_svfiprintf_r+0x1c0>
 8004830:	08004c98 	.word	0x08004c98
 8004834:	08004ca2 	.word	0x08004ca2
 8004838:	00000000 	.word	0x00000000
 800483c:	08004595 	.word	0x08004595
 8004840:	08004c9e 	.word	0x08004c9e

08004844 <_printf_common>:
 8004844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004848:	4616      	mov	r6, r2
 800484a:	4698      	mov	r8, r3
 800484c:	688a      	ldr	r2, [r1, #8]
 800484e:	690b      	ldr	r3, [r1, #16]
 8004850:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004854:	4293      	cmp	r3, r2
 8004856:	bfb8      	it	lt
 8004858:	4613      	movlt	r3, r2
 800485a:	6033      	str	r3, [r6, #0]
 800485c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004860:	4607      	mov	r7, r0
 8004862:	460c      	mov	r4, r1
 8004864:	b10a      	cbz	r2, 800486a <_printf_common+0x26>
 8004866:	3301      	adds	r3, #1
 8004868:	6033      	str	r3, [r6, #0]
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	0699      	lsls	r1, r3, #26
 800486e:	bf42      	ittt	mi
 8004870:	6833      	ldrmi	r3, [r6, #0]
 8004872:	3302      	addmi	r3, #2
 8004874:	6033      	strmi	r3, [r6, #0]
 8004876:	6825      	ldr	r5, [r4, #0]
 8004878:	f015 0506 	ands.w	r5, r5, #6
 800487c:	d106      	bne.n	800488c <_printf_common+0x48>
 800487e:	f104 0a19 	add.w	sl, r4, #25
 8004882:	68e3      	ldr	r3, [r4, #12]
 8004884:	6832      	ldr	r2, [r6, #0]
 8004886:	1a9b      	subs	r3, r3, r2
 8004888:	42ab      	cmp	r3, r5
 800488a:	dc26      	bgt.n	80048da <_printf_common+0x96>
 800488c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004890:	6822      	ldr	r2, [r4, #0]
 8004892:	3b00      	subs	r3, #0
 8004894:	bf18      	it	ne
 8004896:	2301      	movne	r3, #1
 8004898:	0692      	lsls	r2, r2, #26
 800489a:	d42b      	bmi.n	80048f4 <_printf_common+0xb0>
 800489c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80048a0:	4641      	mov	r1, r8
 80048a2:	4638      	mov	r0, r7
 80048a4:	47c8      	blx	r9
 80048a6:	3001      	adds	r0, #1
 80048a8:	d01e      	beq.n	80048e8 <_printf_common+0xa4>
 80048aa:	6823      	ldr	r3, [r4, #0]
 80048ac:	6922      	ldr	r2, [r4, #16]
 80048ae:	f003 0306 	and.w	r3, r3, #6
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	bf02      	ittt	eq
 80048b6:	68e5      	ldreq	r5, [r4, #12]
 80048b8:	6833      	ldreq	r3, [r6, #0]
 80048ba:	1aed      	subeq	r5, r5, r3
 80048bc:	68a3      	ldr	r3, [r4, #8]
 80048be:	bf0c      	ite	eq
 80048c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048c4:	2500      	movne	r5, #0
 80048c6:	4293      	cmp	r3, r2
 80048c8:	bfc4      	itt	gt
 80048ca:	1a9b      	subgt	r3, r3, r2
 80048cc:	18ed      	addgt	r5, r5, r3
 80048ce:	2600      	movs	r6, #0
 80048d0:	341a      	adds	r4, #26
 80048d2:	42b5      	cmp	r5, r6
 80048d4:	d11a      	bne.n	800490c <_printf_common+0xc8>
 80048d6:	2000      	movs	r0, #0
 80048d8:	e008      	b.n	80048ec <_printf_common+0xa8>
 80048da:	2301      	movs	r3, #1
 80048dc:	4652      	mov	r2, sl
 80048de:	4641      	mov	r1, r8
 80048e0:	4638      	mov	r0, r7
 80048e2:	47c8      	blx	r9
 80048e4:	3001      	adds	r0, #1
 80048e6:	d103      	bne.n	80048f0 <_printf_common+0xac>
 80048e8:	f04f 30ff 	mov.w	r0, #4294967295
 80048ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048f0:	3501      	adds	r5, #1
 80048f2:	e7c6      	b.n	8004882 <_printf_common+0x3e>
 80048f4:	18e1      	adds	r1, r4, r3
 80048f6:	1c5a      	adds	r2, r3, #1
 80048f8:	2030      	movs	r0, #48	@ 0x30
 80048fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80048fe:	4422      	add	r2, r4
 8004900:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004904:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004908:	3302      	adds	r3, #2
 800490a:	e7c7      	b.n	800489c <_printf_common+0x58>
 800490c:	2301      	movs	r3, #1
 800490e:	4622      	mov	r2, r4
 8004910:	4641      	mov	r1, r8
 8004912:	4638      	mov	r0, r7
 8004914:	47c8      	blx	r9
 8004916:	3001      	adds	r0, #1
 8004918:	d0e6      	beq.n	80048e8 <_printf_common+0xa4>
 800491a:	3601      	adds	r6, #1
 800491c:	e7d9      	b.n	80048d2 <_printf_common+0x8e>
	...

08004920 <_printf_i>:
 8004920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004924:	7e0f      	ldrb	r7, [r1, #24]
 8004926:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004928:	2f78      	cmp	r7, #120	@ 0x78
 800492a:	4691      	mov	r9, r2
 800492c:	4680      	mov	r8, r0
 800492e:	460c      	mov	r4, r1
 8004930:	469a      	mov	sl, r3
 8004932:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004936:	d807      	bhi.n	8004948 <_printf_i+0x28>
 8004938:	2f62      	cmp	r7, #98	@ 0x62
 800493a:	d80a      	bhi.n	8004952 <_printf_i+0x32>
 800493c:	2f00      	cmp	r7, #0
 800493e:	f000 80d2 	beq.w	8004ae6 <_printf_i+0x1c6>
 8004942:	2f58      	cmp	r7, #88	@ 0x58
 8004944:	f000 80b9 	beq.w	8004aba <_printf_i+0x19a>
 8004948:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800494c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004950:	e03a      	b.n	80049c8 <_printf_i+0xa8>
 8004952:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004956:	2b15      	cmp	r3, #21
 8004958:	d8f6      	bhi.n	8004948 <_printf_i+0x28>
 800495a:	a101      	add	r1, pc, #4	@ (adr r1, 8004960 <_printf_i+0x40>)
 800495c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004960:	080049b9 	.word	0x080049b9
 8004964:	080049cd 	.word	0x080049cd
 8004968:	08004949 	.word	0x08004949
 800496c:	08004949 	.word	0x08004949
 8004970:	08004949 	.word	0x08004949
 8004974:	08004949 	.word	0x08004949
 8004978:	080049cd 	.word	0x080049cd
 800497c:	08004949 	.word	0x08004949
 8004980:	08004949 	.word	0x08004949
 8004984:	08004949 	.word	0x08004949
 8004988:	08004949 	.word	0x08004949
 800498c:	08004acd 	.word	0x08004acd
 8004990:	080049f7 	.word	0x080049f7
 8004994:	08004a87 	.word	0x08004a87
 8004998:	08004949 	.word	0x08004949
 800499c:	08004949 	.word	0x08004949
 80049a0:	08004aef 	.word	0x08004aef
 80049a4:	08004949 	.word	0x08004949
 80049a8:	080049f7 	.word	0x080049f7
 80049ac:	08004949 	.word	0x08004949
 80049b0:	08004949 	.word	0x08004949
 80049b4:	08004a8f 	.word	0x08004a8f
 80049b8:	6833      	ldr	r3, [r6, #0]
 80049ba:	1d1a      	adds	r2, r3, #4
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6032      	str	r2, [r6, #0]
 80049c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80049c8:	2301      	movs	r3, #1
 80049ca:	e09d      	b.n	8004b08 <_printf_i+0x1e8>
 80049cc:	6833      	ldr	r3, [r6, #0]
 80049ce:	6820      	ldr	r0, [r4, #0]
 80049d0:	1d19      	adds	r1, r3, #4
 80049d2:	6031      	str	r1, [r6, #0]
 80049d4:	0606      	lsls	r6, r0, #24
 80049d6:	d501      	bpl.n	80049dc <_printf_i+0xbc>
 80049d8:	681d      	ldr	r5, [r3, #0]
 80049da:	e003      	b.n	80049e4 <_printf_i+0xc4>
 80049dc:	0645      	lsls	r5, r0, #25
 80049de:	d5fb      	bpl.n	80049d8 <_printf_i+0xb8>
 80049e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80049e4:	2d00      	cmp	r5, #0
 80049e6:	da03      	bge.n	80049f0 <_printf_i+0xd0>
 80049e8:	232d      	movs	r3, #45	@ 0x2d
 80049ea:	426d      	negs	r5, r5
 80049ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049f0:	4859      	ldr	r0, [pc, #356]	@ (8004b58 <_printf_i+0x238>)
 80049f2:	230a      	movs	r3, #10
 80049f4:	e011      	b.n	8004a1a <_printf_i+0xfa>
 80049f6:	6821      	ldr	r1, [r4, #0]
 80049f8:	6833      	ldr	r3, [r6, #0]
 80049fa:	0608      	lsls	r0, r1, #24
 80049fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a00:	d402      	bmi.n	8004a08 <_printf_i+0xe8>
 8004a02:	0649      	lsls	r1, r1, #25
 8004a04:	bf48      	it	mi
 8004a06:	b2ad      	uxthmi	r5, r5
 8004a08:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a0a:	4853      	ldr	r0, [pc, #332]	@ (8004b58 <_printf_i+0x238>)
 8004a0c:	6033      	str	r3, [r6, #0]
 8004a0e:	bf14      	ite	ne
 8004a10:	230a      	movne	r3, #10
 8004a12:	2308      	moveq	r3, #8
 8004a14:	2100      	movs	r1, #0
 8004a16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a1a:	6866      	ldr	r6, [r4, #4]
 8004a1c:	60a6      	str	r6, [r4, #8]
 8004a1e:	2e00      	cmp	r6, #0
 8004a20:	bfa2      	ittt	ge
 8004a22:	6821      	ldrge	r1, [r4, #0]
 8004a24:	f021 0104 	bicge.w	r1, r1, #4
 8004a28:	6021      	strge	r1, [r4, #0]
 8004a2a:	b90d      	cbnz	r5, 8004a30 <_printf_i+0x110>
 8004a2c:	2e00      	cmp	r6, #0
 8004a2e:	d04b      	beq.n	8004ac8 <_printf_i+0x1a8>
 8004a30:	4616      	mov	r6, r2
 8004a32:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a36:	fb03 5711 	mls	r7, r3, r1, r5
 8004a3a:	5dc7      	ldrb	r7, [r0, r7]
 8004a3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a40:	462f      	mov	r7, r5
 8004a42:	42bb      	cmp	r3, r7
 8004a44:	460d      	mov	r5, r1
 8004a46:	d9f4      	bls.n	8004a32 <_printf_i+0x112>
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d10b      	bne.n	8004a64 <_printf_i+0x144>
 8004a4c:	6823      	ldr	r3, [r4, #0]
 8004a4e:	07df      	lsls	r7, r3, #31
 8004a50:	d508      	bpl.n	8004a64 <_printf_i+0x144>
 8004a52:	6923      	ldr	r3, [r4, #16]
 8004a54:	6861      	ldr	r1, [r4, #4]
 8004a56:	4299      	cmp	r1, r3
 8004a58:	bfde      	ittt	le
 8004a5a:	2330      	movle	r3, #48	@ 0x30
 8004a5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a60:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a64:	1b92      	subs	r2, r2, r6
 8004a66:	6122      	str	r2, [r4, #16]
 8004a68:	f8cd a000 	str.w	sl, [sp]
 8004a6c:	464b      	mov	r3, r9
 8004a6e:	aa03      	add	r2, sp, #12
 8004a70:	4621      	mov	r1, r4
 8004a72:	4640      	mov	r0, r8
 8004a74:	f7ff fee6 	bl	8004844 <_printf_common>
 8004a78:	3001      	adds	r0, #1
 8004a7a:	d14a      	bne.n	8004b12 <_printf_i+0x1f2>
 8004a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a80:	b004      	add	sp, #16
 8004a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	f043 0320 	orr.w	r3, r3, #32
 8004a8c:	6023      	str	r3, [r4, #0]
 8004a8e:	4833      	ldr	r0, [pc, #204]	@ (8004b5c <_printf_i+0x23c>)
 8004a90:	2778      	movs	r7, #120	@ 0x78
 8004a92:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	6831      	ldr	r1, [r6, #0]
 8004a9a:	061f      	lsls	r7, r3, #24
 8004a9c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004aa0:	d402      	bmi.n	8004aa8 <_printf_i+0x188>
 8004aa2:	065f      	lsls	r7, r3, #25
 8004aa4:	bf48      	it	mi
 8004aa6:	b2ad      	uxthmi	r5, r5
 8004aa8:	6031      	str	r1, [r6, #0]
 8004aaa:	07d9      	lsls	r1, r3, #31
 8004aac:	bf44      	itt	mi
 8004aae:	f043 0320 	orrmi.w	r3, r3, #32
 8004ab2:	6023      	strmi	r3, [r4, #0]
 8004ab4:	b11d      	cbz	r5, 8004abe <_printf_i+0x19e>
 8004ab6:	2310      	movs	r3, #16
 8004ab8:	e7ac      	b.n	8004a14 <_printf_i+0xf4>
 8004aba:	4827      	ldr	r0, [pc, #156]	@ (8004b58 <_printf_i+0x238>)
 8004abc:	e7e9      	b.n	8004a92 <_printf_i+0x172>
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	f023 0320 	bic.w	r3, r3, #32
 8004ac4:	6023      	str	r3, [r4, #0]
 8004ac6:	e7f6      	b.n	8004ab6 <_printf_i+0x196>
 8004ac8:	4616      	mov	r6, r2
 8004aca:	e7bd      	b.n	8004a48 <_printf_i+0x128>
 8004acc:	6833      	ldr	r3, [r6, #0]
 8004ace:	6825      	ldr	r5, [r4, #0]
 8004ad0:	6961      	ldr	r1, [r4, #20]
 8004ad2:	1d18      	adds	r0, r3, #4
 8004ad4:	6030      	str	r0, [r6, #0]
 8004ad6:	062e      	lsls	r6, r5, #24
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	d501      	bpl.n	8004ae0 <_printf_i+0x1c0>
 8004adc:	6019      	str	r1, [r3, #0]
 8004ade:	e002      	b.n	8004ae6 <_printf_i+0x1c6>
 8004ae0:	0668      	lsls	r0, r5, #25
 8004ae2:	d5fb      	bpl.n	8004adc <_printf_i+0x1bc>
 8004ae4:	8019      	strh	r1, [r3, #0]
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	6123      	str	r3, [r4, #16]
 8004aea:	4616      	mov	r6, r2
 8004aec:	e7bc      	b.n	8004a68 <_printf_i+0x148>
 8004aee:	6833      	ldr	r3, [r6, #0]
 8004af0:	1d1a      	adds	r2, r3, #4
 8004af2:	6032      	str	r2, [r6, #0]
 8004af4:	681e      	ldr	r6, [r3, #0]
 8004af6:	6862      	ldr	r2, [r4, #4]
 8004af8:	2100      	movs	r1, #0
 8004afa:	4630      	mov	r0, r6
 8004afc:	f7fb fb70 	bl	80001e0 <memchr>
 8004b00:	b108      	cbz	r0, 8004b06 <_printf_i+0x1e6>
 8004b02:	1b80      	subs	r0, r0, r6
 8004b04:	6060      	str	r0, [r4, #4]
 8004b06:	6863      	ldr	r3, [r4, #4]
 8004b08:	6123      	str	r3, [r4, #16]
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b10:	e7aa      	b.n	8004a68 <_printf_i+0x148>
 8004b12:	6923      	ldr	r3, [r4, #16]
 8004b14:	4632      	mov	r2, r6
 8004b16:	4649      	mov	r1, r9
 8004b18:	4640      	mov	r0, r8
 8004b1a:	47d0      	blx	sl
 8004b1c:	3001      	adds	r0, #1
 8004b1e:	d0ad      	beq.n	8004a7c <_printf_i+0x15c>
 8004b20:	6823      	ldr	r3, [r4, #0]
 8004b22:	079b      	lsls	r3, r3, #30
 8004b24:	d413      	bmi.n	8004b4e <_printf_i+0x22e>
 8004b26:	68e0      	ldr	r0, [r4, #12]
 8004b28:	9b03      	ldr	r3, [sp, #12]
 8004b2a:	4298      	cmp	r0, r3
 8004b2c:	bfb8      	it	lt
 8004b2e:	4618      	movlt	r0, r3
 8004b30:	e7a6      	b.n	8004a80 <_printf_i+0x160>
 8004b32:	2301      	movs	r3, #1
 8004b34:	4632      	mov	r2, r6
 8004b36:	4649      	mov	r1, r9
 8004b38:	4640      	mov	r0, r8
 8004b3a:	47d0      	blx	sl
 8004b3c:	3001      	adds	r0, #1
 8004b3e:	d09d      	beq.n	8004a7c <_printf_i+0x15c>
 8004b40:	3501      	adds	r5, #1
 8004b42:	68e3      	ldr	r3, [r4, #12]
 8004b44:	9903      	ldr	r1, [sp, #12]
 8004b46:	1a5b      	subs	r3, r3, r1
 8004b48:	42ab      	cmp	r3, r5
 8004b4a:	dcf2      	bgt.n	8004b32 <_printf_i+0x212>
 8004b4c:	e7eb      	b.n	8004b26 <_printf_i+0x206>
 8004b4e:	2500      	movs	r5, #0
 8004b50:	f104 0619 	add.w	r6, r4, #25
 8004b54:	e7f5      	b.n	8004b42 <_printf_i+0x222>
 8004b56:	bf00      	nop
 8004b58:	08004ca9 	.word	0x08004ca9
 8004b5c:	08004cba 	.word	0x08004cba

08004b60 <memmove>:
 8004b60:	4288      	cmp	r0, r1
 8004b62:	b510      	push	{r4, lr}
 8004b64:	eb01 0402 	add.w	r4, r1, r2
 8004b68:	d902      	bls.n	8004b70 <memmove+0x10>
 8004b6a:	4284      	cmp	r4, r0
 8004b6c:	4623      	mov	r3, r4
 8004b6e:	d807      	bhi.n	8004b80 <memmove+0x20>
 8004b70:	1e43      	subs	r3, r0, #1
 8004b72:	42a1      	cmp	r1, r4
 8004b74:	d008      	beq.n	8004b88 <memmove+0x28>
 8004b76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b7e:	e7f8      	b.n	8004b72 <memmove+0x12>
 8004b80:	4402      	add	r2, r0
 8004b82:	4601      	mov	r1, r0
 8004b84:	428a      	cmp	r2, r1
 8004b86:	d100      	bne.n	8004b8a <memmove+0x2a>
 8004b88:	bd10      	pop	{r4, pc}
 8004b8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b92:	e7f7      	b.n	8004b84 <memmove+0x24>

08004b94 <_sbrk_r>:
 8004b94:	b538      	push	{r3, r4, r5, lr}
 8004b96:	4d06      	ldr	r5, [pc, #24]	@ (8004bb0 <_sbrk_r+0x1c>)
 8004b98:	2300      	movs	r3, #0
 8004b9a:	4604      	mov	r4, r0
 8004b9c:	4608      	mov	r0, r1
 8004b9e:	602b      	str	r3, [r5, #0]
 8004ba0:	f7fb fdf4 	bl	800078c <_sbrk>
 8004ba4:	1c43      	adds	r3, r0, #1
 8004ba6:	d102      	bne.n	8004bae <_sbrk_r+0x1a>
 8004ba8:	682b      	ldr	r3, [r5, #0]
 8004baa:	b103      	cbz	r3, 8004bae <_sbrk_r+0x1a>
 8004bac:	6023      	str	r3, [r4, #0]
 8004bae:	bd38      	pop	{r3, r4, r5, pc}
 8004bb0:	200002a8 	.word	0x200002a8

08004bb4 <memcpy>:
 8004bb4:	440a      	add	r2, r1
 8004bb6:	4291      	cmp	r1, r2
 8004bb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bbc:	d100      	bne.n	8004bc0 <memcpy+0xc>
 8004bbe:	4770      	bx	lr
 8004bc0:	b510      	push	{r4, lr}
 8004bc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bca:	4291      	cmp	r1, r2
 8004bcc:	d1f9      	bne.n	8004bc2 <memcpy+0xe>
 8004bce:	bd10      	pop	{r4, pc}

08004bd0 <_realloc_r>:
 8004bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bd4:	4680      	mov	r8, r0
 8004bd6:	4615      	mov	r5, r2
 8004bd8:	460c      	mov	r4, r1
 8004bda:	b921      	cbnz	r1, 8004be6 <_realloc_r+0x16>
 8004bdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004be0:	4611      	mov	r1, r2
 8004be2:	f7ff bc4b 	b.w	800447c <_malloc_r>
 8004be6:	b92a      	cbnz	r2, 8004bf4 <_realloc_r+0x24>
 8004be8:	f7ff fbdc 	bl	80043a4 <_free_r>
 8004bec:	2400      	movs	r4, #0
 8004bee:	4620      	mov	r0, r4
 8004bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bf4:	f000 f81a 	bl	8004c2c <_malloc_usable_size_r>
 8004bf8:	4285      	cmp	r5, r0
 8004bfa:	4606      	mov	r6, r0
 8004bfc:	d802      	bhi.n	8004c04 <_realloc_r+0x34>
 8004bfe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004c02:	d8f4      	bhi.n	8004bee <_realloc_r+0x1e>
 8004c04:	4629      	mov	r1, r5
 8004c06:	4640      	mov	r0, r8
 8004c08:	f7ff fc38 	bl	800447c <_malloc_r>
 8004c0c:	4607      	mov	r7, r0
 8004c0e:	2800      	cmp	r0, #0
 8004c10:	d0ec      	beq.n	8004bec <_realloc_r+0x1c>
 8004c12:	42b5      	cmp	r5, r6
 8004c14:	462a      	mov	r2, r5
 8004c16:	4621      	mov	r1, r4
 8004c18:	bf28      	it	cs
 8004c1a:	4632      	movcs	r2, r6
 8004c1c:	f7ff ffca 	bl	8004bb4 <memcpy>
 8004c20:	4621      	mov	r1, r4
 8004c22:	4640      	mov	r0, r8
 8004c24:	f7ff fbbe 	bl	80043a4 <_free_r>
 8004c28:	463c      	mov	r4, r7
 8004c2a:	e7e0      	b.n	8004bee <_realloc_r+0x1e>

08004c2c <_malloc_usable_size_r>:
 8004c2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c30:	1f18      	subs	r0, r3, #4
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	bfbc      	itt	lt
 8004c36:	580b      	ldrlt	r3, [r1, r0]
 8004c38:	18c0      	addlt	r0, r0, r3
 8004c3a:	4770      	bx	lr

08004c3c <_init>:
 8004c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3e:	bf00      	nop
 8004c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c42:	bc08      	pop	{r3}
 8004c44:	469e      	mov	lr, r3
 8004c46:	4770      	bx	lr

08004c48 <_fini>:
 8004c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4a:	bf00      	nop
 8004c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c4e:	bc08      	pop	{r3}
 8004c50:	469e      	mov	lr, r3
 8004c52:	4770      	bx	lr
