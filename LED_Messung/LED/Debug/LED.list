
LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004aa4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004c44  08004c44  00005c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cc0  08004cc0  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004cc0  08004cc0  00005cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cc8  08004cc8  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cc8  08004cc8  00005cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ccc  08004ccc  00005ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004cd0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          00000258  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002b4  200002b4  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ac9d  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001814  00000000  00000000  00010d29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000808  00000000  00000000  00012540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000634  00000000  00000000  00012d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020880  00000000  00000000  0001337c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c90c  00000000  00000000  00033bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9359  00000000  00000000  00040508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000086  00000000  00000000  00109861  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002500  00000000  00000000  001098e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0010bde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004c2c 	.word	0x08004c2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004c2c 	.word	0x08004c2c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000294:	f000 faf8 	bl	8000888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000298:	f000 f836 	bl	8000308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029c:	f000 f936 	bl	800050c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002a0:	f000 f904 	bl	80004ac <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80002a4:	f000 f892 	bl	80003cc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 80002a8:	4812      	ldr	r0, [pc, #72]	@ (80002f4 <main+0x64>)
 80002aa:	f000 fd71 	bl	8000d90 <HAL_ADC_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //get adc value
	  	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80002ae:	f04f 31ff 	mov.w	r1, #4294967295
 80002b2:	4810      	ldr	r0, [pc, #64]	@ (80002f4 <main+0x64>)
 80002b4:	f000 fe82 	bl	8000fbc <HAL_ADC_PollForConversion>
	  	  value_adc = HAL_ADC_GetValue(&hadc1);
 80002b8:	480e      	ldr	r0, [pc, #56]	@ (80002f4 <main+0x64>)
 80002ba:	f000 ff81 	bl	80011c0 <HAL_ADC_GetValue>
 80002be:	4603      	mov	r3, r0
 80002c0:	4a0d      	ldr	r2, [pc, #52]	@ (80002f8 <main+0x68>)
 80002c2:	6013      	str	r3, [r2, #0]
	  	  sprintf(light, "/* %lu */ \r\n", value_adc);
 80002c4:	4b0c      	ldr	r3, [pc, #48]	@ (80002f8 <main+0x68>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	461a      	mov	r2, r3
 80002ca:	490c      	ldr	r1, [pc, #48]	@ (80002fc <main+0x6c>)
 80002cc:	480c      	ldr	r0, [pc, #48]	@ (8000300 <main+0x70>)
 80002ce:	f004 f80d 	bl	80042ec <siprintf>
	  	  HAL_UART_Transmit(&huart2, (uint8_t*)light, strlen(light), HAL_MAX_DELAY);
 80002d2:	480b      	ldr	r0, [pc, #44]	@ (8000300 <main+0x70>)
 80002d4:	f7ff ff84 	bl	80001e0 <strlen>
 80002d8:	4603      	mov	r3, r0
 80002da:	b29a      	uxth	r2, r3
 80002dc:	f04f 33ff 	mov.w	r3, #4294967295
 80002e0:	4907      	ldr	r1, [pc, #28]	@ (8000300 <main+0x70>)
 80002e2:	4808      	ldr	r0, [pc, #32]	@ (8000304 <main+0x74>)
 80002e4:	f003 fb88 	bl	80039f8 <HAL_UART_Transmit>
	  	  HAL_Delay(100);
 80002e8:	2064      	movs	r0, #100	@ 0x64
 80002ea:	f000 fb33 	bl	8000954 <HAL_Delay>
	  	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80002ee:	bf00      	nop
 80002f0:	e7dd      	b.n	80002ae <main+0x1e>
 80002f2:	bf00      	nop
 80002f4:	20000078 	.word	0x20000078
 80002f8:	20000150 	.word	0x20000150
 80002fc:	08004c44 	.word	0x08004c44
 8000300:	20000154 	.word	0x20000154
 8000304:	200000c8 	.word	0x200000c8

08000308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b0a6      	sub	sp, #152	@ 0x98
 800030c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000312:	2228      	movs	r2, #40	@ 0x28
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f004 f808 	bl	800432c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
 8000324:	605a      	str	r2, [r3, #4]
 8000326:	609a      	str	r2, [r3, #8]
 8000328:	60da      	str	r2, [r3, #12]
 800032a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2258      	movs	r2, #88	@ 0x58
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f003 fffa 	bl	800432c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000338:	2302      	movs	r3, #2
 800033a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800033c:	2301      	movs	r3, #1
 800033e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000340:	2310      	movs	r3, #16
 8000342:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000346:	2302      	movs	r3, #2
 8000348:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800034c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000350:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000354:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000358:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000362:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000366:	4618      	mov	r0, r3
 8000368:	f001 fe66 	bl	8002038 <HAL_RCC_OscConfig>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000372:	f000 f93f 	bl	80005f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000376:	230f      	movs	r3, #15
 8000378:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800037a:	2302      	movs	r3, #2
 800037c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000382:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000386:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000388:	2300      	movs	r3, #0
 800038a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800038c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000390:	2102      	movs	r1, #2
 8000392:	4618      	mov	r0, r3
 8000394:	f002 fea4 	bl	80030e0 <HAL_RCC_ClockConfig>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800039e:	f000 f929 	bl	80005f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 80003a2:	2382      	movs	r3, #130	@ 0x82
 80003a4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003a6:	2300      	movs	r3, #0
 80003a8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80003aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	4618      	mov	r0, r3
 80003b4:	f003 f8b4 	bl	8003520 <HAL_RCCEx_PeriphCLKConfig>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80003be:	f000 f919 	bl	80005f4 <Error_Handler>
  }
}
 80003c2:	bf00      	nop
 80003c4:	3798      	adds	r7, #152	@ 0x98
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
	...

080003cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b08a      	sub	sp, #40	@ 0x28
 80003d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003d2:	f107 031c 	add.w	r3, r7, #28
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	605a      	str	r2, [r3, #4]
 80003e6:	609a      	str	r2, [r3, #8]
 80003e8:	60da      	str	r2, [r3, #12]
 80003ea:	611a      	str	r2, [r3, #16]
 80003ec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003ee:	4b2e      	ldr	r3, [pc, #184]	@ (80004a8 <MX_ADC1_Init+0xdc>)
 80003f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80003f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003f6:	4b2c      	ldr	r3, [pc, #176]	@ (80004a8 <MX_ADC1_Init+0xdc>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003fc:	4b2a      	ldr	r3, [pc, #168]	@ (80004a8 <MX_ADC1_Init+0xdc>)
 80003fe:	2200      	movs	r2, #0
 8000400:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000402:	4b29      	ldr	r3, [pc, #164]	@ (80004a8 <MX_ADC1_Init+0xdc>)
 8000404:	2200      	movs	r2, #0
 8000406:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000408:	4b27      	ldr	r3, [pc, #156]	@ (80004a8 <MX_ADC1_Init+0xdc>)
 800040a:	2201      	movs	r2, #1
 800040c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800040e:	4b26      	ldr	r3, [pc, #152]	@ (80004a8 <MX_ADC1_Init+0xdc>)
 8000410:	2200      	movs	r2, #0
 8000412:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000416:	4b24      	ldr	r3, [pc, #144]	@ (80004a8 <MX_ADC1_Init+0xdc>)
 8000418:	2200      	movs	r2, #0
 800041a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800041c:	4b22      	ldr	r3, [pc, #136]	@ (80004a8 <MX_ADC1_Init+0xdc>)
 800041e:	2201      	movs	r2, #1
 8000420:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000422:	4b21      	ldr	r3, [pc, #132]	@ (80004a8 <MX_ADC1_Init+0xdc>)
 8000424:	2200      	movs	r2, #0
 8000426:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000428:	4b1f      	ldr	r3, [pc, #124]	@ (80004a8 <MX_ADC1_Init+0xdc>)
 800042a:	2201      	movs	r2, #1
 800042c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800042e:	4b1e      	ldr	r3, [pc, #120]	@ (80004a8 <MX_ADC1_Init+0xdc>)
 8000430:	2200      	movs	r2, #0
 8000432:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000436:	4b1c      	ldr	r3, [pc, #112]	@ (80004a8 <MX_ADC1_Init+0xdc>)
 8000438:	2204      	movs	r2, #4
 800043a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800043c:	4b1a      	ldr	r3, [pc, #104]	@ (80004a8 <MX_ADC1_Init+0xdc>)
 800043e:	2200      	movs	r2, #0
 8000440:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000442:	4b19      	ldr	r3, [pc, #100]	@ (80004a8 <MX_ADC1_Init+0xdc>)
 8000444:	2200      	movs	r2, #0
 8000446:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000448:	4817      	ldr	r0, [pc, #92]	@ (80004a8 <MX_ADC1_Init+0xdc>)
 800044a:	f000 faa7 	bl	800099c <HAL_ADC_Init>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000454:	f000 f8ce 	bl	80005f4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000458:	2300      	movs	r3, #0
 800045a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800045c:	f107 031c 	add.w	r3, r7, #28
 8000460:	4619      	mov	r1, r3
 8000462:	4811      	ldr	r0, [pc, #68]	@ (80004a8 <MX_ADC1_Init+0xdc>)
 8000464:	f001 f9a4 	bl	80017b0 <HAL_ADCEx_MultiModeConfigChannel>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800046e:	f000 f8c1 	bl	80005f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000472:	2301      	movs	r3, #1
 8000474:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000476:	2301      	movs	r3, #1
 8000478:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800047a:	2300      	movs	r3, #0
 800047c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800047e:	2300      	movs	r3, #0
 8000480:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000482:	2300      	movs	r3, #0
 8000484:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000486:	2300      	movs	r3, #0
 8000488:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	4619      	mov	r1, r3
 800048e:	4806      	ldr	r0, [pc, #24]	@ (80004a8 <MX_ADC1_Init+0xdc>)
 8000490:	f000 fea4 	bl	80011dc <HAL_ADC_ConfigChannel>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800049a:	f000 f8ab 	bl	80005f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800049e:	bf00      	nop
 80004a0:	3728      	adds	r7, #40	@ 0x28
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	20000078 	.word	0x20000078

080004ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004b0:	4b14      	ldr	r3, [pc, #80]	@ (8000504 <MX_USART2_UART_Init+0x58>)
 80004b2:	4a15      	ldr	r2, [pc, #84]	@ (8000508 <MX_USART2_UART_Init+0x5c>)
 80004b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004b6:	4b13      	ldr	r3, [pc, #76]	@ (8000504 <MX_USART2_UART_Init+0x58>)
 80004b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004be:	4b11      	ldr	r3, [pc, #68]	@ (8000504 <MX_USART2_UART_Init+0x58>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000504 <MX_USART2_UART_Init+0x58>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000504 <MX_USART2_UART_Init+0x58>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000504 <MX_USART2_UART_Init+0x58>)
 80004d2:	220c      	movs	r2, #12
 80004d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000504 <MX_USART2_UART_Init+0x58>)
 80004d8:	2200      	movs	r2, #0
 80004da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004dc:	4b09      	ldr	r3, [pc, #36]	@ (8000504 <MX_USART2_UART_Init+0x58>)
 80004de:	2200      	movs	r2, #0
 80004e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004e2:	4b08      	ldr	r3, [pc, #32]	@ (8000504 <MX_USART2_UART_Init+0x58>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004e8:	4b06      	ldr	r3, [pc, #24]	@ (8000504 <MX_USART2_UART_Init+0x58>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004ee:	4805      	ldr	r0, [pc, #20]	@ (8000504 <MX_USART2_UART_Init+0x58>)
 80004f0:	f003 fa34 	bl	800395c <HAL_UART_Init>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004fa:	f000 f87b 	bl	80005f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	200000c8 	.word	0x200000c8
 8000508:	40004400 	.word	0x40004400

0800050c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08a      	sub	sp, #40	@ 0x28
 8000510:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000512:	f107 0314 	add.w	r3, r7, #20
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]
 8000520:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000522:	4b32      	ldr	r3, [pc, #200]	@ (80005ec <MX_GPIO_Init+0xe0>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	4a31      	ldr	r2, [pc, #196]	@ (80005ec <MX_GPIO_Init+0xe0>)
 8000528:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800052c:	6153      	str	r3, [r2, #20]
 800052e:	4b2f      	ldr	r3, [pc, #188]	@ (80005ec <MX_GPIO_Init+0xe0>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000536:	613b      	str	r3, [r7, #16]
 8000538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800053a:	4b2c      	ldr	r3, [pc, #176]	@ (80005ec <MX_GPIO_Init+0xe0>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	4a2b      	ldr	r2, [pc, #172]	@ (80005ec <MX_GPIO_Init+0xe0>)
 8000540:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000544:	6153      	str	r3, [r2, #20]
 8000546:	4b29      	ldr	r3, [pc, #164]	@ (80005ec <MX_GPIO_Init+0xe0>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	4b26      	ldr	r3, [pc, #152]	@ (80005ec <MX_GPIO_Init+0xe0>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	4a25      	ldr	r2, [pc, #148]	@ (80005ec <MX_GPIO_Init+0xe0>)
 8000558:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800055c:	6153      	str	r3, [r2, #20]
 800055e:	4b23      	ldr	r3, [pc, #140]	@ (80005ec <MX_GPIO_Init+0xe0>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056a:	4b20      	ldr	r3, [pc, #128]	@ (80005ec <MX_GPIO_Init+0xe0>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	4a1f      	ldr	r2, [pc, #124]	@ (80005ec <MX_GPIO_Init+0xe0>)
 8000570:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000574:	6153      	str	r3, [r2, #20]
 8000576:	4b1d      	ldr	r3, [pc, #116]	@ (80005ec <MX_GPIO_Init+0xe0>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	2120      	movs	r1, #32
 8000586:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800058a:	f001 fd3d 	bl	8002008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800058e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000594:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4619      	mov	r1, r3
 80005a4:	4812      	ldr	r0, [pc, #72]	@ (80005f0 <MX_GPIO_Init+0xe4>)
 80005a6:	f001 fba5 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005aa:	2320      	movs	r3, #32
 80005ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ae:	2301      	movs	r3, #1
 80005b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b6:	2300      	movs	r3, #0
 80005b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	4619      	mov	r1, r3
 80005c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c4:	f001 fb96 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80005cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4619      	mov	r1, r3
 80005dc:	4804      	ldr	r0, [pc, #16]	@ (80005f0 <MX_GPIO_Init+0xe4>)
 80005de:	f001 fb89 	bl	8001cf4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005e2:	bf00      	nop
 80005e4:	3728      	adds	r7, #40	@ 0x28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40021000 	.word	0x40021000
 80005f0:	48000800 	.word	0x48000800

080005f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f8:	b672      	cpsid	i
}
 80005fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <Error_Handler+0x8>

08000600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000606:	4b0f      	ldr	r3, [pc, #60]	@ (8000644 <HAL_MspInit+0x44>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	4a0e      	ldr	r2, [pc, #56]	@ (8000644 <HAL_MspInit+0x44>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6193      	str	r3, [r2, #24]
 8000612:	4b0c      	ldr	r3, [pc, #48]	@ (8000644 <HAL_MspInit+0x44>)
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061e:	4b09      	ldr	r3, [pc, #36]	@ (8000644 <HAL_MspInit+0x44>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	4a08      	ldr	r2, [pc, #32]	@ (8000644 <HAL_MspInit+0x44>)
 8000624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000628:	61d3      	str	r3, [r2, #28]
 800062a:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <HAL_MspInit+0x44>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000636:	2007      	movs	r0, #7
 8000638:	f001 fb28 	bl	8001c8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40021000 	.word	0x40021000

08000648 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	@ 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000668:	d124      	bne.n	80006b4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800066a:	4b14      	ldr	r3, [pc, #80]	@ (80006bc <HAL_ADC_MspInit+0x74>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	4a13      	ldr	r2, [pc, #76]	@ (80006bc <HAL_ADC_MspInit+0x74>)
 8000670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000674:	6153      	str	r3, [r2, #20]
 8000676:	4b11      	ldr	r3, [pc, #68]	@ (80006bc <HAL_ADC_MspInit+0x74>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b0e      	ldr	r3, [pc, #56]	@ (80006bc <HAL_ADC_MspInit+0x74>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	4a0d      	ldr	r2, [pc, #52]	@ (80006bc <HAL_ADC_MspInit+0x74>)
 8000688:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800068c:	6153      	str	r3, [r2, #20]
 800068e:	4b0b      	ldr	r3, [pc, #44]	@ (80006bc <HAL_ADC_MspInit+0x74>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800069a:	2301      	movs	r3, #1
 800069c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800069e:	2303      	movs	r3, #3
 80006a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b0:	f001 fb20 	bl	8001cf4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80006b4:	bf00      	nop
 80006b6:	3728      	adds	r7, #40	@ 0x28
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40021000 	.word	0x40021000

080006c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	@ 0x28
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a17      	ldr	r2, [pc, #92]	@ (800073c <HAL_UART_MspInit+0x7c>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d128      	bne.n	8000734 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006e2:	4b17      	ldr	r3, [pc, #92]	@ (8000740 <HAL_UART_MspInit+0x80>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	4a16      	ldr	r2, [pc, #88]	@ (8000740 <HAL_UART_MspInit+0x80>)
 80006e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006ec:	61d3      	str	r3, [r2, #28]
 80006ee:	4b14      	ldr	r3, [pc, #80]	@ (8000740 <HAL_UART_MspInit+0x80>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <HAL_UART_MspInit+0x80>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	4a10      	ldr	r2, [pc, #64]	@ (8000740 <HAL_UART_MspInit+0x80>)
 8000700:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000704:	6153      	str	r3, [r2, #20]
 8000706:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <HAL_UART_MspInit+0x80>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000712:	230c      	movs	r3, #12
 8000714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000716:	2302      	movs	r3, #2
 8000718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071e:	2300      	movs	r3, #0
 8000720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000722:	2307      	movs	r3, #7
 8000724:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4619      	mov	r1, r3
 800072c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000730:	f001 fae0 	bl	8001cf4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000734:	bf00      	nop
 8000736:	3728      	adds	r7, #40	@ 0x28
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40004400 	.word	0x40004400
 8000740:	40021000 	.word	0x40021000

08000744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <NMI_Handler+0x4>

0800074c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <HardFault_Handler+0x4>

08000754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000758:	bf00      	nop
 800075a:	e7fd      	b.n	8000758 <MemManage_Handler+0x4>

0800075c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000760:	bf00      	nop
 8000762:	e7fd      	b.n	8000760 <BusFault_Handler+0x4>

08000764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000768:	bf00      	nop
 800076a:	e7fd      	b.n	8000768 <UsageFault_Handler+0x4>

0800076c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800079a:	f000 f8bb 	bl	8000914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
	...

080007a4 <_sbrk>:
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	4a14      	ldr	r2, [pc, #80]	@ (8000800 <_sbrk+0x5c>)
 80007ae:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <_sbrk+0x60>)
 80007b0:	1ad3      	subs	r3, r2, r3
 80007b2:	617b      	str	r3, [r7, #20]
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	4b13      	ldr	r3, [pc, #76]	@ (8000808 <_sbrk+0x64>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d102      	bne.n	80007c6 <_sbrk+0x22>
 80007c0:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <_sbrk+0x64>)
 80007c2:	4a12      	ldr	r2, [pc, #72]	@ (800080c <_sbrk+0x68>)
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	4b10      	ldr	r3, [pc, #64]	@ (8000808 <_sbrk+0x64>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4413      	add	r3, r2
 80007ce:	693a      	ldr	r2, [r7, #16]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d207      	bcs.n	80007e4 <_sbrk+0x40>
 80007d4:	f003 fdb2 	bl	800433c <__errno>
 80007d8:	4603      	mov	r3, r0
 80007da:	220c      	movs	r2, #12
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	f04f 33ff 	mov.w	r3, #4294967295
 80007e2:	e009      	b.n	80007f8 <_sbrk+0x54>
 80007e4:	4b08      	ldr	r3, [pc, #32]	@ (8000808 <_sbrk+0x64>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	4b07      	ldr	r3, [pc, #28]	@ (8000808 <_sbrk+0x64>)
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4413      	add	r3, r2
 80007f2:	4a05      	ldr	r2, [pc, #20]	@ (8000808 <_sbrk+0x64>)
 80007f4:	6013      	str	r3, [r2, #0]
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	4618      	mov	r0, r3
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20010000 	.word	0x20010000
 8000804:	00000400 	.word	0x00000400
 8000808:	20000164 	.word	0x20000164
 800080c:	200002b8 	.word	0x200002b8

08000810 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000814:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <SystemInit+0x20>)
 8000816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800081a:	4a05      	ldr	r2, [pc, #20]	@ (8000830 <SystemInit+0x20>)
 800081c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000820:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <Reset_Handler>:
 8000834:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800086c <LoopForever+0x2>
 8000838:	f7ff ffea 	bl	8000810 <SystemInit>
 800083c:	480c      	ldr	r0, [pc, #48]	@ (8000870 <LoopForever+0x6>)
 800083e:	490d      	ldr	r1, [pc, #52]	@ (8000874 <LoopForever+0xa>)
 8000840:	4a0d      	ldr	r2, [pc, #52]	@ (8000878 <LoopForever+0xe>)
 8000842:	2300      	movs	r3, #0
 8000844:	e002      	b.n	800084c <LoopCopyDataInit>

08000846 <CopyDataInit>:
 8000846:	58d4      	ldr	r4, [r2, r3]
 8000848:	50c4      	str	r4, [r0, r3]
 800084a:	3304      	adds	r3, #4

0800084c <LoopCopyDataInit>:
 800084c:	18c4      	adds	r4, r0, r3
 800084e:	428c      	cmp	r4, r1
 8000850:	d3f9      	bcc.n	8000846 <CopyDataInit>
 8000852:	4a0a      	ldr	r2, [pc, #40]	@ (800087c <LoopForever+0x12>)
 8000854:	4c0a      	ldr	r4, [pc, #40]	@ (8000880 <LoopForever+0x16>)
 8000856:	2300      	movs	r3, #0
 8000858:	e001      	b.n	800085e <LoopFillZerobss>

0800085a <FillZerobss>:
 800085a:	6013      	str	r3, [r2, #0]
 800085c:	3204      	adds	r2, #4

0800085e <LoopFillZerobss>:
 800085e:	42a2      	cmp	r2, r4
 8000860:	d3fb      	bcc.n	800085a <FillZerobss>
 8000862:	f003 fd71 	bl	8004348 <__libc_init_array>
 8000866:	f7ff fd13 	bl	8000290 <main>

0800086a <LoopForever>:
 800086a:	e7fe      	b.n	800086a <LoopForever>
 800086c:	20010000 	.word	0x20010000
 8000870:	20000000 	.word	0x20000000
 8000874:	2000005c 	.word	0x2000005c
 8000878:	08004cd0 	.word	0x08004cd0
 800087c:	2000005c 	.word	0x2000005c
 8000880:	200002b4 	.word	0x200002b4

08000884 <ADC1_2_IRQHandler>:
 8000884:	e7fe      	b.n	8000884 <ADC1_2_IRQHandler>
	...

08000888 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800088c:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <HAL_Init+0x28>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a07      	ldr	r2, [pc, #28]	@ (80008b0 <HAL_Init+0x28>)
 8000892:	f043 0310 	orr.w	r3, r3, #16
 8000896:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000898:	2003      	movs	r0, #3
 800089a:	f001 f9f7 	bl	8001c8c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800089e:	2000      	movs	r0, #0
 80008a0:	f000 f808 	bl	80008b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a4:	f7ff feac 	bl	8000600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40022000 	.word	0x40022000

080008b4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008bc:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <HAL_InitTick+0x54>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4b12      	ldr	r3, [pc, #72]	@ (800090c <HAL_InitTick+0x58>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	4619      	mov	r1, r3
 80008c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f001 fa01 	bl	8001cda <HAL_SYSTICK_Config>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	e00e      	b.n	8000900 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2b0f      	cmp	r3, #15
 80008e6:	d80a      	bhi.n	80008fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e8:	2200      	movs	r2, #0
 80008ea:	6879      	ldr	r1, [r7, #4]
 80008ec:	f04f 30ff 	mov.w	r0, #4294967295
 80008f0:	f001 f9d7 	bl	8001ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f4:	4a06      	ldr	r2, [pc, #24]	@ (8000910 <HAL_InitTick+0x5c>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008fa:	2300      	movs	r3, #0
 80008fc:	e000      	b.n	8000900 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
}
 8000900:	4618      	mov	r0, r3
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000000 	.word	0x20000000
 800090c:	20000008 	.word	0x20000008
 8000910:	20000004 	.word	0x20000004

08000914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000918:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <HAL_IncTick+0x20>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <HAL_IncTick+0x24>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4413      	add	r3, r2
 8000924:	4a04      	ldr	r2, [pc, #16]	@ (8000938 <HAL_IncTick+0x24>)
 8000926:	6013      	str	r3, [r2, #0]
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	20000008 	.word	0x20000008
 8000938:	20000168 	.word	0x20000168

0800093c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000940:	4b03      	ldr	r3, [pc, #12]	@ (8000950 <HAL_GetTick+0x14>)
 8000942:	681b      	ldr	r3, [r3, #0]
}
 8000944:	4618      	mov	r0, r3
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	20000168 	.word	0x20000168

08000954 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800095c:	f7ff ffee 	bl	800093c <HAL_GetTick>
 8000960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800096c:	d005      	beq.n	800097a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800096e:	4b0a      	ldr	r3, [pc, #40]	@ (8000998 <HAL_Delay+0x44>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	461a      	mov	r2, r3
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	4413      	add	r3, r2
 8000978:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800097a:	bf00      	nop
 800097c:	f7ff ffde 	bl	800093c <HAL_GetTick>
 8000980:	4602      	mov	r2, r0
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	68fa      	ldr	r2, [r7, #12]
 8000988:	429a      	cmp	r2, r3
 800098a:	d8f7      	bhi.n	800097c <HAL_Delay+0x28>
  {
  }
}
 800098c:	bf00      	nop
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000008 	.word	0x20000008

0800099c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b09a      	sub	sp, #104	@ 0x68
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009a4:	2300      	movs	r3, #0
 80009a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80009aa:	2300      	movs	r3, #0
 80009ac:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d101      	bne.n	80009bc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80009b8:	2301      	movs	r3, #1
 80009ba:	e1e3      	b.n	8000d84 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	691b      	ldr	r3, [r3, #16]
 80009c0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c6:	f003 0310 	and.w	r3, r3, #16
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d176      	bne.n	8000abc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d152      	bne.n	8000a7c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2200      	movs	r2, #0
 80009da:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2200      	movs	r2, #0
 80009e6:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2200      	movs	r2, #0
 80009ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff fe29 	bl	8000648 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d13b      	bne.n	8000a7c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f001 f829 	bl	8001a5c <ADC_Disable>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a14:	f003 0310 	and.w	r3, r3, #16
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d12f      	bne.n	8000a7c <HAL_ADC_Init+0xe0>
 8000a1c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d12b      	bne.n	8000a7c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a28:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000a2c:	f023 0302 	bic.w	r3, r3, #2
 8000a30:	f043 0202 	orr.w	r2, r3, #2
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	689a      	ldr	r2, [r3, #8]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000a46:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	689a      	ldr	r2, [r3, #8]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000a56:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000a58:	4b92      	ldr	r3, [pc, #584]	@ (8000ca4 <HAL_ADC_Init+0x308>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a92      	ldr	r2, [pc, #584]	@ (8000ca8 <HAL_ADC_Init+0x30c>)
 8000a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a62:	0c9a      	lsrs	r2, r3, #18
 8000a64:	4613      	mov	r3, r2
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	4413      	add	r3, r2
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a6e:	e002      	b.n	8000a76 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	3b01      	subs	r3, #1
 8000a74:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d1f9      	bne.n	8000a70 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d007      	beq.n	8000a9a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000a94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000a98:	d110      	bne.n	8000abc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9e:	f023 0312 	bic.w	r3, r3, #18
 8000aa2:	f043 0210 	orr.w	r2, r3, #16
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aae:	f043 0201 	orr.w	r2, r3, #1
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac0:	f003 0310 	and.w	r3, r3, #16
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	f040 8150 	bne.w	8000d6a <HAL_ADC_Init+0x3ce>
 8000aca:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	f040 814b 	bne.w	8000d6a <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f040 8143 	bne.w	8000d6a <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000aec:	f043 0202 	orr.w	r2, r3, #2
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000afc:	d004      	beq.n	8000b08 <HAL_ADC_Init+0x16c>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a6a      	ldr	r2, [pc, #424]	@ (8000cac <HAL_ADC_Init+0x310>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d101      	bne.n	8000b0c <HAL_ADC_Init+0x170>
 8000b08:	4b69      	ldr	r3, [pc, #420]	@ (8000cb0 <HAL_ADC_Init+0x314>)
 8000b0a:	e000      	b.n	8000b0e <HAL_ADC_Init+0x172>
 8000b0c:	4b69      	ldr	r3, [pc, #420]	@ (8000cb4 <HAL_ADC_Init+0x318>)
 8000b0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b18:	d102      	bne.n	8000b20 <HAL_ADC_Init+0x184>
 8000b1a:	4b64      	ldr	r3, [pc, #400]	@ (8000cac <HAL_ADC_Init+0x310>)
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	e01a      	b.n	8000b56 <HAL_ADC_Init+0x1ba>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a61      	ldr	r2, [pc, #388]	@ (8000cac <HAL_ADC_Init+0x310>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d103      	bne.n	8000b32 <HAL_ADC_Init+0x196>
 8000b2a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	e011      	b.n	8000b56 <HAL_ADC_Init+0x1ba>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a60      	ldr	r2, [pc, #384]	@ (8000cb8 <HAL_ADC_Init+0x31c>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d102      	bne.n	8000b42 <HAL_ADC_Init+0x1a6>
 8000b3c:	4b5f      	ldr	r3, [pc, #380]	@ (8000cbc <HAL_ADC_Init+0x320>)
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	e009      	b.n	8000b56 <HAL_ADC_Init+0x1ba>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a5d      	ldr	r2, [pc, #372]	@ (8000cbc <HAL_ADC_Init+0x320>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d102      	bne.n	8000b52 <HAL_ADC_Init+0x1b6>
 8000b4c:	4b5a      	ldr	r3, [pc, #360]	@ (8000cb8 <HAL_ADC_Init+0x31c>)
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	e001      	b.n	8000b56 <HAL_ADC_Init+0x1ba>
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	f003 0303 	and.w	r3, r3, #3
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d108      	bne.n	8000b76 <HAL_ADC_Init+0x1da>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d101      	bne.n	8000b76 <HAL_ADC_Init+0x1da>
 8000b72:	2301      	movs	r3, #1
 8000b74:	e000      	b.n	8000b78 <HAL_ADC_Init+0x1dc>
 8000b76:	2300      	movs	r3, #0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d11c      	bne.n	8000bb6 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b7c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d010      	beq.n	8000ba4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	f003 0303 	and.w	r3, r3, #3
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d107      	bne.n	8000b9e <HAL_ADC_Init+0x202>
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d101      	bne.n	8000b9e <HAL_ADC_Init+0x202>
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e000      	b.n	8000ba0 <HAL_ADC_Init+0x204>
 8000b9e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d108      	bne.n	8000bb6 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000ba4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	431a      	orrs	r2, r3
 8000bb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000bb4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	7e5b      	ldrb	r3, [r3, #25]
 8000bba:	035b      	lsls	r3, r3, #13
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000bc0:	2a01      	cmp	r2, #1
 8000bc2:	d002      	beq.n	8000bca <HAL_ADC_Init+0x22e>
 8000bc4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000bc8:	e000      	b.n	8000bcc <HAL_ADC_Init+0x230>
 8000bca:	2200      	movs	r2, #0
 8000bcc:	431a      	orrs	r2, r3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	431a      	orrs	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d11b      	bne.n	8000c22 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	7e5b      	ldrb	r3, [r3, #25]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d109      	bne.n	8000c06 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	045a      	lsls	r2, r3, #17
 8000bfa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c02:	663b      	str	r3, [r7, #96]	@ 0x60
 8000c04:	e00d      	b.n	8000c22 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000c0e:	f043 0220 	orr.w	r2, r3, #32
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1a:	f043 0201 	orr.w	r2, r3, #1
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d054      	beq.n	8000cd4 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a22      	ldr	r2, [pc, #136]	@ (8000cb8 <HAL_ADC_Init+0x31c>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d004      	beq.n	8000c3e <HAL_ADC_Init+0x2a2>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a20      	ldr	r2, [pc, #128]	@ (8000cbc <HAL_ADC_Init+0x320>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d140      	bne.n	8000cc0 <HAL_ADC_Init+0x324>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c42:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8000c46:	d02a      	beq.n	8000c9e <HAL_ADC_Init+0x302>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c50:	d022      	beq.n	8000c98 <HAL_ADC_Init+0x2fc>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c56:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8000c5a:	d01a      	beq.n	8000c92 <HAL_ADC_Init+0x2f6>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c60:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8000c64:	d012      	beq.n	8000c8c <HAL_ADC_Init+0x2f0>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c6a:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8000c6e:	d00a      	beq.n	8000c86 <HAL_ADC_Init+0x2ea>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c74:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8000c78:	d002      	beq.n	8000c80 <HAL_ADC_Init+0x2e4>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c7e:	e023      	b.n	8000cc8 <HAL_ADC_Init+0x32c>
 8000c80:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000c84:	e020      	b.n	8000cc8 <HAL_ADC_Init+0x32c>
 8000c86:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000c8a:	e01d      	b.n	8000cc8 <HAL_ADC_Init+0x32c>
 8000c8c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000c90:	e01a      	b.n	8000cc8 <HAL_ADC_Init+0x32c>
 8000c92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c96:	e017      	b.n	8000cc8 <HAL_ADC_Init+0x32c>
 8000c98:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8000c9c:	e014      	b.n	8000cc8 <HAL_ADC_Init+0x32c>
 8000c9e:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000ca2:	e011      	b.n	8000cc8 <HAL_ADC_Init+0x32c>
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	431bde83 	.word	0x431bde83
 8000cac:	50000100 	.word	0x50000100
 8000cb0:	50000300 	.word	0x50000300
 8000cb4:	50000700 	.word	0x50000700
 8000cb8:	50000400 	.word	0x50000400
 8000cbc:	50000500 	.word	0x50000500
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cc4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	f003 030c 	and.w	r3, r3, #12
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d114      	bne.n	8000d0c <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	6812      	ldr	r2, [r2, #0]
 8000cec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000cf0:	f023 0302 	bic.w	r3, r3, #2
 8000cf4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	7e1b      	ldrb	r3, [r3, #24]
 8000cfa:	039a      	lsls	r2, r3, #14
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	4313      	orrs	r3, r2
 8000d06:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	68da      	ldr	r2, [r3, #12]
 8000d12:	4b1e      	ldr	r3, [pc, #120]	@ (8000d8c <HAL_ADC_Init+0x3f0>)
 8000d14:	4013      	ands	r3, r2
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	6812      	ldr	r2, [r2, #0]
 8000d1a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000d1c:	430b      	orrs	r3, r1
 8000d1e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	691b      	ldr	r3, [r3, #16]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d10c      	bne.n	8000d42 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	f023 010f 	bic.w	r1, r3, #15
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	1e5a      	subs	r2, r3, #1
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d40:	e007      	b.n	8000d52 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f022 020f 	bic.w	r2, r2, #15
 8000d50:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2200      	movs	r2, #0
 8000d56:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5c:	f023 0303 	bic.w	r3, r3, #3
 8000d60:	f043 0201 	orr.w	r2, r3, #1
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d68:	e00a      	b.n	8000d80 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6e:	f023 0312 	bic.w	r3, r3, #18
 8000d72:	f043 0210 	orr.w	r2, r3, #16
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000d80:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3768      	adds	r7, #104	@ 0x68
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	fff0c007 	.word	0xfff0c007

08000d90 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	f003 0304 	and.w	r3, r3, #4
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f040 80f9 	bne.w	8000f9e <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d101      	bne.n	8000dba <HAL_ADC_Start+0x2a>
 8000db6:	2302      	movs	r3, #2
 8000db8:	e0f4      	b.n	8000fa4 <HAL_ADC_Start+0x214>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f000 fde6 	bl	8001994 <ADC_Enable>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f040 80e0 	bne.w	8000f94 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000ddc:	f023 0301 	bic.w	r3, r3, #1
 8000de0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000df0:	d004      	beq.n	8000dfc <HAL_ADC_Start+0x6c>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a6d      	ldr	r2, [pc, #436]	@ (8000fac <HAL_ADC_Start+0x21c>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d106      	bne.n	8000e0a <HAL_ADC_Start+0x7a>
 8000dfc:	4b6c      	ldr	r3, [pc, #432]	@ (8000fb0 <HAL_ADC_Start+0x220>)
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	f003 031f 	and.w	r3, r3, #31
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d010      	beq.n	8000e2a <HAL_ADC_Start+0x9a>
 8000e08:	e005      	b.n	8000e16 <HAL_ADC_Start+0x86>
 8000e0a:	4b6a      	ldr	r3, [pc, #424]	@ (8000fb4 <HAL_ADC_Start+0x224>)
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	f003 031f 	and.w	r3, r3, #31
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d009      	beq.n	8000e2a <HAL_ADC_Start+0x9a>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e1e:	d004      	beq.n	8000e2a <HAL_ADC_Start+0x9a>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a64      	ldr	r2, [pc, #400]	@ (8000fb8 <HAL_ADC_Start+0x228>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d115      	bne.n	8000e56 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d036      	beq.n	8000eb2 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e48:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000e4c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000e54:	e02d      	b.n	8000eb2 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e6a:	d004      	beq.n	8000e76 <HAL_ADC_Start+0xe6>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a4e      	ldr	r2, [pc, #312]	@ (8000fac <HAL_ADC_Start+0x21c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d10a      	bne.n	8000e8c <HAL_ADC_Start+0xfc>
 8000e76:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	bf14      	ite	ne
 8000e84:	2301      	movne	r3, #1
 8000e86:	2300      	moveq	r3, #0
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	e008      	b.n	8000e9e <HAL_ADC_Start+0x10e>
 8000e8c:	4b4a      	ldr	r3, [pc, #296]	@ (8000fb8 <HAL_ADC_Start+0x228>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	bf14      	ite	ne
 8000e98:	2301      	movne	r3, #1
 8000e9a:	2300      	moveq	r3, #0
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d007      	beq.n	8000eb2 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000eaa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000eba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000ebe:	d106      	bne.n	8000ece <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec4:	f023 0206 	bic.w	r2, r3, #6
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	645a      	str	r2, [r3, #68]	@ 0x44
 8000ecc:	e002      	b.n	8000ed4 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	221c      	movs	r2, #28
 8000ee2:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000eec:	d004      	beq.n	8000ef8 <HAL_ADC_Start+0x168>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a2e      	ldr	r2, [pc, #184]	@ (8000fac <HAL_ADC_Start+0x21c>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d106      	bne.n	8000f06 <HAL_ADC_Start+0x176>
 8000ef8:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb0 <HAL_ADC_Start+0x220>)
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	f003 031f 	and.w	r3, r3, #31
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d03e      	beq.n	8000f82 <HAL_ADC_Start+0x1f2>
 8000f04:	e005      	b.n	8000f12 <HAL_ADC_Start+0x182>
 8000f06:	4b2b      	ldr	r3, [pc, #172]	@ (8000fb4 <HAL_ADC_Start+0x224>)
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	f003 031f 	and.w	r3, r3, #31
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d037      	beq.n	8000f82 <HAL_ADC_Start+0x1f2>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f1a:	d004      	beq.n	8000f26 <HAL_ADC_Start+0x196>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a22      	ldr	r2, [pc, #136]	@ (8000fac <HAL_ADC_Start+0x21c>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d106      	bne.n	8000f34 <HAL_ADC_Start+0x1a4>
 8000f26:	4b22      	ldr	r3, [pc, #136]	@ (8000fb0 <HAL_ADC_Start+0x220>)
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f003 031f 	and.w	r3, r3, #31
 8000f2e:	2b05      	cmp	r3, #5
 8000f30:	d027      	beq.n	8000f82 <HAL_ADC_Start+0x1f2>
 8000f32:	e005      	b.n	8000f40 <HAL_ADC_Start+0x1b0>
 8000f34:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb4 <HAL_ADC_Start+0x224>)
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	f003 031f 	and.w	r3, r3, #31
 8000f3c:	2b05      	cmp	r3, #5
 8000f3e:	d020      	beq.n	8000f82 <HAL_ADC_Start+0x1f2>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f48:	d004      	beq.n	8000f54 <HAL_ADC_Start+0x1c4>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a17      	ldr	r2, [pc, #92]	@ (8000fac <HAL_ADC_Start+0x21c>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d106      	bne.n	8000f62 <HAL_ADC_Start+0x1d2>
 8000f54:	4b16      	ldr	r3, [pc, #88]	@ (8000fb0 <HAL_ADC_Start+0x220>)
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	f003 031f 	and.w	r3, r3, #31
 8000f5c:	2b09      	cmp	r3, #9
 8000f5e:	d010      	beq.n	8000f82 <HAL_ADC_Start+0x1f2>
 8000f60:	e005      	b.n	8000f6e <HAL_ADC_Start+0x1de>
 8000f62:	4b14      	ldr	r3, [pc, #80]	@ (8000fb4 <HAL_ADC_Start+0x224>)
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	f003 031f 	and.w	r3, r3, #31
 8000f6a:	2b09      	cmp	r3, #9
 8000f6c:	d009      	beq.n	8000f82 <HAL_ADC_Start+0x1f2>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f76:	d004      	beq.n	8000f82 <HAL_ADC_Start+0x1f2>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0e      	ldr	r2, [pc, #56]	@ (8000fb8 <HAL_ADC_Start+0x228>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d10f      	bne.n	8000fa2 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	689a      	ldr	r2, [r3, #8]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f042 0204 	orr.w	r2, r2, #4
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	e006      	b.n	8000fa2 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8000f9c:	e001      	b.n	8000fa2 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	50000100 	.word	0x50000100
 8000fb0:	50000300 	.word	0x50000300
 8000fb4:	50000700 	.word	0x50000700
 8000fb8:	50000400 	.word	0x50000400

08000fbc <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	2b08      	cmp	r3, #8
 8000fd0:	d102      	bne.n	8000fd8 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000fd2:	2308      	movs	r3, #8
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	e03a      	b.n	800104e <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000fe0:	d004      	beq.n	8000fec <HAL_ADC_PollForConversion+0x30>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a72      	ldr	r2, [pc, #456]	@ (80011b0 <HAL_ADC_PollForConversion+0x1f4>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d101      	bne.n	8000ff0 <HAL_ADC_PollForConversion+0x34>
 8000fec:	4b71      	ldr	r3, [pc, #452]	@ (80011b4 <HAL_ADC_PollForConversion+0x1f8>)
 8000fee:	e000      	b.n	8000ff2 <HAL_ADC_PollForConversion+0x36>
 8000ff0:	4b71      	ldr	r3, [pc, #452]	@ (80011b8 <HAL_ADC_PollForConversion+0x1fc>)
 8000ff2:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f003 031f 	and.w	r3, r3, #31
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d112      	bne.n	8001026 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b01      	cmp	r3, #1
 800100c:	d11d      	bne.n	800104a <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001012:	f043 0220 	orr.w	r2, r3, #32
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e0bf      	b.n	80011a6 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d00b      	beq.n	800104a <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001036:	f043 0220 	orr.w	r2, r3, #32
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e0ad      	b.n	80011a6 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800104a:	230c      	movs	r3, #12
 800104c:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001056:	d004      	beq.n	8001062 <HAL_ADC_PollForConversion+0xa6>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a54      	ldr	r2, [pc, #336]	@ (80011b0 <HAL_ADC_PollForConversion+0x1f4>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d106      	bne.n	8001070 <HAL_ADC_PollForConversion+0xb4>
 8001062:	4b54      	ldr	r3, [pc, #336]	@ (80011b4 <HAL_ADC_PollForConversion+0x1f8>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f003 031f 	and.w	r3, r3, #31
 800106a:	2b00      	cmp	r3, #0
 800106c:	d010      	beq.n	8001090 <HAL_ADC_PollForConversion+0xd4>
 800106e:	e005      	b.n	800107c <HAL_ADC_PollForConversion+0xc0>
 8001070:	4b51      	ldr	r3, [pc, #324]	@ (80011b8 <HAL_ADC_PollForConversion+0x1fc>)
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	f003 031f 	and.w	r3, r3, #31
 8001078:	2b00      	cmp	r3, #0
 800107a:	d009      	beq.n	8001090 <HAL_ADC_PollForConversion+0xd4>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001084:	d004      	beq.n	8001090 <HAL_ADC_PollForConversion+0xd4>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a4c      	ldr	r2, [pc, #304]	@ (80011bc <HAL_ADC_PollForConversion+0x200>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d104      	bne.n	800109a <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	e00f      	b.n	80010ba <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010a2:	d004      	beq.n	80010ae <HAL_ADC_PollForConversion+0xf2>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a41      	ldr	r2, [pc, #260]	@ (80011b0 <HAL_ADC_PollForConversion+0x1f4>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d102      	bne.n	80010b4 <HAL_ADC_PollForConversion+0xf8>
 80010ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80010b2:	e000      	b.n	80010b6 <HAL_ADC_PollForConversion+0xfa>
 80010b4:	4b41      	ldr	r3, [pc, #260]	@ (80011bc <HAL_ADC_PollForConversion+0x200>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80010ba:	f7ff fc3f 	bl	800093c <HAL_GetTick>
 80010be:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80010c0:	e021      	b.n	8001106 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c8:	d01d      	beq.n	8001106 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d007      	beq.n	80010e0 <HAL_ADC_PollForConversion+0x124>
 80010d0:	f7ff fc34 	bl	800093c <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d212      	bcs.n	8001106 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	4013      	ands	r3, r2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d10b      	bne.n	8001106 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f2:	f043 0204 	orr.w	r2, r3, #4
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e04f      	b.n	80011a6 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	4013      	ands	r3, r2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d0d6      	beq.n	80010c2 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001118:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800112a:	2b00      	cmp	r3, #0
 800112c:	d131      	bne.n	8001192 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001134:	2b00      	cmp	r3, #0
 8001136:	d12c      	bne.n	8001192 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0308 	and.w	r3, r3, #8
 8001142:	2b08      	cmp	r3, #8
 8001144:	d125      	bne.n	8001192 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	2b00      	cmp	r3, #0
 8001152:	d112      	bne.n	800117a <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001158:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001164:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d112      	bne.n	8001192 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001170:	f043 0201 	orr.w	r2, r3, #1
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	641a      	str	r2, [r3, #64]	@ 0x40
 8001178:	e00b      	b.n	8001192 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117e:	f043 0220 	orr.w	r2, r3, #32
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800118a:	f043 0201 	orr.w	r2, r3, #1
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d103      	bne.n	80011a4 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	697a      	ldr	r2, [r7, #20]
 80011a2:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	50000100 	.word	0x50000100
 80011b4:	50000300 	.word	0x50000300
 80011b8:	50000700 	.word	0x50000700
 80011bc:	50000400 	.word	0x50000400

080011c0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011dc:	b480      	push	{r7}
 80011de:	b09b      	sub	sp, #108	@ 0x6c
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011e6:	2300      	movs	r3, #0
 80011e8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d101      	bne.n	80011fe <HAL_ADC_ConfigChannel+0x22>
 80011fa:	2302      	movs	r3, #2
 80011fc:	e2c8      	b.n	8001790 <HAL_ADC_ConfigChannel+0x5b4>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2201      	movs	r2, #1
 8001202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	2b00      	cmp	r3, #0
 8001212:	f040 82ac 	bne.w	800176e <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b04      	cmp	r3, #4
 800121c:	d81c      	bhi.n	8001258 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	4613      	mov	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4413      	add	r3, r2
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	461a      	mov	r2, r3
 8001232:	231f      	movs	r3, #31
 8001234:	4093      	lsls	r3, r2
 8001236:	43db      	mvns	r3, r3
 8001238:	4019      	ands	r1, r3
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	4613      	mov	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	4413      	add	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	fa00 f203 	lsl.w	r2, r0, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	430a      	orrs	r2, r1
 8001254:	631a      	str	r2, [r3, #48]	@ 0x30
 8001256:	e063      	b.n	8001320 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b09      	cmp	r3, #9
 800125e:	d81e      	bhi.n	800129e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	4413      	add	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	3b1e      	subs	r3, #30
 8001274:	221f      	movs	r2, #31
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	4019      	ands	r1, r3
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	6818      	ldr	r0, [r3, #0]
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	4613      	mov	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	4413      	add	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	3b1e      	subs	r3, #30
 8001290:	fa00 f203 	lsl.w	r2, r0, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	430a      	orrs	r2, r1
 800129a:	635a      	str	r2, [r3, #52]	@ 0x34
 800129c:	e040      	b.n	8001320 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b0e      	cmp	r3, #14
 80012a4:	d81e      	bhi.n	80012e4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	4613      	mov	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4413      	add	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	3b3c      	subs	r3, #60	@ 0x3c
 80012ba:	221f      	movs	r2, #31
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	4019      	ands	r1, r3
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	6818      	ldr	r0, [r3, #0]
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	4613      	mov	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4413      	add	r3, r2
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	3b3c      	subs	r3, #60	@ 0x3c
 80012d6:	fa00 f203 	lsl.w	r2, r0, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	430a      	orrs	r2, r1
 80012e0:	639a      	str	r2, [r3, #56]	@ 0x38
 80012e2:	e01d      	b.n	8001320 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	4613      	mov	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	3b5a      	subs	r3, #90	@ 0x5a
 80012f8:	221f      	movs	r2, #31
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	4019      	ands	r1, r3
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	6818      	ldr	r0, [r3, #0]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	4613      	mov	r3, r2
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	4413      	add	r3, r2
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	3b5a      	subs	r3, #90	@ 0x5a
 8001314:	fa00 f203 	lsl.w	r2, r0, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	430a      	orrs	r2, r1
 800131e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
 800132a:	2b00      	cmp	r3, #0
 800132c:	f040 80e5 	bne.w	80014fa <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b09      	cmp	r3, #9
 8001336:	d91c      	bls.n	8001372 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6999      	ldr	r1, [r3, #24]
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4613      	mov	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	3b1e      	subs	r3, #30
 800134a:	2207      	movs	r2, #7
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	4019      	ands	r1, r3
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	6898      	ldr	r0, [r3, #8]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4613      	mov	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4413      	add	r3, r2
 8001362:	3b1e      	subs	r3, #30
 8001364:	fa00 f203 	lsl.w	r2, r0, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	430a      	orrs	r2, r1
 800136e:	619a      	str	r2, [r3, #24]
 8001370:	e019      	b.n	80013a6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6959      	ldr	r1, [r3, #20]
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4613      	mov	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4413      	add	r3, r2
 8001382:	2207      	movs	r2, #7
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	4019      	ands	r1, r3
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	6898      	ldr	r0, [r3, #8]
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4613      	mov	r3, r2
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	4413      	add	r3, r2
 800139a:	fa00 f203 	lsl.w	r2, r0, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	695a      	ldr	r2, [r3, #20]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	08db      	lsrs	r3, r3, #3
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	2b03      	cmp	r3, #3
 80013c6:	d84f      	bhi.n	8001468 <HAL_ADC_ConfigChannel+0x28c>
 80013c8:	a201      	add	r2, pc, #4	@ (adr r2, 80013d0 <HAL_ADC_ConfigChannel+0x1f4>)
 80013ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ce:	bf00      	nop
 80013d0:	080013e1 	.word	0x080013e1
 80013d4:	08001403 	.word	0x08001403
 80013d8:	08001425 	.word	0x08001425
 80013dc:	08001447 	.word	0x08001447
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013e6:	4b99      	ldr	r3, [pc, #612]	@ (800164c <HAL_ADC_ConfigChannel+0x470>)
 80013e8:	4013      	ands	r3, r2
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	6812      	ldr	r2, [r2, #0]
 80013ee:	0691      	lsls	r1, r2, #26
 80013f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80013f2:	430a      	orrs	r2, r1
 80013f4:	431a      	orrs	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80013fe:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001400:	e07b      	b.n	80014fa <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001408:	4b90      	ldr	r3, [pc, #576]	@ (800164c <HAL_ADC_ConfigChannel+0x470>)
 800140a:	4013      	ands	r3, r2
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	6812      	ldr	r2, [r2, #0]
 8001410:	0691      	lsls	r1, r2, #26
 8001412:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001414:	430a      	orrs	r2, r1
 8001416:	431a      	orrs	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001420:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001422:	e06a      	b.n	80014fa <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800142a:	4b88      	ldr	r3, [pc, #544]	@ (800164c <HAL_ADC_ConfigChannel+0x470>)
 800142c:	4013      	ands	r3, r2
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	0691      	lsls	r1, r2, #26
 8001434:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001436:	430a      	orrs	r2, r1
 8001438:	431a      	orrs	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001442:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001444:	e059      	b.n	80014fa <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800144c:	4b7f      	ldr	r3, [pc, #508]	@ (800164c <HAL_ADC_ConfigChannel+0x470>)
 800144e:	4013      	ands	r3, r2
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	0691      	lsls	r1, r2, #26
 8001456:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001458:	430a      	orrs	r2, r1
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001464:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001466:	e048      	b.n	80014fa <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800146e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	069b      	lsls	r3, r3, #26
 8001478:	429a      	cmp	r2, r3
 800147a:	d107      	bne.n	800148c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800148a:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001492:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	069b      	lsls	r3, r3, #26
 800149c:	429a      	cmp	r2, r3
 800149e:	d107      	bne.n	80014b0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80014ae:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80014b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	069b      	lsls	r3, r3, #26
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d107      	bne.n	80014d4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80014d2:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80014da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	069b      	lsls	r3, r3, #26
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d107      	bne.n	80014f8 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80014f6:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80014f8:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	2b01      	cmp	r3, #1
 8001506:	d108      	bne.n	800151a <HAL_ADC_ConfigChannel+0x33e>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b01      	cmp	r3, #1
 8001514:	d101      	bne.n	800151a <HAL_ADC_ConfigChannel+0x33e>
 8001516:	2301      	movs	r3, #1
 8001518:	e000      	b.n	800151c <HAL_ADC_ConfigChannel+0x340>
 800151a:	2300      	movs	r3, #0
 800151c:	2b00      	cmp	r3, #0
 800151e:	f040 8131 	bne.w	8001784 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d00f      	beq.n	800154a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2201      	movs	r2, #1
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43da      	mvns	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	400a      	ands	r2, r1
 8001544:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001548:	e049      	b.n	80015de <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2201      	movs	r2, #1
 8001558:	409a      	lsls	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b09      	cmp	r3, #9
 800156a:	d91c      	bls.n	80015a6 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6999      	ldr	r1, [r3, #24]
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	4613      	mov	r3, r2
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	4413      	add	r3, r2
 800157c:	3b1b      	subs	r3, #27
 800157e:	2207      	movs	r2, #7
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	4019      	ands	r1, r3
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	6898      	ldr	r0, [r3, #8]
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4613      	mov	r3, r2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	4413      	add	r3, r2
 8001596:	3b1b      	subs	r3, #27
 8001598:	fa00 f203 	lsl.w	r2, r0, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	619a      	str	r2, [r3, #24]
 80015a4:	e01b      	b.n	80015de <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6959      	ldr	r1, [r3, #20]
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	1c5a      	adds	r2, r3, #1
 80015b2:	4613      	mov	r3, r2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4413      	add	r3, r2
 80015b8:	2207      	movs	r2, #7
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43db      	mvns	r3, r3
 80015c0:	4019      	ands	r1, r3
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	6898      	ldr	r0, [r3, #8]
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	1c5a      	adds	r2, r3, #1
 80015cc:	4613      	mov	r3, r2
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	4413      	add	r3, r2
 80015d2:	fa00 f203 	lsl.w	r2, r0, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015e6:	d004      	beq.n	80015f2 <HAL_ADC_ConfigChannel+0x416>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a18      	ldr	r2, [pc, #96]	@ (8001650 <HAL_ADC_ConfigChannel+0x474>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d101      	bne.n	80015f6 <HAL_ADC_ConfigChannel+0x41a>
 80015f2:	4b18      	ldr	r3, [pc, #96]	@ (8001654 <HAL_ADC_ConfigChannel+0x478>)
 80015f4:	e000      	b.n	80015f8 <HAL_ADC_ConfigChannel+0x41c>
 80015f6:	4b18      	ldr	r3, [pc, #96]	@ (8001658 <HAL_ADC_ConfigChannel+0x47c>)
 80015f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b10      	cmp	r3, #16
 8001600:	d105      	bne.n	800160e <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001602:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800160a:	2b00      	cmp	r3, #0
 800160c:	d015      	beq.n	800163a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001612:	2b11      	cmp	r3, #17
 8001614:	d105      	bne.n	8001622 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001616:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00b      	beq.n	800163a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001626:	2b12      	cmp	r3, #18
 8001628:	f040 80ac 	bne.w	8001784 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800162c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001634:	2b00      	cmp	r3, #0
 8001636:	f040 80a5 	bne.w	8001784 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001642:	d10b      	bne.n	800165c <HAL_ADC_ConfigChannel+0x480>
 8001644:	4b02      	ldr	r3, [pc, #8]	@ (8001650 <HAL_ADC_ConfigChannel+0x474>)
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	e023      	b.n	8001692 <HAL_ADC_ConfigChannel+0x4b6>
 800164a:	bf00      	nop
 800164c:	83fff000 	.word	0x83fff000
 8001650:	50000100 	.word	0x50000100
 8001654:	50000300 	.word	0x50000300
 8001658:	50000700 	.word	0x50000700
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a4e      	ldr	r2, [pc, #312]	@ (800179c <HAL_ADC_ConfigChannel+0x5c0>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d103      	bne.n	800166e <HAL_ADC_ConfigChannel+0x492>
 8001666:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	e011      	b.n	8001692 <HAL_ADC_ConfigChannel+0x4b6>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a4b      	ldr	r2, [pc, #300]	@ (80017a0 <HAL_ADC_ConfigChannel+0x5c4>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d102      	bne.n	800167e <HAL_ADC_ConfigChannel+0x4a2>
 8001678:	4b4a      	ldr	r3, [pc, #296]	@ (80017a4 <HAL_ADC_ConfigChannel+0x5c8>)
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	e009      	b.n	8001692 <HAL_ADC_ConfigChannel+0x4b6>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a48      	ldr	r2, [pc, #288]	@ (80017a4 <HAL_ADC_ConfigChannel+0x5c8>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d102      	bne.n	800168e <HAL_ADC_ConfigChannel+0x4b2>
 8001688:	4b45      	ldr	r3, [pc, #276]	@ (80017a0 <HAL_ADC_ConfigChannel+0x5c4>)
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	e001      	b.n	8001692 <HAL_ADC_ConfigChannel+0x4b6>
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	2b01      	cmp	r3, #1
 800169e:	d108      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x4d6>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d101      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x4d6>
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <HAL_ADC_ConfigChannel+0x4d8>
 80016b2:	2300      	movs	r3, #0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d150      	bne.n	800175a <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016b8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d010      	beq.n	80016e0 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 0303 	and.w	r3, r3, #3
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d107      	bne.n	80016da <HAL_ADC_ConfigChannel+0x4fe>
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d101      	bne.n	80016da <HAL_ADC_ConfigChannel+0x4fe>
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <HAL_ADC_ConfigChannel+0x500>
 80016da:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d13c      	bne.n	800175a <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b10      	cmp	r3, #16
 80016e6:	d11d      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x548>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016f0:	d118      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80016f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80016fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016fc:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016fe:	4b2a      	ldr	r3, [pc, #168]	@ (80017a8 <HAL_ADC_ConfigChannel+0x5cc>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a2a      	ldr	r2, [pc, #168]	@ (80017ac <HAL_ADC_ConfigChannel+0x5d0>)
 8001704:	fba2 2303 	umull	r2, r3, r2, r3
 8001708:	0c9a      	lsrs	r2, r3, #18
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001714:	e002      	b.n	800171c <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	3b01      	subs	r3, #1
 800171a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f9      	bne.n	8001716 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001722:	e02e      	b.n	8001782 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b11      	cmp	r3, #17
 800172a:	d10b      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x568>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001734:	d106      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001736:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800173e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001740:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001742:	e01e      	b.n	8001782 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b12      	cmp	r3, #18
 800174a:	d11a      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800174c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001754:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001756:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001758:	e013      	b.n	8001782 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175e:	f043 0220 	orr.w	r2, r3, #32
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800176c:	e00a      	b.n	8001784 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001772:	f043 0220 	orr.w	r2, r3, #32
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001780:	e000      	b.n	8001784 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001782:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800178c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001790:	4618      	mov	r0, r3
 8001792:	376c      	adds	r7, #108	@ 0x6c
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	50000100 	.word	0x50000100
 80017a0:	50000400 	.word	0x50000400
 80017a4:	50000500 	.word	0x50000500
 80017a8:	20000000 	.word	0x20000000
 80017ac:	431bde83 	.word	0x431bde83

080017b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b099      	sub	sp, #100	@ 0x64
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017c8:	d102      	bne.n	80017d0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80017ca:	4b6d      	ldr	r3, [pc, #436]	@ (8001980 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	e01a      	b.n	8001806 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a6a      	ldr	r2, [pc, #424]	@ (8001980 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d103      	bne.n	80017e2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80017da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	e011      	b.n	8001806 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a67      	ldr	r2, [pc, #412]	@ (8001984 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d102      	bne.n	80017f2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80017ec:	4b66      	ldr	r3, [pc, #408]	@ (8001988 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	e009      	b.n	8001806 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a64      	ldr	r2, [pc, #400]	@ (8001988 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d102      	bne.n	8001802 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80017fc:	4b61      	ldr	r3, [pc, #388]	@ (8001984 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	e001      	b.n	8001806 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d101      	bne.n	8001810 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e0b0      	b.n	8001972 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001816:	2b01      	cmp	r3, #1
 8001818:	d101      	bne.n	800181e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800181a:	2302      	movs	r3, #2
 800181c:	e0a9      	b.n	8001972 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	f040 808d 	bne.w	8001950 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 0304 	and.w	r3, r3, #4
 800183e:	2b00      	cmp	r3, #0
 8001840:	f040 8086 	bne.w	8001950 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800184c:	d004      	beq.n	8001858 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a4b      	ldr	r2, [pc, #300]	@ (8001980 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d101      	bne.n	800185c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001858:	4b4c      	ldr	r3, [pc, #304]	@ (800198c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800185a:	e000      	b.n	800185e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800185c:	4b4c      	ldr	r3, [pc, #304]	@ (8001990 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800185e:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d040      	beq.n	80018ea <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001868:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	6859      	ldr	r1, [r3, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800187a:	035b      	lsls	r3, r3, #13
 800187c:	430b      	orrs	r3, r1
 800187e:	431a      	orrs	r2, r3
 8001880:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001882:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	2b01      	cmp	r3, #1
 8001890:	d108      	bne.n	80018a4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b01      	cmp	r3, #1
 800189e:	d101      	bne.n	80018a4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80018a0:	2301      	movs	r3, #1
 80018a2:	e000      	b.n	80018a6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80018a4:	2300      	movs	r3, #0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d15c      	bne.n	8001964 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d107      	bne.n	80018c6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d101      	bne.n	80018c6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80018c6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d14b      	bne.n	8001964 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80018cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80018d4:	f023 030f 	bic.w	r3, r3, #15
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	6811      	ldr	r1, [r2, #0]
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	6892      	ldr	r2, [r2, #8]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	431a      	orrs	r2, r3
 80018e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018e6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80018e8:	e03c      	b.n	8001964 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80018ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018f4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	2b01      	cmp	r3, #1
 8001902:	d108      	bne.n	8001916 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b01      	cmp	r3, #1
 8001910:	d101      	bne.n	8001916 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001912:	2301      	movs	r3, #1
 8001914:	e000      	b.n	8001918 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001916:	2300      	movs	r3, #0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d123      	bne.n	8001964 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	2b01      	cmp	r3, #1
 8001926:	d107      	bne.n	8001938 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b01      	cmp	r3, #1
 8001932:	d101      	bne.n	8001938 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001934:	2301      	movs	r3, #1
 8001936:	e000      	b.n	800193a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001938:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800193a:	2b00      	cmp	r3, #0
 800193c:	d112      	bne.n	8001964 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800193e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001946:	f023 030f 	bic.w	r3, r3, #15
 800194a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800194c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800194e:	e009      	b.n	8001964 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001954:	f043 0220 	orr.w	r2, r3, #32
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001962:	e000      	b.n	8001966 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001964:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800196e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8001972:	4618      	mov	r0, r3
 8001974:	3764      	adds	r7, #100	@ 0x64
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	50000100 	.word	0x50000100
 8001984:	50000400 	.word	0x50000400
 8001988:	50000500 	.word	0x50000500
 800198c:	50000300 	.word	0x50000300
 8001990:	50000700 	.word	0x50000700

08001994 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d108      	bne.n	80019c0 <ADC_Enable+0x2c>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d101      	bne.n	80019c0 <ADC_Enable+0x2c>
 80019bc:	2301      	movs	r3, #1
 80019be:	e000      	b.n	80019c2 <ADC_Enable+0x2e>
 80019c0:	2300      	movs	r3, #0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d143      	bne.n	8001a4e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	4b22      	ldr	r3, [pc, #136]	@ (8001a58 <ADC_Enable+0xc4>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d00d      	beq.n	80019f0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d8:	f043 0210 	orr.w	r2, r3, #16
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e4:	f043 0201 	orr.w	r2, r3, #1
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e02f      	b.n	8001a50 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0201 	orr.w	r2, r2, #1
 80019fe:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001a00:	f7fe ff9c 	bl	800093c <HAL_GetTick>
 8001a04:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a06:	e01b      	b.n	8001a40 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a08:	f7fe ff98 	bl	800093c <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d914      	bls.n	8001a40 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d00d      	beq.n	8001a40 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a28:	f043 0210 	orr.w	r2, r3, #16
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a34:	f043 0201 	orr.w	r2, r3, #1
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e007      	b.n	8001a50 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d1dc      	bne.n	8001a08 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	8000003f 	.word	0x8000003f

08001a5c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d108      	bne.n	8001a88 <ADC_Disable+0x2c>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d101      	bne.n	8001a88 <ADC_Disable+0x2c>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <ADC_Disable+0x2e>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d047      	beq.n	8001b1e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 030d 	and.w	r3, r3, #13
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d10f      	bne.n	8001abc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 0202 	orr.w	r2, r2, #2
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001ab4:	f7fe ff42 	bl	800093c <HAL_GetTick>
 8001ab8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001aba:	e029      	b.n	8001b10 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac0:	f043 0210 	orr.w	r2, r3, #16
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001acc:	f043 0201 	orr.w	r2, r3, #1
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e023      	b.n	8001b20 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ad8:	f7fe ff30 	bl	800093c <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d914      	bls.n	8001b10 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d10d      	bne.n	8001b10 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af8:	f043 0210 	orr.w	r2, r3, #16
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b04:	f043 0201 	orr.w	r2, r3, #1
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e007      	b.n	8001b20 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d0dc      	beq.n	8001ad8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b38:	4b0c      	ldr	r3, [pc, #48]	@ (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b44:	4013      	ands	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5a:	4a04      	ldr	r2, [pc, #16]	@ (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	60d3      	str	r3, [r2, #12]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b74:	4b04      	ldr	r3, [pc, #16]	@ (8001b88 <__NVIC_GetPriorityGrouping+0x18>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	f003 0307 	and.w	r3, r3, #7
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	6039      	str	r1, [r7, #0]
 8001b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	db0a      	blt.n	8001bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	490c      	ldr	r1, [pc, #48]	@ (8001bd8 <__NVIC_SetPriority+0x4c>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	0112      	lsls	r2, r2, #4
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	440b      	add	r3, r1
 8001bb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb4:	e00a      	b.n	8001bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4908      	ldr	r1, [pc, #32]	@ (8001bdc <__NVIC_SetPriority+0x50>)
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	3b04      	subs	r3, #4
 8001bc4:	0112      	lsls	r2, r2, #4
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	440b      	add	r3, r1
 8001bca:	761a      	strb	r2, [r3, #24]
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000e100 	.word	0xe000e100
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b089      	sub	sp, #36	@ 0x24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f1c3 0307 	rsb	r3, r3, #7
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	bf28      	it	cs
 8001bfe:	2304      	movcs	r3, #4
 8001c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3304      	adds	r3, #4
 8001c06:	2b06      	cmp	r3, #6
 8001c08:	d902      	bls.n	8001c10 <NVIC_EncodePriority+0x30>
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3b03      	subs	r3, #3
 8001c0e:	e000      	b.n	8001c12 <NVIC_EncodePriority+0x32>
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	f04f 32ff 	mov.w	r2, #4294967295
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	401a      	ands	r2, r3
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c28:	f04f 31ff 	mov.w	r1, #4294967295
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c32:	43d9      	mvns	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c38:	4313      	orrs	r3, r2
         );
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3724      	adds	r7, #36	@ 0x24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c58:	d301      	bcc.n	8001c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e00f      	b.n	8001c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c88 <SysTick_Config+0x40>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c66:	210f      	movs	r1, #15
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6c:	f7ff ff8e 	bl	8001b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c70:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <SysTick_Config+0x40>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c76:	4b04      	ldr	r3, [pc, #16]	@ (8001c88 <SysTick_Config+0x40>)
 8001c78:	2207      	movs	r2, #7
 8001c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	e000e010 	.word	0xe000e010

08001c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff ff47 	bl	8001b28 <__NVIC_SetPriorityGrouping>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b086      	sub	sp, #24
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
 8001cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb4:	f7ff ff5c 	bl	8001b70 <__NVIC_GetPriorityGrouping>
 8001cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	6978      	ldr	r0, [r7, #20]
 8001cc0:	f7ff ff8e 	bl	8001be0 <NVIC_EncodePriority>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cca:	4611      	mov	r1, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff5d 	bl	8001b8c <__NVIC_SetPriority>
}
 8001cd2:	bf00      	nop
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff ffb0 	bl	8001c48 <SysTick_Config>
 8001ce8:	4603      	mov	r3, r0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b087      	sub	sp, #28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d02:	e160      	b.n	8001fc6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	2101      	movs	r1, #1
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d10:	4013      	ands	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 8152 	beq.w	8001fc0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d005      	beq.n	8001d34 <HAL_GPIO_Init+0x40>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d130      	bne.n	8001d96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	2203      	movs	r2, #3
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	4013      	ands	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	091b      	lsrs	r3, r3, #4
 8001d80:	f003 0201 	and.w	r2, r3, #1
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	d017      	beq.n	8001dd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	2203      	movs	r2, #3
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	4013      	ands	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d123      	bne.n	8001e26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	08da      	lsrs	r2, r3, #3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3208      	adds	r2, #8
 8001de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	220f      	movs	r2, #15
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	691a      	ldr	r2, [r3, #16]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	08da      	lsrs	r2, r3, #3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3208      	adds	r2, #8
 8001e20:	6939      	ldr	r1, [r7, #16]
 8001e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	2203      	movs	r2, #3
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 0203 	and.w	r2, r3, #3
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 80ac 	beq.w	8001fc0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e68:	4b5e      	ldr	r3, [pc, #376]	@ (8001fe4 <HAL_GPIO_Init+0x2f0>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	4a5d      	ldr	r2, [pc, #372]	@ (8001fe4 <HAL_GPIO_Init+0x2f0>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6193      	str	r3, [r2, #24]
 8001e74:	4b5b      	ldr	r3, [pc, #364]	@ (8001fe4 <HAL_GPIO_Init+0x2f0>)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e80:	4a59      	ldr	r2, [pc, #356]	@ (8001fe8 <HAL_GPIO_Init+0x2f4>)
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	089b      	lsrs	r3, r3, #2
 8001e86:	3302      	adds	r3, #2
 8001e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	220f      	movs	r2, #15
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001eaa:	d025      	beq.n	8001ef8 <HAL_GPIO_Init+0x204>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a4f      	ldr	r2, [pc, #316]	@ (8001fec <HAL_GPIO_Init+0x2f8>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d01f      	beq.n	8001ef4 <HAL_GPIO_Init+0x200>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a4e      	ldr	r2, [pc, #312]	@ (8001ff0 <HAL_GPIO_Init+0x2fc>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d019      	beq.n	8001ef0 <HAL_GPIO_Init+0x1fc>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a4d      	ldr	r2, [pc, #308]	@ (8001ff4 <HAL_GPIO_Init+0x300>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d013      	beq.n	8001eec <HAL_GPIO_Init+0x1f8>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a4c      	ldr	r2, [pc, #304]	@ (8001ff8 <HAL_GPIO_Init+0x304>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d00d      	beq.n	8001ee8 <HAL_GPIO_Init+0x1f4>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a4b      	ldr	r2, [pc, #300]	@ (8001ffc <HAL_GPIO_Init+0x308>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d007      	beq.n	8001ee4 <HAL_GPIO_Init+0x1f0>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a4a      	ldr	r2, [pc, #296]	@ (8002000 <HAL_GPIO_Init+0x30c>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d101      	bne.n	8001ee0 <HAL_GPIO_Init+0x1ec>
 8001edc:	2306      	movs	r3, #6
 8001ede:	e00c      	b.n	8001efa <HAL_GPIO_Init+0x206>
 8001ee0:	2307      	movs	r3, #7
 8001ee2:	e00a      	b.n	8001efa <HAL_GPIO_Init+0x206>
 8001ee4:	2305      	movs	r3, #5
 8001ee6:	e008      	b.n	8001efa <HAL_GPIO_Init+0x206>
 8001ee8:	2304      	movs	r3, #4
 8001eea:	e006      	b.n	8001efa <HAL_GPIO_Init+0x206>
 8001eec:	2303      	movs	r3, #3
 8001eee:	e004      	b.n	8001efa <HAL_GPIO_Init+0x206>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e002      	b.n	8001efa <HAL_GPIO_Init+0x206>
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <HAL_GPIO_Init+0x206>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	f002 0203 	and.w	r2, r2, #3
 8001f00:	0092      	lsls	r2, r2, #2
 8001f02:	4093      	lsls	r3, r2
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f0a:	4937      	ldr	r1, [pc, #220]	@ (8001fe8 <HAL_GPIO_Init+0x2f4>)
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	089b      	lsrs	r3, r3, #2
 8001f10:	3302      	adds	r3, #2
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f18:	4b3a      	ldr	r3, [pc, #232]	@ (8002004 <HAL_GPIO_Init+0x310>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4013      	ands	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f3c:	4a31      	ldr	r2, [pc, #196]	@ (8002004 <HAL_GPIO_Init+0x310>)
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f42:	4b30      	ldr	r3, [pc, #192]	@ (8002004 <HAL_GPIO_Init+0x310>)
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f66:	4a27      	ldr	r2, [pc, #156]	@ (8002004 <HAL_GPIO_Init+0x310>)
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f6c:	4b25      	ldr	r3, [pc, #148]	@ (8002004 <HAL_GPIO_Init+0x310>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f90:	4a1c      	ldr	r2, [pc, #112]	@ (8002004 <HAL_GPIO_Init+0x310>)
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f96:	4b1b      	ldr	r3, [pc, #108]	@ (8002004 <HAL_GPIO_Init+0x310>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001fba:	4a12      	ldr	r2, [pc, #72]	@ (8002004 <HAL_GPIO_Init+0x310>)
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f47f ae97 	bne.w	8001d04 <HAL_GPIO_Init+0x10>
  }
}
 8001fd6:	bf00      	nop
 8001fd8:	bf00      	nop
 8001fda:	371c      	adds	r7, #28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40010000 	.word	0x40010000
 8001fec:	48000400 	.word	0x48000400
 8001ff0:	48000800 	.word	0x48000800
 8001ff4:	48000c00 	.word	0x48000c00
 8001ff8:	48001000 	.word	0x48001000
 8001ffc:	48001400 	.word	0x48001400
 8002000:	48001800 	.word	0x48001800
 8002004:	40010400 	.word	0x40010400

08002008 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	460b      	mov	r3, r1
 8002012:	807b      	strh	r3, [r7, #2]
 8002014:	4613      	mov	r3, r2
 8002016:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002018:	787b      	ldrb	r3, [r7, #1]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800201e:	887a      	ldrh	r2, [r7, #2]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002024:	e002      	b.n	800202c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002026:	887a      	ldrh	r2, [r7, #2]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800203e:	af00      	add	r7, sp, #0
 8002040:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002044:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002048:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800204a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800204e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d102      	bne.n	800205e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	f001 b83a 	b.w	80030d2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800205e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002062:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 816f 	beq.w	8002352 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002074:	4bb5      	ldr	r3, [pc, #724]	@ (800234c <HAL_RCC_OscConfig+0x314>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 030c 	and.w	r3, r3, #12
 800207c:	2b04      	cmp	r3, #4
 800207e:	d00c      	beq.n	800209a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002080:	4bb2      	ldr	r3, [pc, #712]	@ (800234c <HAL_RCC_OscConfig+0x314>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 030c 	and.w	r3, r3, #12
 8002088:	2b08      	cmp	r3, #8
 800208a:	d15c      	bne.n	8002146 <HAL_RCC_OscConfig+0x10e>
 800208c:	4baf      	ldr	r3, [pc, #700]	@ (800234c <HAL_RCC_OscConfig+0x314>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002094:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002098:	d155      	bne.n	8002146 <HAL_RCC_OscConfig+0x10e>
 800209a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800209e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80020a6:	fa93 f3a3 	rbit	r3, r3
 80020aa:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020ae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b2:	fab3 f383 	clz	r3, r3
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	095b      	lsrs	r3, r3, #5
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d102      	bne.n	80020cc <HAL_RCC_OscConfig+0x94>
 80020c6:	4ba1      	ldr	r3, [pc, #644]	@ (800234c <HAL_RCC_OscConfig+0x314>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	e015      	b.n	80020f8 <HAL_RCC_OscConfig+0xc0>
 80020cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020d0:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80020d8:	fa93 f3a3 	rbit	r3, r3
 80020dc:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80020e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020e4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80020e8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80020ec:	fa93 f3a3 	rbit	r3, r3
 80020f0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80020f4:	4b95      	ldr	r3, [pc, #596]	@ (800234c <HAL_RCC_OscConfig+0x314>)
 80020f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80020fc:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8002100:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8002104:	fa92 f2a2 	rbit	r2, r2
 8002108:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 800210c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002110:	fab2 f282 	clz	r2, r2
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	f042 0220 	orr.w	r2, r2, #32
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	f002 021f 	and.w	r2, r2, #31
 8002120:	2101      	movs	r1, #1
 8002122:	fa01 f202 	lsl.w	r2, r1, r2
 8002126:	4013      	ands	r3, r2
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 8111 	beq.w	8002350 <HAL_RCC_OscConfig+0x318>
 800212e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002132:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	f040 8108 	bne.w	8002350 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	f000 bfc6 	b.w	80030d2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002146:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800214a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002156:	d106      	bne.n	8002166 <HAL_RCC_OscConfig+0x12e>
 8002158:	4b7c      	ldr	r3, [pc, #496]	@ (800234c <HAL_RCC_OscConfig+0x314>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a7b      	ldr	r2, [pc, #492]	@ (800234c <HAL_RCC_OscConfig+0x314>)
 800215e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	e036      	b.n	80021d4 <HAL_RCC_OscConfig+0x19c>
 8002166:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800216a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10c      	bne.n	8002190 <HAL_RCC_OscConfig+0x158>
 8002176:	4b75      	ldr	r3, [pc, #468]	@ (800234c <HAL_RCC_OscConfig+0x314>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a74      	ldr	r2, [pc, #464]	@ (800234c <HAL_RCC_OscConfig+0x314>)
 800217c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	4b72      	ldr	r3, [pc, #456]	@ (800234c <HAL_RCC_OscConfig+0x314>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a71      	ldr	r2, [pc, #452]	@ (800234c <HAL_RCC_OscConfig+0x314>)
 8002188:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	e021      	b.n	80021d4 <HAL_RCC_OscConfig+0x19c>
 8002190:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002194:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021a0:	d10c      	bne.n	80021bc <HAL_RCC_OscConfig+0x184>
 80021a2:	4b6a      	ldr	r3, [pc, #424]	@ (800234c <HAL_RCC_OscConfig+0x314>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a69      	ldr	r2, [pc, #420]	@ (800234c <HAL_RCC_OscConfig+0x314>)
 80021a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	4b67      	ldr	r3, [pc, #412]	@ (800234c <HAL_RCC_OscConfig+0x314>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a66      	ldr	r2, [pc, #408]	@ (800234c <HAL_RCC_OscConfig+0x314>)
 80021b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	e00b      	b.n	80021d4 <HAL_RCC_OscConfig+0x19c>
 80021bc:	4b63      	ldr	r3, [pc, #396]	@ (800234c <HAL_RCC_OscConfig+0x314>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a62      	ldr	r2, [pc, #392]	@ (800234c <HAL_RCC_OscConfig+0x314>)
 80021c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021c6:	6013      	str	r3, [r2, #0]
 80021c8:	4b60      	ldr	r3, [pc, #384]	@ (800234c <HAL_RCC_OscConfig+0x314>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a5f      	ldr	r2, [pc, #380]	@ (800234c <HAL_RCC_OscConfig+0x314>)
 80021ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021d2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021d8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d059      	beq.n	8002298 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7fe fbaa 	bl	800093c <HAL_GetTick>
 80021e8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ec:	e00a      	b.n	8002204 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ee:	f7fe fba5 	bl	800093c <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b64      	cmp	r3, #100	@ 0x64
 80021fc:	d902      	bls.n	8002204 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	f000 bf67 	b.w	80030d2 <HAL_RCC_OscConfig+0x109a>
 8002204:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002208:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8002210:	fa93 f3a3 	rbit	r3, r3
 8002214:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002218:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221c:	fab3 f383 	clz	r3, r3
 8002220:	b2db      	uxtb	r3, r3
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	b2db      	uxtb	r3, r3
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b01      	cmp	r3, #1
 800222e:	d102      	bne.n	8002236 <HAL_RCC_OscConfig+0x1fe>
 8002230:	4b46      	ldr	r3, [pc, #280]	@ (800234c <HAL_RCC_OscConfig+0x314>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	e015      	b.n	8002262 <HAL_RCC_OscConfig+0x22a>
 8002236:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800223a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8002242:	fa93 f3a3 	rbit	r3, r3
 8002246:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800224a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800224e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002252:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8002256:	fa93 f3a3 	rbit	r3, r3
 800225a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800225e:	4b3b      	ldr	r3, [pc, #236]	@ (800234c <HAL_RCC_OscConfig+0x314>)
 8002260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002262:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002266:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800226a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800226e:	fa92 f2a2 	rbit	r2, r2
 8002272:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8002276:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800227a:	fab2 f282 	clz	r2, r2
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	f042 0220 	orr.w	r2, r2, #32
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	f002 021f 	and.w	r2, r2, #31
 800228a:	2101      	movs	r1, #1
 800228c:	fa01 f202 	lsl.w	r2, r1, r2
 8002290:	4013      	ands	r3, r2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0ab      	beq.n	80021ee <HAL_RCC_OscConfig+0x1b6>
 8002296:	e05c      	b.n	8002352 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002298:	f7fe fb50 	bl	800093c <HAL_GetTick>
 800229c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a0:	e00a      	b.n	80022b8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022a2:	f7fe fb4b 	bl	800093c <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b64      	cmp	r3, #100	@ 0x64
 80022b0:	d902      	bls.n	80022b8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	f000 bf0d 	b.w	80030d2 <HAL_RCC_OscConfig+0x109a>
 80022b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022bc:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80022c4:	fa93 f3a3 	rbit	r3, r3
 80022c8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80022cc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d0:	fab3 f383 	clz	r3, r3
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	095b      	lsrs	r3, r3, #5
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d102      	bne.n	80022ea <HAL_RCC_OscConfig+0x2b2>
 80022e4:	4b19      	ldr	r3, [pc, #100]	@ (800234c <HAL_RCC_OscConfig+0x314>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	e015      	b.n	8002316 <HAL_RCC_OscConfig+0x2de>
 80022ea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022ee:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80022f6:	fa93 f3a3 	rbit	r3, r3
 80022fa:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80022fe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002302:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002306:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800230a:	fa93 f3a3 	rbit	r3, r3
 800230e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002312:	4b0e      	ldr	r3, [pc, #56]	@ (800234c <HAL_RCC_OscConfig+0x314>)
 8002314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002316:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800231a:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800231e:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002322:	fa92 f2a2 	rbit	r2, r2
 8002326:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 800232a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800232e:	fab2 f282 	clz	r2, r2
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	f042 0220 	orr.w	r2, r2, #32
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	f002 021f 	and.w	r2, r2, #31
 800233e:	2101      	movs	r1, #1
 8002340:	fa01 f202 	lsl.w	r2, r1, r2
 8002344:	4013      	ands	r3, r2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1ab      	bne.n	80022a2 <HAL_RCC_OscConfig+0x26a>
 800234a:	e002      	b.n	8002352 <HAL_RCC_OscConfig+0x31a>
 800234c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002352:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002356:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 817f 	beq.w	8002666 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002368:	4ba7      	ldr	r3, [pc, #668]	@ (8002608 <HAL_RCC_OscConfig+0x5d0>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 030c 	and.w	r3, r3, #12
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00c      	beq.n	800238e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002374:	4ba4      	ldr	r3, [pc, #656]	@ (8002608 <HAL_RCC_OscConfig+0x5d0>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 030c 	and.w	r3, r3, #12
 800237c:	2b08      	cmp	r3, #8
 800237e:	d173      	bne.n	8002468 <HAL_RCC_OscConfig+0x430>
 8002380:	4ba1      	ldr	r3, [pc, #644]	@ (8002608 <HAL_RCC_OscConfig+0x5d0>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002388:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800238c:	d16c      	bne.n	8002468 <HAL_RCC_OscConfig+0x430>
 800238e:	2302      	movs	r3, #2
 8002390:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002394:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002398:	fa93 f3a3 	rbit	r3, r3
 800239c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80023a0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023a4:	fab3 f383 	clz	r3, r3
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	095b      	lsrs	r3, r3, #5
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d102      	bne.n	80023be <HAL_RCC_OscConfig+0x386>
 80023b8:	4b93      	ldr	r3, [pc, #588]	@ (8002608 <HAL_RCC_OscConfig+0x5d0>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	e013      	b.n	80023e6 <HAL_RCC_OscConfig+0x3ae>
 80023be:	2302      	movs	r3, #2
 80023c0:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c4:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80023c8:	fa93 f3a3 	rbit	r3, r3
 80023cc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80023d0:	2302      	movs	r3, #2
 80023d2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80023d6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80023da:	fa93 f3a3 	rbit	r3, r3
 80023de:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80023e2:	4b89      	ldr	r3, [pc, #548]	@ (8002608 <HAL_RCC_OscConfig+0x5d0>)
 80023e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e6:	2202      	movs	r2, #2
 80023e8:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80023ec:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80023f0:	fa92 f2a2 	rbit	r2, r2
 80023f4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80023f8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80023fc:	fab2 f282 	clz	r2, r2
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	f042 0220 	orr.w	r2, r2, #32
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	f002 021f 	and.w	r2, r2, #31
 800240c:	2101      	movs	r1, #1
 800240e:	fa01 f202 	lsl.w	r2, r1, r2
 8002412:	4013      	ands	r3, r2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00a      	beq.n	800242e <HAL_RCC_OscConfig+0x3f6>
 8002418:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800241c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d002      	beq.n	800242e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	f000 be52 	b.w	80030d2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242e:	4b76      	ldr	r3, [pc, #472]	@ (8002608 <HAL_RCC_OscConfig+0x5d0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002436:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800243a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	21f8      	movs	r1, #248	@ 0xf8
 8002444:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002448:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 800244c:	fa91 f1a1 	rbit	r1, r1
 8002450:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8002454:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002458:	fab1 f181 	clz	r1, r1
 800245c:	b2c9      	uxtb	r1, r1
 800245e:	408b      	lsls	r3, r1
 8002460:	4969      	ldr	r1, [pc, #420]	@ (8002608 <HAL_RCC_OscConfig+0x5d0>)
 8002462:	4313      	orrs	r3, r2
 8002464:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002466:	e0fe      	b.n	8002666 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002468:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800246c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 8088 	beq.w	800258a <HAL_RCC_OscConfig+0x552>
 800247a:	2301      	movs	r3, #1
 800247c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002484:	fa93 f3a3 	rbit	r3, r3
 8002488:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 800248c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002490:	fab3 f383 	clz	r3, r3
 8002494:	b2db      	uxtb	r3, r3
 8002496:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800249a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	461a      	mov	r2, r3
 80024a2:	2301      	movs	r3, #1
 80024a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a6:	f7fe fa49 	bl	800093c <HAL_GetTick>
 80024aa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ae:	e00a      	b.n	80024c6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b0:	f7fe fa44 	bl	800093c <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d902      	bls.n	80024c6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	f000 be06 	b.w	80030d2 <HAL_RCC_OscConfig+0x109a>
 80024c6:	2302      	movs	r3, #2
 80024c8:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80024d0:	fa93 f3a3 	rbit	r3, r3
 80024d4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80024d8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024dc:	fab3 f383 	clz	r3, r3
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	095b      	lsrs	r3, r3, #5
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d102      	bne.n	80024f6 <HAL_RCC_OscConfig+0x4be>
 80024f0:	4b45      	ldr	r3, [pc, #276]	@ (8002608 <HAL_RCC_OscConfig+0x5d0>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	e013      	b.n	800251e <HAL_RCC_OscConfig+0x4e6>
 80024f6:	2302      	movs	r3, #2
 80024f8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002500:	fa93 f3a3 	rbit	r3, r3
 8002504:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002508:	2302      	movs	r3, #2
 800250a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800250e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800251a:	4b3b      	ldr	r3, [pc, #236]	@ (8002608 <HAL_RCC_OscConfig+0x5d0>)
 800251c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251e:	2202      	movs	r2, #2
 8002520:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002524:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002528:	fa92 f2a2 	rbit	r2, r2
 800252c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002530:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002534:	fab2 f282 	clz	r2, r2
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	f042 0220 	orr.w	r2, r2, #32
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	f002 021f 	and.w	r2, r2, #31
 8002544:	2101      	movs	r1, #1
 8002546:	fa01 f202 	lsl.w	r2, r1, r2
 800254a:	4013      	ands	r3, r2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0af      	beq.n	80024b0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002550:	4b2d      	ldr	r3, [pc, #180]	@ (8002608 <HAL_RCC_OscConfig+0x5d0>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002558:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800255c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	21f8      	movs	r1, #248	@ 0xf8
 8002566:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800256e:	fa91 f1a1 	rbit	r1, r1
 8002572:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8002576:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800257a:	fab1 f181 	clz	r1, r1
 800257e:	b2c9      	uxtb	r1, r1
 8002580:	408b      	lsls	r3, r1
 8002582:	4921      	ldr	r1, [pc, #132]	@ (8002608 <HAL_RCC_OscConfig+0x5d0>)
 8002584:	4313      	orrs	r3, r2
 8002586:	600b      	str	r3, [r1, #0]
 8002588:	e06d      	b.n	8002666 <HAL_RCC_OscConfig+0x62e>
 800258a:	2301      	movs	r3, #1
 800258c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002590:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002594:	fa93 f3a3 	rbit	r3, r3
 8002598:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 800259c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025a0:	fab3 f383 	clz	r3, r3
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80025aa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	461a      	mov	r2, r3
 80025b2:	2300      	movs	r3, #0
 80025b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b6:	f7fe f9c1 	bl	800093c <HAL_GetTick>
 80025ba:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025be:	e00a      	b.n	80025d6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025c0:	f7fe f9bc 	bl	800093c <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d902      	bls.n	80025d6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	f000 bd7e 	b.w	80030d2 <HAL_RCC_OscConfig+0x109a>
 80025d6:	2302      	movs	r3, #2
 80025d8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80025e0:	fa93 f3a3 	rbit	r3, r3
 80025e4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80025e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ec:	fab3 f383 	clz	r3, r3
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	095b      	lsrs	r3, r3, #5
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d105      	bne.n	800260c <HAL_RCC_OscConfig+0x5d4>
 8002600:	4b01      	ldr	r3, [pc, #4]	@ (8002608 <HAL_RCC_OscConfig+0x5d0>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	e016      	b.n	8002634 <HAL_RCC_OscConfig+0x5fc>
 8002606:	bf00      	nop
 8002608:	40021000 	.word	0x40021000
 800260c:	2302      	movs	r3, #2
 800260e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002612:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002616:	fa93 f3a3 	rbit	r3, r3
 800261a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800261e:	2302      	movs	r3, #2
 8002620:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002624:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002628:	fa93 f3a3 	rbit	r3, r3
 800262c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002630:	4bbf      	ldr	r3, [pc, #764]	@ (8002930 <HAL_RCC_OscConfig+0x8f8>)
 8002632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002634:	2202      	movs	r2, #2
 8002636:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800263a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800263e:	fa92 f2a2 	rbit	r2, r2
 8002642:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8002646:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800264a:	fab2 f282 	clz	r2, r2
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	f042 0220 	orr.w	r2, r2, #32
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	f002 021f 	and.w	r2, r2, #31
 800265a:	2101      	movs	r1, #1
 800265c:	fa01 f202 	lsl.w	r2, r1, r2
 8002660:	4013      	ands	r3, r2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1ac      	bne.n	80025c0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002666:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800266a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 8113 	beq.w	80028a2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800267c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002680:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d07c      	beq.n	8002786 <HAL_RCC_OscConfig+0x74e>
 800268c:	2301      	movs	r3, #1
 800268e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002696:	fa93 f3a3 	rbit	r3, r3
 800269a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 800269e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a2:	fab3 f383 	clz	r3, r3
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	461a      	mov	r2, r3
 80026aa:	4ba2      	ldr	r3, [pc, #648]	@ (8002934 <HAL_RCC_OscConfig+0x8fc>)
 80026ac:	4413      	add	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	461a      	mov	r2, r3
 80026b2:	2301      	movs	r3, #1
 80026b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b6:	f7fe f941 	bl	800093c <HAL_GetTick>
 80026ba:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026be:	e00a      	b.n	80026d6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026c0:	f7fe f93c 	bl	800093c <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d902      	bls.n	80026d6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	f000 bcfe 	b.w	80030d2 <HAL_RCC_OscConfig+0x109a>
 80026d6:	2302      	movs	r3, #2
 80026d8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80026e0:	fa93 f2a3 	rbit	r2, r3
 80026e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026e8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80026f6:	2202      	movs	r2, #2
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	fa93 f2a3 	rbit	r2, r3
 8002708:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800270c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002716:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800271a:	2202      	movs	r2, #2
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002722:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	fa93 f2a3 	rbit	r2, r3
 800272c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002730:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002734:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002736:	4b7e      	ldr	r3, [pc, #504]	@ (8002930 <HAL_RCC_OscConfig+0x8f8>)
 8002738:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800273a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800273e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002742:	2102      	movs	r1, #2
 8002744:	6019      	str	r1, [r3, #0]
 8002746:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800274a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	fa93 f1a3 	rbit	r1, r3
 8002754:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002758:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800275c:	6019      	str	r1, [r3, #0]
  return result;
 800275e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002762:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	fab3 f383 	clz	r3, r3
 800276c:	b2db      	uxtb	r3, r3
 800276e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002772:	b2db      	uxtb	r3, r3
 8002774:	f003 031f 	and.w	r3, r3, #31
 8002778:	2101      	movs	r1, #1
 800277a:	fa01 f303 	lsl.w	r3, r1, r3
 800277e:	4013      	ands	r3, r2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d09d      	beq.n	80026c0 <HAL_RCC_OscConfig+0x688>
 8002784:	e08d      	b.n	80028a2 <HAL_RCC_OscConfig+0x86a>
 8002786:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800278a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800278e:	2201      	movs	r2, #1
 8002790:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002792:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002796:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	fa93 f2a3 	rbit	r2, r3
 80027a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027a4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80027a8:	601a      	str	r2, [r3, #0]
  return result;
 80027aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027ae:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80027b2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027b4:	fab3 f383 	clz	r3, r3
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	461a      	mov	r2, r3
 80027bc:	4b5d      	ldr	r3, [pc, #372]	@ (8002934 <HAL_RCC_OscConfig+0x8fc>)
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	461a      	mov	r2, r3
 80027c4:	2300      	movs	r3, #0
 80027c6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c8:	f7fe f8b8 	bl	800093c <HAL_GetTick>
 80027cc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d0:	e00a      	b.n	80027e8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027d2:	f7fe f8b3 	bl	800093c <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d902      	bls.n	80027e8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	f000 bc75 	b.w	80030d2 <HAL_RCC_OscConfig+0x109a>
 80027e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027ec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80027f0:	2202      	movs	r2, #2
 80027f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027f8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	fa93 f2a3 	rbit	r2, r3
 8002802:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002806:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002810:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002814:	2202      	movs	r2, #2
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800281c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	fa93 f2a3 	rbit	r2, r3
 8002826:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800282a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002834:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002838:	2202      	movs	r2, #2
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002840:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	fa93 f2a3 	rbit	r2, r3
 800284a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800284e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002852:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002854:	4b36      	ldr	r3, [pc, #216]	@ (8002930 <HAL_RCC_OscConfig+0x8f8>)
 8002856:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002858:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800285c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002860:	2102      	movs	r1, #2
 8002862:	6019      	str	r1, [r3, #0]
 8002864:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002868:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	fa93 f1a3 	rbit	r1, r3
 8002872:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002876:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800287a:	6019      	str	r1, [r3, #0]
  return result;
 800287c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002880:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002890:	b2db      	uxtb	r3, r3
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	2101      	movs	r1, #1
 8002898:	fa01 f303 	lsl.w	r3, r1, r3
 800289c:	4013      	ands	r3, r2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d197      	bne.n	80027d2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028a6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 81a5 	beq.w	8002c02 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028b8:	2300      	movs	r3, #0
 80028ba:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028be:	4b1c      	ldr	r3, [pc, #112]	@ (8002930 <HAL_RCC_OscConfig+0x8f8>)
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d116      	bne.n	80028f8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ca:	4b19      	ldr	r3, [pc, #100]	@ (8002930 <HAL_RCC_OscConfig+0x8f8>)
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	4a18      	ldr	r2, [pc, #96]	@ (8002930 <HAL_RCC_OscConfig+0x8f8>)
 80028d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028d4:	61d3      	str	r3, [r2, #28]
 80028d6:	4b16      	ldr	r3, [pc, #88]	@ (8002930 <HAL_RCC_OscConfig+0x8f8>)
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80028de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028f0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80028f2:	2301      	movs	r3, #1
 80028f4:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002938 <HAL_RCC_OscConfig+0x900>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002900:	2b00      	cmp	r3, #0
 8002902:	d121      	bne.n	8002948 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002904:	4b0c      	ldr	r3, [pc, #48]	@ (8002938 <HAL_RCC_OscConfig+0x900>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a0b      	ldr	r2, [pc, #44]	@ (8002938 <HAL_RCC_OscConfig+0x900>)
 800290a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800290e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002910:	f7fe f814 	bl	800093c <HAL_GetTick>
 8002914:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002918:	e010      	b.n	800293c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800291a:	f7fe f80f 	bl	800093c <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b64      	cmp	r3, #100	@ 0x64
 8002928:	d908      	bls.n	800293c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e3d1      	b.n	80030d2 <HAL_RCC_OscConfig+0x109a>
 800292e:	bf00      	nop
 8002930:	40021000 	.word	0x40021000
 8002934:	10908120 	.word	0x10908120
 8002938:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293c:	4b8d      	ldr	r3, [pc, #564]	@ (8002b74 <HAL_RCC_OscConfig+0xb3c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0e8      	beq.n	800291a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002948:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800294c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d106      	bne.n	8002966 <HAL_RCC_OscConfig+0x92e>
 8002958:	4b87      	ldr	r3, [pc, #540]	@ (8002b78 <HAL_RCC_OscConfig+0xb40>)
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	4a86      	ldr	r2, [pc, #536]	@ (8002b78 <HAL_RCC_OscConfig+0xb40>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	6213      	str	r3, [r2, #32]
 8002964:	e035      	b.n	80029d2 <HAL_RCC_OscConfig+0x99a>
 8002966:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800296a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10c      	bne.n	8002990 <HAL_RCC_OscConfig+0x958>
 8002976:	4b80      	ldr	r3, [pc, #512]	@ (8002b78 <HAL_RCC_OscConfig+0xb40>)
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	4a7f      	ldr	r2, [pc, #508]	@ (8002b78 <HAL_RCC_OscConfig+0xb40>)
 800297c:	f023 0301 	bic.w	r3, r3, #1
 8002980:	6213      	str	r3, [r2, #32]
 8002982:	4b7d      	ldr	r3, [pc, #500]	@ (8002b78 <HAL_RCC_OscConfig+0xb40>)
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	4a7c      	ldr	r2, [pc, #496]	@ (8002b78 <HAL_RCC_OscConfig+0xb40>)
 8002988:	f023 0304 	bic.w	r3, r3, #4
 800298c:	6213      	str	r3, [r2, #32]
 800298e:	e020      	b.n	80029d2 <HAL_RCC_OscConfig+0x99a>
 8002990:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002994:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2b05      	cmp	r3, #5
 800299e:	d10c      	bne.n	80029ba <HAL_RCC_OscConfig+0x982>
 80029a0:	4b75      	ldr	r3, [pc, #468]	@ (8002b78 <HAL_RCC_OscConfig+0xb40>)
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	4a74      	ldr	r2, [pc, #464]	@ (8002b78 <HAL_RCC_OscConfig+0xb40>)
 80029a6:	f043 0304 	orr.w	r3, r3, #4
 80029aa:	6213      	str	r3, [r2, #32]
 80029ac:	4b72      	ldr	r3, [pc, #456]	@ (8002b78 <HAL_RCC_OscConfig+0xb40>)
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	4a71      	ldr	r2, [pc, #452]	@ (8002b78 <HAL_RCC_OscConfig+0xb40>)
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	6213      	str	r3, [r2, #32]
 80029b8:	e00b      	b.n	80029d2 <HAL_RCC_OscConfig+0x99a>
 80029ba:	4b6f      	ldr	r3, [pc, #444]	@ (8002b78 <HAL_RCC_OscConfig+0xb40>)
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	4a6e      	ldr	r2, [pc, #440]	@ (8002b78 <HAL_RCC_OscConfig+0xb40>)
 80029c0:	f023 0301 	bic.w	r3, r3, #1
 80029c4:	6213      	str	r3, [r2, #32]
 80029c6:	4b6c      	ldr	r3, [pc, #432]	@ (8002b78 <HAL_RCC_OscConfig+0xb40>)
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	4a6b      	ldr	r2, [pc, #428]	@ (8002b78 <HAL_RCC_OscConfig+0xb40>)
 80029cc:	f023 0304 	bic.w	r3, r3, #4
 80029d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029d6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 8081 	beq.w	8002ae6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e4:	f7fd ffaa 	bl	800093c <HAL_GetTick>
 80029e8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ec:	e00b      	b.n	8002a06 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ee:	f7fd ffa5 	bl	800093c <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e365      	b.n	80030d2 <HAL_RCC_OscConfig+0x109a>
 8002a06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a0a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002a0e:	2202      	movs	r2, #2
 8002a10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a16:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	fa93 f2a3 	rbit	r2, r3
 8002a20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a24:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a2e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a32:	2202      	movs	r2, #2
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a3a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	fa93 f2a3 	rbit	r2, r3
 8002a44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a48:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002a4c:	601a      	str	r2, [r3, #0]
  return result;
 8002a4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a52:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002a56:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a58:	fab3 f383 	clz	r3, r3
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	f043 0302 	orr.w	r3, r3, #2
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d102      	bne.n	8002a72 <HAL_RCC_OscConfig+0xa3a>
 8002a6c:	4b42      	ldr	r3, [pc, #264]	@ (8002b78 <HAL_RCC_OscConfig+0xb40>)
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	e013      	b.n	8002a9a <HAL_RCC_OscConfig+0xa62>
 8002a72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a76:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a82:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	fa93 f2a3 	rbit	r2, r3
 8002a8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a90:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	4b38      	ldr	r3, [pc, #224]	@ (8002b78 <HAL_RCC_OscConfig+0xb40>)
 8002a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002a9e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002aa2:	2102      	movs	r1, #2
 8002aa4:	6011      	str	r1, [r2, #0]
 8002aa6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002aaa:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	fa92 f1a2 	rbit	r1, r2
 8002ab4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ab8:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002abc:	6011      	str	r1, [r2, #0]
  return result;
 8002abe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ac2:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002ac6:	6812      	ldr	r2, [r2, #0]
 8002ac8:	fab2 f282 	clz	r2, r2
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	f002 021f 	and.w	r2, r2, #31
 8002ad8:	2101      	movs	r1, #1
 8002ada:	fa01 f202 	lsl.w	r2, r1, r2
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d084      	beq.n	80029ee <HAL_RCC_OscConfig+0x9b6>
 8002ae4:	e083      	b.n	8002bee <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae6:	f7fd ff29 	bl	800093c <HAL_GetTick>
 8002aea:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aee:	e00b      	b.n	8002b08 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002af0:	f7fd ff24 	bl	800093c <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e2e4      	b.n	80030d2 <HAL_RCC_OscConfig+0x109a>
 8002b08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b0c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002b10:	2202      	movs	r2, #2
 8002b12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b18:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	fa93 f2a3 	rbit	r2, r3
 8002b22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b26:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b30:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002b34:	2202      	movs	r2, #2
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b3c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	fa93 f2a3 	rbit	r2, r3
 8002b46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b4a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002b4e:	601a      	str	r2, [r3, #0]
  return result;
 8002b50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b54:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002b58:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b5a:	fab3 f383 	clz	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	095b      	lsrs	r3, r3, #5
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	f043 0302 	orr.w	r3, r3, #2
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d106      	bne.n	8002b7c <HAL_RCC_OscConfig+0xb44>
 8002b6e:	4b02      	ldr	r3, [pc, #8]	@ (8002b78 <HAL_RCC_OscConfig+0xb40>)
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	e017      	b.n	8002ba4 <HAL_RCC_OscConfig+0xb6c>
 8002b74:	40007000 	.word	0x40007000
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b80:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002b84:	2202      	movs	r2, #2
 8002b86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b8c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	fa93 f2a3 	rbit	r2, r3
 8002b96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b9a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	4bb3      	ldr	r3, [pc, #716]	@ (8002e70 <HAL_RCC_OscConfig+0xe38>)
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ba8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002bac:	2102      	movs	r1, #2
 8002bae:	6011      	str	r1, [r2, #0]
 8002bb0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002bb4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002bb8:	6812      	ldr	r2, [r2, #0]
 8002bba:	fa92 f1a2 	rbit	r1, r2
 8002bbe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002bc2:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002bc6:	6011      	str	r1, [r2, #0]
  return result;
 8002bc8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002bcc:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	fab2 f282 	clz	r2, r2
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	f002 021f 	and.w	r2, r2, #31
 8002be2:	2101      	movs	r1, #1
 8002be4:	fa01 f202 	lsl.w	r2, r1, r2
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d180      	bne.n	8002af0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bee:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d105      	bne.n	8002c02 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf6:	4b9e      	ldr	r3, [pc, #632]	@ (8002e70 <HAL_RCC_OscConfig+0xe38>)
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	4a9d      	ldr	r2, [pc, #628]	@ (8002e70 <HAL_RCC_OscConfig+0xe38>)
 8002bfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c00:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c06:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 825e 	beq.w	80030d0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c14:	4b96      	ldr	r3, [pc, #600]	@ (8002e70 <HAL_RCC_OscConfig+0xe38>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 030c 	and.w	r3, r3, #12
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	f000 821f 	beq.w	8003060 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c26:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	f040 8170 	bne.w	8002f14 <HAL_RCC_OscConfig+0xedc>
 8002c34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c38:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002c3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c46:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	fa93 f2a3 	rbit	r2, r3
 8002c50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c54:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002c58:	601a      	str	r2, [r3, #0]
  return result;
 8002c5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c5e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002c62:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c64:	fab3 f383 	clz	r3, r3
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002c6e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	461a      	mov	r2, r3
 8002c76:	2300      	movs	r3, #0
 8002c78:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7a:	f7fd fe5f 	bl	800093c <HAL_GetTick>
 8002c7e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c82:	e009      	b.n	8002c98 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c84:	f7fd fe5a 	bl	800093c <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e21c      	b.n	80030d2 <HAL_RCC_OscConfig+0x109a>
 8002c98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c9c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002ca0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ca4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002caa:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	fa93 f2a3 	rbit	r2, r3
 8002cb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cb8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002cbc:	601a      	str	r2, [r3, #0]
  return result;
 8002cbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cc2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002cc6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cc8:	fab3 f383 	clz	r3, r3
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	095b      	lsrs	r3, r3, #5
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	f043 0301 	orr.w	r3, r3, #1
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d102      	bne.n	8002ce2 <HAL_RCC_OscConfig+0xcaa>
 8002cdc:	4b64      	ldr	r3, [pc, #400]	@ (8002e70 <HAL_RCC_OscConfig+0xe38>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	e027      	b.n	8002d32 <HAL_RCC_OscConfig+0xcfa>
 8002ce2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ce6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002cea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cf4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	fa93 f2a3 	rbit	r2, r3
 8002cfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d02:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d0c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002d10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d1a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	fa93 f2a3 	rbit	r2, r3
 8002d24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d28:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	4b50      	ldr	r3, [pc, #320]	@ (8002e70 <HAL_RCC_OscConfig+0xe38>)
 8002d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d32:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d36:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002d3a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002d3e:	6011      	str	r1, [r2, #0]
 8002d40:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d44:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002d48:	6812      	ldr	r2, [r2, #0]
 8002d4a:	fa92 f1a2 	rbit	r1, r2
 8002d4e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d52:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002d56:	6011      	str	r1, [r2, #0]
  return result;
 8002d58:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d5c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002d60:	6812      	ldr	r2, [r2, #0]
 8002d62:	fab2 f282 	clz	r2, r2
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	f042 0220 	orr.w	r2, r2, #32
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	f002 021f 	and.w	r2, r2, #31
 8002d72:	2101      	movs	r1, #1
 8002d74:	fa01 f202 	lsl.w	r2, r1, r2
 8002d78:	4013      	ands	r3, r2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d182      	bne.n	8002c84 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d7e:	4b3c      	ldr	r3, [pc, #240]	@ (8002e70 <HAL_RCC_OscConfig+0xe38>)
 8002d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d82:	f023 020f 	bic.w	r2, r3, #15
 8002d86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d8a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d92:	4937      	ldr	r1, [pc, #220]	@ (8002e70 <HAL_RCC_OscConfig+0xe38>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002d98:	4b35      	ldr	r3, [pc, #212]	@ (8002e70 <HAL_RCC_OscConfig+0xe38>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002da0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002da4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6a19      	ldr	r1, [r3, #32]
 8002dac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002db0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	430b      	orrs	r3, r1
 8002dba:	492d      	ldr	r1, [pc, #180]	@ (8002e70 <HAL_RCC_OscConfig+0xe38>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	604b      	str	r3, [r1, #4]
 8002dc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dc4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002dc8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002dcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dd2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	fa93 f2a3 	rbit	r2, r3
 8002ddc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002de0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002de4:	601a      	str	r2, [r3, #0]
  return result;
 8002de6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dea:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002dee:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002df0:	fab3 f383 	clz	r3, r3
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002dfa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	461a      	mov	r2, r3
 8002e02:	2301      	movs	r3, #1
 8002e04:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e06:	f7fd fd99 	bl	800093c <HAL_GetTick>
 8002e0a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e0e:	e009      	b.n	8002e24 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e10:	f7fd fd94 	bl	800093c <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e156      	b.n	80030d2 <HAL_RCC_OscConfig+0x109a>
 8002e24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e28:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002e2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e36:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	fa93 f2a3 	rbit	r2, r3
 8002e40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e44:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002e48:	601a      	str	r2, [r3, #0]
  return result;
 8002e4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e4e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002e52:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e54:	fab3 f383 	clz	r3, r3
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d105      	bne.n	8002e74 <HAL_RCC_OscConfig+0xe3c>
 8002e68:	4b01      	ldr	r3, [pc, #4]	@ (8002e70 <HAL_RCC_OscConfig+0xe38>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	e02a      	b.n	8002ec4 <HAL_RCC_OscConfig+0xe8c>
 8002e6e:	bf00      	nop
 8002e70:	40021000 	.word	0x40021000
 8002e74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e78:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002e7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e86:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	fa93 f2a3 	rbit	r2, r3
 8002e90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e94:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e9e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002ea2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eac:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	fa93 f2a3 	rbit	r2, r3
 8002eb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eba:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	4b86      	ldr	r3, [pc, #536]	@ (80030dc <HAL_RCC_OscConfig+0x10a4>)
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ec8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002ecc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002ed0:	6011      	str	r1, [r2, #0]
 8002ed2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ed6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	fa92 f1a2 	rbit	r1, r2
 8002ee0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ee4:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002ee8:	6011      	str	r1, [r2, #0]
  return result;
 8002eea:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002eee:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002ef2:	6812      	ldr	r2, [r2, #0]
 8002ef4:	fab2 f282 	clz	r2, r2
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	f042 0220 	orr.w	r2, r2, #32
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	f002 021f 	and.w	r2, r2, #31
 8002f04:	2101      	movs	r1, #1
 8002f06:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f43f af7f 	beq.w	8002e10 <HAL_RCC_OscConfig+0xdd8>
 8002f12:	e0dd      	b.n	80030d0 <HAL_RCC_OscConfig+0x1098>
 8002f14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f18:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002f1c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f26:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	fa93 f2a3 	rbit	r2, r3
 8002f30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f34:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002f38:	601a      	str	r2, [r3, #0]
  return result;
 8002f3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f3e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002f42:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f44:	fab3 f383 	clz	r3, r3
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f4e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	461a      	mov	r2, r3
 8002f56:	2300      	movs	r3, #0
 8002f58:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5a:	f7fd fcef 	bl	800093c <HAL_GetTick>
 8002f5e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f62:	e009      	b.n	8002f78 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f64:	f7fd fcea 	bl	800093c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e0ac      	b.n	80030d2 <HAL_RCC_OscConfig+0x109a>
 8002f78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f7c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002f80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f8a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	fa93 f2a3 	rbit	r2, r3
 8002f94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f98:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002f9c:	601a      	str	r2, [r3, #0]
  return result;
 8002f9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fa2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002fa6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa8:	fab3 f383 	clz	r3, r3
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	095b      	lsrs	r3, r3, #5
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	f043 0301 	orr.w	r3, r3, #1
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d102      	bne.n	8002fc2 <HAL_RCC_OscConfig+0xf8a>
 8002fbc:	4b47      	ldr	r3, [pc, #284]	@ (80030dc <HAL_RCC_OscConfig+0x10a4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	e027      	b.n	8003012 <HAL_RCC_OscConfig+0xfda>
 8002fc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fc6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002fca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fd4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	fa93 f2a3 	rbit	r2, r3
 8002fde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fe2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fec:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002ff0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ffa:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	fa93 f2a3 	rbit	r2, r3
 8003004:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003008:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	4b33      	ldr	r3, [pc, #204]	@ (80030dc <HAL_RCC_OscConfig+0x10a4>)
 8003010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003012:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003016:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800301a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800301e:	6011      	str	r1, [r2, #0]
 8003020:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003024:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	fa92 f1a2 	rbit	r1, r2
 800302e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003032:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003036:	6011      	str	r1, [r2, #0]
  return result;
 8003038:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800303c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003040:	6812      	ldr	r2, [r2, #0]
 8003042:	fab2 f282 	clz	r2, r2
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	f042 0220 	orr.w	r2, r2, #32
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	f002 021f 	and.w	r2, r2, #31
 8003052:	2101      	movs	r1, #1
 8003054:	fa01 f202 	lsl.w	r2, r1, r2
 8003058:	4013      	ands	r3, r2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d182      	bne.n	8002f64 <HAL_RCC_OscConfig+0xf2c>
 800305e:	e037      	b.n	80030d0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003060:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003064:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e02e      	b.n	80030d2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003074:	4b19      	ldr	r3, [pc, #100]	@ (80030dc <HAL_RCC_OscConfig+0x10a4>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800307c:	4b17      	ldr	r3, [pc, #92]	@ (80030dc <HAL_RCC_OscConfig+0x10a4>)
 800307e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003080:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003084:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003088:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 800308c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003090:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	69db      	ldr	r3, [r3, #28]
 8003098:	429a      	cmp	r2, r3
 800309a:	d117      	bne.n	80030cc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800309c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80030a0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80030a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d10b      	bne.n	80030cc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80030b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030b8:	f003 020f 	and.w	r2, r3, #15
 80030bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030c0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d001      	beq.n	80030d0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e000      	b.n	80030d2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40021000 	.word	0x40021000

080030e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b09e      	sub	sp, #120	@ 0x78
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e162      	b.n	80033be <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030f8:	4b90      	ldr	r3, [pc, #576]	@ (800333c <HAL_RCC_ClockConfig+0x25c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d910      	bls.n	8003128 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003106:	4b8d      	ldr	r3, [pc, #564]	@ (800333c <HAL_RCC_ClockConfig+0x25c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f023 0207 	bic.w	r2, r3, #7
 800310e:	498b      	ldr	r1, [pc, #556]	@ (800333c <HAL_RCC_ClockConfig+0x25c>)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	4313      	orrs	r3, r2
 8003114:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003116:	4b89      	ldr	r3, [pc, #548]	@ (800333c <HAL_RCC_ClockConfig+0x25c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	429a      	cmp	r2, r3
 8003122:	d001      	beq.n	8003128 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e14a      	b.n	80033be <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d008      	beq.n	8003146 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003134:	4b82      	ldr	r3, [pc, #520]	@ (8003340 <HAL_RCC_ClockConfig+0x260>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	497f      	ldr	r1, [pc, #508]	@ (8003340 <HAL_RCC_ClockConfig+0x260>)
 8003142:	4313      	orrs	r3, r2
 8003144:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 80dc 	beq.w	800330c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d13c      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xf6>
 800315c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003160:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003162:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003164:	fa93 f3a3 	rbit	r3, r3
 8003168:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800316a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316c:	fab3 f383 	clz	r3, r3
 8003170:	b2db      	uxtb	r3, r3
 8003172:	095b      	lsrs	r3, r3, #5
 8003174:	b2db      	uxtb	r3, r3
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b01      	cmp	r3, #1
 800317e:	d102      	bne.n	8003186 <HAL_RCC_ClockConfig+0xa6>
 8003180:	4b6f      	ldr	r3, [pc, #444]	@ (8003340 <HAL_RCC_ClockConfig+0x260>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	e00f      	b.n	80031a6 <HAL_RCC_ClockConfig+0xc6>
 8003186:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800318a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800318e:	fa93 f3a3 	rbit	r3, r3
 8003192:	667b      	str	r3, [r7, #100]	@ 0x64
 8003194:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003198:	663b      	str	r3, [r7, #96]	@ 0x60
 800319a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800319c:	fa93 f3a3 	rbit	r3, r3
 80031a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031a2:	4b67      	ldr	r3, [pc, #412]	@ (8003340 <HAL_RCC_ClockConfig+0x260>)
 80031a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80031aa:	65ba      	str	r2, [r7, #88]	@ 0x58
 80031ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80031ae:	fa92 f2a2 	rbit	r2, r2
 80031b2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80031b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80031b6:	fab2 f282 	clz	r2, r2
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	f042 0220 	orr.w	r2, r2, #32
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	f002 021f 	and.w	r2, r2, #31
 80031c6:	2101      	movs	r1, #1
 80031c8:	fa01 f202 	lsl.w	r2, r1, r2
 80031cc:	4013      	ands	r3, r2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d17b      	bne.n	80032ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e0f3      	b.n	80033be <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d13c      	bne.n	8003258 <HAL_RCC_ClockConfig+0x178>
 80031de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031e2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031e6:	fa93 f3a3 	rbit	r3, r3
 80031ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80031ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ee:	fab3 f383 	clz	r3, r3
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	095b      	lsrs	r3, r3, #5
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d102      	bne.n	8003208 <HAL_RCC_ClockConfig+0x128>
 8003202:	4b4f      	ldr	r3, [pc, #316]	@ (8003340 <HAL_RCC_ClockConfig+0x260>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	e00f      	b.n	8003228 <HAL_RCC_ClockConfig+0x148>
 8003208:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800320c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003210:	fa93 f3a3 	rbit	r3, r3
 8003214:	647b      	str	r3, [r7, #68]	@ 0x44
 8003216:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800321a:	643b      	str	r3, [r7, #64]	@ 0x40
 800321c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800321e:	fa93 f3a3 	rbit	r3, r3
 8003222:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003224:	4b46      	ldr	r3, [pc, #280]	@ (8003340 <HAL_RCC_ClockConfig+0x260>)
 8003226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003228:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800322c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800322e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003230:	fa92 f2a2 	rbit	r2, r2
 8003234:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003236:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003238:	fab2 f282 	clz	r2, r2
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	f042 0220 	orr.w	r2, r2, #32
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	f002 021f 	and.w	r2, r2, #31
 8003248:	2101      	movs	r1, #1
 800324a:	fa01 f202 	lsl.w	r2, r1, r2
 800324e:	4013      	ands	r3, r2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d13a      	bne.n	80032ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0b2      	b.n	80033be <HAL_RCC_ClockConfig+0x2de>
 8003258:	2302      	movs	r3, #2
 800325a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800325e:	fa93 f3a3 	rbit	r3, r3
 8003262:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003266:	fab3 f383 	clz	r3, r3
 800326a:	b2db      	uxtb	r3, r3
 800326c:	095b      	lsrs	r3, r3, #5
 800326e:	b2db      	uxtb	r3, r3
 8003270:	f043 0301 	orr.w	r3, r3, #1
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b01      	cmp	r3, #1
 8003278:	d102      	bne.n	8003280 <HAL_RCC_ClockConfig+0x1a0>
 800327a:	4b31      	ldr	r3, [pc, #196]	@ (8003340 <HAL_RCC_ClockConfig+0x260>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	e00d      	b.n	800329c <HAL_RCC_ClockConfig+0x1bc>
 8003280:	2302      	movs	r3, #2
 8003282:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003286:	fa93 f3a3 	rbit	r3, r3
 800328a:	627b      	str	r3, [r7, #36]	@ 0x24
 800328c:	2302      	movs	r3, #2
 800328e:	623b      	str	r3, [r7, #32]
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	fa93 f3a3 	rbit	r3, r3
 8003296:	61fb      	str	r3, [r7, #28]
 8003298:	4b29      	ldr	r3, [pc, #164]	@ (8003340 <HAL_RCC_ClockConfig+0x260>)
 800329a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329c:	2202      	movs	r2, #2
 800329e:	61ba      	str	r2, [r7, #24]
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	fa92 f2a2 	rbit	r2, r2
 80032a6:	617a      	str	r2, [r7, #20]
  return result;
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	fab2 f282 	clz	r2, r2
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	f042 0220 	orr.w	r2, r2, #32
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	f002 021f 	and.w	r2, r2, #31
 80032ba:	2101      	movs	r1, #1
 80032bc:	fa01 f202 	lsl.w	r2, r1, r2
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e079      	b.n	80033be <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003340 <HAL_RCC_ClockConfig+0x260>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f023 0203 	bic.w	r2, r3, #3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	491a      	ldr	r1, [pc, #104]	@ (8003340 <HAL_RCC_ClockConfig+0x260>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032dc:	f7fd fb2e 	bl	800093c <HAL_GetTick>
 80032e0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e2:	e00a      	b.n	80032fa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e4:	f7fd fb2a 	bl	800093c <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e061      	b.n	80033be <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fa:	4b11      	ldr	r3, [pc, #68]	@ (8003340 <HAL_RCC_ClockConfig+0x260>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 020c 	and.w	r2, r3, #12
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	429a      	cmp	r2, r3
 800330a:	d1eb      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800330c:	4b0b      	ldr	r3, [pc, #44]	@ (800333c <HAL_RCC_ClockConfig+0x25c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d214      	bcs.n	8003344 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331a:	4b08      	ldr	r3, [pc, #32]	@ (800333c <HAL_RCC_ClockConfig+0x25c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f023 0207 	bic.w	r2, r3, #7
 8003322:	4906      	ldr	r1, [pc, #24]	@ (800333c <HAL_RCC_ClockConfig+0x25c>)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	4313      	orrs	r3, r2
 8003328:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800332a:	4b04      	ldr	r3, [pc, #16]	@ (800333c <HAL_RCC_ClockConfig+0x25c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d005      	beq.n	8003344 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e040      	b.n	80033be <HAL_RCC_ClockConfig+0x2de>
 800333c:	40022000 	.word	0x40022000
 8003340:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	d008      	beq.n	8003362 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003350:	4b1d      	ldr	r3, [pc, #116]	@ (80033c8 <HAL_RCC_ClockConfig+0x2e8>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	491a      	ldr	r1, [pc, #104]	@ (80033c8 <HAL_RCC_ClockConfig+0x2e8>)
 800335e:	4313      	orrs	r3, r2
 8003360:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	2b00      	cmp	r3, #0
 800336c:	d009      	beq.n	8003382 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800336e:	4b16      	ldr	r3, [pc, #88]	@ (80033c8 <HAL_RCC_ClockConfig+0x2e8>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	4912      	ldr	r1, [pc, #72]	@ (80033c8 <HAL_RCC_ClockConfig+0x2e8>)
 800337e:	4313      	orrs	r3, r2
 8003380:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003382:	f000 f829 	bl	80033d8 <HAL_RCC_GetSysClockFreq>
 8003386:	4601      	mov	r1, r0
 8003388:	4b0f      	ldr	r3, [pc, #60]	@ (80033c8 <HAL_RCC_ClockConfig+0x2e8>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003390:	22f0      	movs	r2, #240	@ 0xf0
 8003392:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	fa92 f2a2 	rbit	r2, r2
 800339a:	60fa      	str	r2, [r7, #12]
  return result;
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	fab2 f282 	clz	r2, r2
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	40d3      	lsrs	r3, r2
 80033a6:	4a09      	ldr	r2, [pc, #36]	@ (80033cc <HAL_RCC_ClockConfig+0x2ec>)
 80033a8:	5cd3      	ldrb	r3, [r2, r3]
 80033aa:	fa21 f303 	lsr.w	r3, r1, r3
 80033ae:	4a08      	ldr	r2, [pc, #32]	@ (80033d0 <HAL_RCC_ClockConfig+0x2f0>)
 80033b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80033b2:	4b08      	ldr	r3, [pc, #32]	@ (80033d4 <HAL_RCC_ClockConfig+0x2f4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fd fa7c 	bl	80008b4 <HAL_InitTick>
  
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3778      	adds	r7, #120	@ 0x78
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40021000 	.word	0x40021000
 80033cc:	08004c54 	.word	0x08004c54
 80033d0:	20000000 	.word	0x20000000
 80033d4:	20000004 	.word	0x20000004

080033d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	b087      	sub	sp, #28
 80033dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033de:	2300      	movs	r3, #0
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	2300      	movs	r3, #0
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	2300      	movs	r3, #0
 80033e8:	617b      	str	r3, [r7, #20]
 80033ea:	2300      	movs	r3, #0
 80033ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80033f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x98>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 030c 	and.w	r3, r3, #12
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d002      	beq.n	8003408 <HAL_RCC_GetSysClockFreq+0x30>
 8003402:	2b08      	cmp	r3, #8
 8003404:	d003      	beq.n	800340e <HAL_RCC_GetSysClockFreq+0x36>
 8003406:	e029      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003408:	4b1a      	ldr	r3, [pc, #104]	@ (8003474 <HAL_RCC_GetSysClockFreq+0x9c>)
 800340a:	613b      	str	r3, [r7, #16]
      break;
 800340c:	e029      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	0c9b      	lsrs	r3, r3, #18
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	4a18      	ldr	r2, [pc, #96]	@ (8003478 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003418:	5cd3      	ldrb	r3, [r2, r3]
 800341a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800341c:	4b14      	ldr	r3, [pc, #80]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x98>)
 800341e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003420:	f003 030f 	and.w	r3, r3, #15
 8003424:	4a15      	ldr	r2, [pc, #84]	@ (800347c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003426:	5cd3      	ldrb	r3, [r2, r3]
 8003428:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d008      	beq.n	8003446 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003434:	4a0f      	ldr	r2, [pc, #60]	@ (8003474 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	fbb2 f2f3 	udiv	r2, r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	fb02 f303 	mul.w	r3, r2, r3
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	e007      	b.n	8003456 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003446:	4a0b      	ldr	r2, [pc, #44]	@ (8003474 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	fbb2 f2f3 	udiv	r2, r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	fb02 f303 	mul.w	r3, r2, r3
 8003454:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	613b      	str	r3, [r7, #16]
      break;
 800345a:	e002      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800345c:	4b05      	ldr	r3, [pc, #20]	@ (8003474 <HAL_RCC_GetSysClockFreq+0x9c>)
 800345e:	613b      	str	r3, [r7, #16]
      break;
 8003460:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003462:	693b      	ldr	r3, [r7, #16]
}
 8003464:	4618      	mov	r0, r3
 8003466:	371c      	adds	r7, #28
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	40021000 	.word	0x40021000
 8003474:	007a1200 	.word	0x007a1200
 8003478:	08004c6c 	.word	0x08004c6c
 800347c:	08004c7c 	.word	0x08004c7c

08003480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003484:	4b03      	ldr	r3, [pc, #12]	@ (8003494 <HAL_RCC_GetHCLKFreq+0x14>)
 8003486:	681b      	ldr	r3, [r3, #0]
}
 8003488:	4618      	mov	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	20000000 	.word	0x20000000

08003498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800349e:	f7ff ffef 	bl	8003480 <HAL_RCC_GetHCLKFreq>
 80034a2:	4601      	mov	r1, r0
 80034a4:	4b0b      	ldr	r3, [pc, #44]	@ (80034d4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80034ac:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80034b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	fa92 f2a2 	rbit	r2, r2
 80034b8:	603a      	str	r2, [r7, #0]
  return result;
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	fab2 f282 	clz	r2, r2
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	40d3      	lsrs	r3, r2
 80034c4:	4a04      	ldr	r2, [pc, #16]	@ (80034d8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80034c6:	5cd3      	ldrb	r3, [r2, r3]
 80034c8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80034cc:	4618      	mov	r0, r3
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40021000 	.word	0x40021000
 80034d8:	08004c64 	.word	0x08004c64

080034dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80034e2:	f7ff ffcd 	bl	8003480 <HAL_RCC_GetHCLKFreq>
 80034e6:	4601      	mov	r1, r0
 80034e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003518 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80034f0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80034f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	fa92 f2a2 	rbit	r2, r2
 80034fc:	603a      	str	r2, [r7, #0]
  return result;
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	fab2 f282 	clz	r2, r2
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	40d3      	lsrs	r3, r2
 8003508:	4a04      	ldr	r2, [pc, #16]	@ (800351c <HAL_RCC_GetPCLK2Freq+0x40>)
 800350a:	5cd3      	ldrb	r3, [r2, r3]
 800350c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40021000 	.word	0x40021000
 800351c:	08004c64 	.word	0x08004c64

08003520 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b092      	sub	sp, #72	@ 0x48
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003530:	2300      	movs	r3, #0
 8003532:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 80d4 	beq.w	80036ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003544:	4b4e      	ldr	r3, [pc, #312]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10e      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003550:	4b4b      	ldr	r3, [pc, #300]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	4a4a      	ldr	r2, [pc, #296]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800355a:	61d3      	str	r3, [r2, #28]
 800355c:	4b48      	ldr	r3, [pc, #288]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003568:	2301      	movs	r3, #1
 800356a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356e:	4b45      	ldr	r3, [pc, #276]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003576:	2b00      	cmp	r3, #0
 8003578:	d118      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800357a:	4b42      	ldr	r3, [pc, #264]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a41      	ldr	r2, [pc, #260]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003580:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003584:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003586:	f7fd f9d9 	bl	800093c <HAL_GetTick>
 800358a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358c:	e008      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800358e:	f7fd f9d5 	bl	800093c <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b64      	cmp	r3, #100	@ 0x64
 800359a:	d901      	bls.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e1d6      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a0:	4b38      	ldr	r3, [pc, #224]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0f0      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035ac:	4b34      	ldr	r3, [pc, #208]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 8084 	beq.w	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d07c      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035cc:	4b2c      	ldr	r3, [pc, #176]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035da:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035de:	fa93 f3a3 	rbit	r3, r3
 80035e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80035e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035e6:	fab3 f383 	clz	r3, r3
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	461a      	mov	r2, r3
 80035ee:	4b26      	ldr	r3, [pc, #152]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	461a      	mov	r2, r3
 80035f6:	2301      	movs	r3, #1
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003602:	fa93 f3a3 	rbit	r3, r3
 8003606:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800360a:	fab3 f383 	clz	r3, r3
 800360e:	b2db      	uxtb	r3, r3
 8003610:	461a      	mov	r2, r3
 8003612:	4b1d      	ldr	r3, [pc, #116]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	461a      	mov	r2, r3
 800361a:	2300      	movs	r3, #0
 800361c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800361e:	4a18      	ldr	r2, [pc, #96]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003622:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d04b      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362e:	f7fd f985 	bl	800093c <HAL_GetTick>
 8003632:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003634:	e00a      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003636:	f7fd f981 	bl	800093c <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003644:	4293      	cmp	r3, r2
 8003646:	d901      	bls.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e180      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800364c:	2302      	movs	r3, #2
 800364e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003652:	fa93 f3a3 	rbit	r3, r3
 8003656:	627b      	str	r3, [r7, #36]	@ 0x24
 8003658:	2302      	movs	r3, #2
 800365a:	623b      	str	r3, [r7, #32]
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	fa93 f3a3 	rbit	r3, r3
 8003662:	61fb      	str	r3, [r7, #28]
  return result;
 8003664:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003666:	fab3 f383 	clz	r3, r3
 800366a:	b2db      	uxtb	r3, r3
 800366c:	095b      	lsrs	r3, r3, #5
 800366e:	b2db      	uxtb	r3, r3
 8003670:	f043 0302 	orr.w	r3, r3, #2
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d108      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800367a:	4b01      	ldr	r3, [pc, #4]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	e00d      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003680:	40021000 	.word	0x40021000
 8003684:	40007000 	.word	0x40007000
 8003688:	10908100 	.word	0x10908100
 800368c:	2302      	movs	r3, #2
 800368e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	fa93 f3a3 	rbit	r3, r3
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	4b9a      	ldr	r3, [pc, #616]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800369a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369c:	2202      	movs	r2, #2
 800369e:	613a      	str	r2, [r7, #16]
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	fa92 f2a2 	rbit	r2, r2
 80036a6:	60fa      	str	r2, [r7, #12]
  return result;
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	fab2 f282 	clz	r2, r2
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	f002 021f 	and.w	r2, r2, #31
 80036ba:	2101      	movs	r1, #1
 80036bc:	fa01 f202 	lsl.w	r2, r1, r2
 80036c0:	4013      	ands	r3, r2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0b7      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80036c6:	4b8f      	ldr	r3, [pc, #572]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	498c      	ldr	r1, [pc, #560]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036d8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d105      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036e0:	4b88      	ldr	r3, [pc, #544]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	4a87      	ldr	r2, [pc, #540]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d008      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036f8:	4b82      	ldr	r3, [pc, #520]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fc:	f023 0203 	bic.w	r2, r3, #3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	497f      	ldr	r1, [pc, #508]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003706:	4313      	orrs	r3, r2
 8003708:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d008      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003716:	4b7b      	ldr	r3, [pc, #492]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	4978      	ldr	r1, [pc, #480]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003724:	4313      	orrs	r3, r2
 8003726:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b00      	cmp	r3, #0
 8003732:	d008      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003734:	4b73      	ldr	r3, [pc, #460]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003738:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	4970      	ldr	r1, [pc, #448]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003742:	4313      	orrs	r3, r2
 8003744:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b00      	cmp	r3, #0
 8003750:	d008      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003752:	4b6c      	ldr	r3, [pc, #432]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003756:	f023 0210 	bic.w	r2, r3, #16
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	4969      	ldr	r1, [pc, #420]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003760:	4313      	orrs	r3, r2
 8003762:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d008      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003770:	4b64      	ldr	r3, [pc, #400]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800377c:	4961      	ldr	r1, [pc, #388]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800377e:	4313      	orrs	r3, r2
 8003780:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800378a:	2b00      	cmp	r3, #0
 800378c:	d008      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800378e:	4b5d      	ldr	r3, [pc, #372]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003792:	f023 0220 	bic.w	r2, r3, #32
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	495a      	ldr	r1, [pc, #360]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800379c:	4313      	orrs	r3, r2
 800379e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d008      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037ac:	4b55      	ldr	r3, [pc, #340]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b8:	4952      	ldr	r1, [pc, #328]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d008      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037ca:	4b4e      	ldr	r3, [pc, #312]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	494b      	ldr	r1, [pc, #300]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0310 	and.w	r3, r3, #16
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d008      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037e8:	4b46      	ldr	r3, [pc, #280]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ec:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	4943      	ldr	r1, [pc, #268]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003802:	2b00      	cmp	r3, #0
 8003804:	d008      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003806:	4b3f      	ldr	r3, [pc, #252]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003812:	493c      	ldr	r1, [pc, #240]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003814:	4313      	orrs	r3, r2
 8003816:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003824:	4b37      	ldr	r3, [pc, #220]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003828:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003830:	4934      	ldr	r1, [pc, #208]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003832:	4313      	orrs	r3, r2
 8003834:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800383e:	2b00      	cmp	r3, #0
 8003840:	d008      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003842:	4b30      	ldr	r3, [pc, #192]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003846:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384e:	492d      	ldr	r1, [pc, #180]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003850:	4313      	orrs	r3, r2
 8003852:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d008      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003860:	4b28      	ldr	r3, [pc, #160]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003864:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800386c:	4925      	ldr	r1, [pc, #148]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800386e:	4313      	orrs	r3, r2
 8003870:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d008      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800387e:	4b21      	ldr	r3, [pc, #132]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003882:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	491e      	ldr	r1, [pc, #120]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800388c:	4313      	orrs	r3, r2
 800388e:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d008      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800389c:	4b19      	ldr	r3, [pc, #100]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800389e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a8:	4916      	ldr	r1, [pc, #88]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d008      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80038ba:	4b12      	ldr	r3, [pc, #72]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038be:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c6:	490f      	ldr	r1, [pc, #60]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d008      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80038d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038dc:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e4:	4907      	ldr	r1, [pc, #28]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00c      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80038f6:	4b03      	ldr	r3, [pc, #12]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fa:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	e002      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003902:	bf00      	nop
 8003904:	40021000 	.word	0x40021000
 8003908:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800390a:	4913      	ldr	r1, [pc, #76]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800390c:	4313      	orrs	r3, r2
 800390e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d008      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800391c:	4b0e      	ldr	r3, [pc, #56]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800391e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003920:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003928:	490b      	ldr	r1, [pc, #44]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800392a:	4313      	orrs	r3, r2
 800392c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d008      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800393a:	4b07      	ldr	r3, [pc, #28]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003946:	4904      	ldr	r1, [pc, #16]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003948:	4313      	orrs	r3, r2
 800394a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3748      	adds	r7, #72	@ 0x48
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40021000 	.word	0x40021000

0800395c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e040      	b.n	80039f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003972:	2b00      	cmp	r3, #0
 8003974:	d106      	bne.n	8003984 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7fc fe9e 	bl	80006c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2224      	movs	r2, #36	@ 0x24
 8003988:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0201 	bic.w	r2, r2, #1
 8003998:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d002      	beq.n	80039a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 fa86 	bl	8003eb4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f8af 	bl	8003b0c <UART_SetConfig>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d101      	bne.n	80039b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e01b      	b.n	80039f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689a      	ldr	r2, [r3, #8]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0201 	orr.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 fb05 	bl	8003ff8 <UART_CheckIdleState>
 80039ee:	4603      	mov	r3, r0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08a      	sub	sp, #40	@ 0x28
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	603b      	str	r3, [r7, #0]
 8003a04:	4613      	mov	r3, r2
 8003a06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a0c:	2b20      	cmp	r3, #32
 8003a0e:	d177      	bne.n	8003b00 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <HAL_UART_Transmit+0x24>
 8003a16:	88fb      	ldrh	r3, [r7, #6]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e070      	b.n	8003b02 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2221      	movs	r2, #33	@ 0x21
 8003a2c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a2e:	f7fc ff85 	bl	800093c <HAL_GetTick>
 8003a32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	88fa      	ldrh	r2, [r7, #6]
 8003a38:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	88fa      	ldrh	r2, [r7, #6]
 8003a40:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a4c:	d108      	bne.n	8003a60 <HAL_UART_Transmit+0x68>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d104      	bne.n	8003a60 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003a56:	2300      	movs	r3, #0
 8003a58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	61bb      	str	r3, [r7, #24]
 8003a5e:	e003      	b.n	8003a68 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a64:	2300      	movs	r3, #0
 8003a66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a68:	e02f      	b.n	8003aca <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2200      	movs	r2, #0
 8003a72:	2180      	movs	r1, #128	@ 0x80
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 fb67 	bl	8004148 <UART_WaitOnFlagUntilTimeout>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d004      	beq.n	8003a8a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e03b      	b.n	8003b02 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10b      	bne.n	8003aa8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	881a      	ldrh	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a9c:	b292      	uxth	r2, r2
 8003a9e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	3302      	adds	r3, #2
 8003aa4:	61bb      	str	r3, [r7, #24]
 8003aa6:	e007      	b.n	8003ab8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	781a      	ldrb	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1c9      	bne.n	8003a6a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2200      	movs	r2, #0
 8003ade:	2140      	movs	r1, #64	@ 0x40
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 fb31 	bl	8004148 <UART_WaitOnFlagUntilTimeout>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d004      	beq.n	8003af6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2220      	movs	r2, #32
 8003af0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e005      	b.n	8003b02 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2220      	movs	r2, #32
 8003afa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003afc:	2300      	movs	r3, #0
 8003afe:	e000      	b.n	8003b02 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003b00:	2302      	movs	r3, #2
  }
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3720      	adds	r7, #32
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
	...

08003b0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b088      	sub	sp, #32
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b14:	2300      	movs	r3, #0
 8003b16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	4b92      	ldr	r3, [pc, #584]	@ (8003d80 <UART_SetConfig+0x274>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6812      	ldr	r2, [r2, #0]
 8003b3e:	6979      	ldr	r1, [r7, #20]
 8003b40:	430b      	orrs	r3, r1
 8003b42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a80      	ldr	r2, [pc, #512]	@ (8003d84 <UART_SetConfig+0x278>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d120      	bne.n	8003bca <UART_SetConfig+0xbe>
 8003b88:	4b7f      	ldr	r3, [pc, #508]	@ (8003d88 <UART_SetConfig+0x27c>)
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8c:	f003 0303 	and.w	r3, r3, #3
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	d817      	bhi.n	8003bc4 <UART_SetConfig+0xb8>
 8003b94:	a201      	add	r2, pc, #4	@ (adr r2, 8003b9c <UART_SetConfig+0x90>)
 8003b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9a:	bf00      	nop
 8003b9c:	08003bad 	.word	0x08003bad
 8003ba0:	08003bb9 	.word	0x08003bb9
 8003ba4:	08003bbf 	.word	0x08003bbf
 8003ba8:	08003bb3 	.word	0x08003bb3
 8003bac:	2301      	movs	r3, #1
 8003bae:	77fb      	strb	r3, [r7, #31]
 8003bb0:	e0b5      	b.n	8003d1e <UART_SetConfig+0x212>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	77fb      	strb	r3, [r7, #31]
 8003bb6:	e0b2      	b.n	8003d1e <UART_SetConfig+0x212>
 8003bb8:	2304      	movs	r3, #4
 8003bba:	77fb      	strb	r3, [r7, #31]
 8003bbc:	e0af      	b.n	8003d1e <UART_SetConfig+0x212>
 8003bbe:	2308      	movs	r3, #8
 8003bc0:	77fb      	strb	r3, [r7, #31]
 8003bc2:	e0ac      	b.n	8003d1e <UART_SetConfig+0x212>
 8003bc4:	2310      	movs	r3, #16
 8003bc6:	77fb      	strb	r3, [r7, #31]
 8003bc8:	e0a9      	b.n	8003d1e <UART_SetConfig+0x212>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a6f      	ldr	r2, [pc, #444]	@ (8003d8c <UART_SetConfig+0x280>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d124      	bne.n	8003c1e <UART_SetConfig+0x112>
 8003bd4:	4b6c      	ldr	r3, [pc, #432]	@ (8003d88 <UART_SetConfig+0x27c>)
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003bdc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003be0:	d011      	beq.n	8003c06 <UART_SetConfig+0xfa>
 8003be2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003be6:	d817      	bhi.n	8003c18 <UART_SetConfig+0x10c>
 8003be8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bec:	d011      	beq.n	8003c12 <UART_SetConfig+0x106>
 8003bee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bf2:	d811      	bhi.n	8003c18 <UART_SetConfig+0x10c>
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d003      	beq.n	8003c00 <UART_SetConfig+0xf4>
 8003bf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bfc:	d006      	beq.n	8003c0c <UART_SetConfig+0x100>
 8003bfe:	e00b      	b.n	8003c18 <UART_SetConfig+0x10c>
 8003c00:	2300      	movs	r3, #0
 8003c02:	77fb      	strb	r3, [r7, #31]
 8003c04:	e08b      	b.n	8003d1e <UART_SetConfig+0x212>
 8003c06:	2302      	movs	r3, #2
 8003c08:	77fb      	strb	r3, [r7, #31]
 8003c0a:	e088      	b.n	8003d1e <UART_SetConfig+0x212>
 8003c0c:	2304      	movs	r3, #4
 8003c0e:	77fb      	strb	r3, [r7, #31]
 8003c10:	e085      	b.n	8003d1e <UART_SetConfig+0x212>
 8003c12:	2308      	movs	r3, #8
 8003c14:	77fb      	strb	r3, [r7, #31]
 8003c16:	e082      	b.n	8003d1e <UART_SetConfig+0x212>
 8003c18:	2310      	movs	r3, #16
 8003c1a:	77fb      	strb	r3, [r7, #31]
 8003c1c:	e07f      	b.n	8003d1e <UART_SetConfig+0x212>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a5b      	ldr	r2, [pc, #364]	@ (8003d90 <UART_SetConfig+0x284>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d124      	bne.n	8003c72 <UART_SetConfig+0x166>
 8003c28:	4b57      	ldr	r3, [pc, #348]	@ (8003d88 <UART_SetConfig+0x27c>)
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003c30:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003c34:	d011      	beq.n	8003c5a <UART_SetConfig+0x14e>
 8003c36:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003c3a:	d817      	bhi.n	8003c6c <UART_SetConfig+0x160>
 8003c3c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003c40:	d011      	beq.n	8003c66 <UART_SetConfig+0x15a>
 8003c42:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003c46:	d811      	bhi.n	8003c6c <UART_SetConfig+0x160>
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <UART_SetConfig+0x148>
 8003c4c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c50:	d006      	beq.n	8003c60 <UART_SetConfig+0x154>
 8003c52:	e00b      	b.n	8003c6c <UART_SetConfig+0x160>
 8003c54:	2300      	movs	r3, #0
 8003c56:	77fb      	strb	r3, [r7, #31]
 8003c58:	e061      	b.n	8003d1e <UART_SetConfig+0x212>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	77fb      	strb	r3, [r7, #31]
 8003c5e:	e05e      	b.n	8003d1e <UART_SetConfig+0x212>
 8003c60:	2304      	movs	r3, #4
 8003c62:	77fb      	strb	r3, [r7, #31]
 8003c64:	e05b      	b.n	8003d1e <UART_SetConfig+0x212>
 8003c66:	2308      	movs	r3, #8
 8003c68:	77fb      	strb	r3, [r7, #31]
 8003c6a:	e058      	b.n	8003d1e <UART_SetConfig+0x212>
 8003c6c:	2310      	movs	r3, #16
 8003c6e:	77fb      	strb	r3, [r7, #31]
 8003c70:	e055      	b.n	8003d1e <UART_SetConfig+0x212>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a47      	ldr	r2, [pc, #284]	@ (8003d94 <UART_SetConfig+0x288>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d124      	bne.n	8003cc6 <UART_SetConfig+0x1ba>
 8003c7c:	4b42      	ldr	r3, [pc, #264]	@ (8003d88 <UART_SetConfig+0x27c>)
 8003c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c80:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003c84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c88:	d011      	beq.n	8003cae <UART_SetConfig+0x1a2>
 8003c8a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c8e:	d817      	bhi.n	8003cc0 <UART_SetConfig+0x1b4>
 8003c90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c94:	d011      	beq.n	8003cba <UART_SetConfig+0x1ae>
 8003c96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c9a:	d811      	bhi.n	8003cc0 <UART_SetConfig+0x1b4>
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <UART_SetConfig+0x19c>
 8003ca0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ca4:	d006      	beq.n	8003cb4 <UART_SetConfig+0x1a8>
 8003ca6:	e00b      	b.n	8003cc0 <UART_SetConfig+0x1b4>
 8003ca8:	2300      	movs	r3, #0
 8003caa:	77fb      	strb	r3, [r7, #31]
 8003cac:	e037      	b.n	8003d1e <UART_SetConfig+0x212>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	77fb      	strb	r3, [r7, #31]
 8003cb2:	e034      	b.n	8003d1e <UART_SetConfig+0x212>
 8003cb4:	2304      	movs	r3, #4
 8003cb6:	77fb      	strb	r3, [r7, #31]
 8003cb8:	e031      	b.n	8003d1e <UART_SetConfig+0x212>
 8003cba:	2308      	movs	r3, #8
 8003cbc:	77fb      	strb	r3, [r7, #31]
 8003cbe:	e02e      	b.n	8003d1e <UART_SetConfig+0x212>
 8003cc0:	2310      	movs	r3, #16
 8003cc2:	77fb      	strb	r3, [r7, #31]
 8003cc4:	e02b      	b.n	8003d1e <UART_SetConfig+0x212>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a33      	ldr	r2, [pc, #204]	@ (8003d98 <UART_SetConfig+0x28c>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d124      	bne.n	8003d1a <UART_SetConfig+0x20e>
 8003cd0:	4b2d      	ldr	r3, [pc, #180]	@ (8003d88 <UART_SetConfig+0x27c>)
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003cd8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003cdc:	d011      	beq.n	8003d02 <UART_SetConfig+0x1f6>
 8003cde:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ce2:	d817      	bhi.n	8003d14 <UART_SetConfig+0x208>
 8003ce4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ce8:	d011      	beq.n	8003d0e <UART_SetConfig+0x202>
 8003cea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003cee:	d811      	bhi.n	8003d14 <UART_SetConfig+0x208>
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <UART_SetConfig+0x1f0>
 8003cf4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cf8:	d006      	beq.n	8003d08 <UART_SetConfig+0x1fc>
 8003cfa:	e00b      	b.n	8003d14 <UART_SetConfig+0x208>
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	77fb      	strb	r3, [r7, #31]
 8003d00:	e00d      	b.n	8003d1e <UART_SetConfig+0x212>
 8003d02:	2302      	movs	r3, #2
 8003d04:	77fb      	strb	r3, [r7, #31]
 8003d06:	e00a      	b.n	8003d1e <UART_SetConfig+0x212>
 8003d08:	2304      	movs	r3, #4
 8003d0a:	77fb      	strb	r3, [r7, #31]
 8003d0c:	e007      	b.n	8003d1e <UART_SetConfig+0x212>
 8003d0e:	2308      	movs	r3, #8
 8003d10:	77fb      	strb	r3, [r7, #31]
 8003d12:	e004      	b.n	8003d1e <UART_SetConfig+0x212>
 8003d14:	2310      	movs	r3, #16
 8003d16:	77fb      	strb	r3, [r7, #31]
 8003d18:	e001      	b.n	8003d1e <UART_SetConfig+0x212>
 8003d1a:	2310      	movs	r3, #16
 8003d1c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d26:	d16b      	bne.n	8003e00 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003d28:	7ffb      	ldrb	r3, [r7, #31]
 8003d2a:	2b08      	cmp	r3, #8
 8003d2c:	d838      	bhi.n	8003da0 <UART_SetConfig+0x294>
 8003d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d34 <UART_SetConfig+0x228>)
 8003d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d34:	08003d59 	.word	0x08003d59
 8003d38:	08003d61 	.word	0x08003d61
 8003d3c:	08003d69 	.word	0x08003d69
 8003d40:	08003da1 	.word	0x08003da1
 8003d44:	08003d6f 	.word	0x08003d6f
 8003d48:	08003da1 	.word	0x08003da1
 8003d4c:	08003da1 	.word	0x08003da1
 8003d50:	08003da1 	.word	0x08003da1
 8003d54:	08003d77 	.word	0x08003d77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d58:	f7ff fb9e 	bl	8003498 <HAL_RCC_GetPCLK1Freq>
 8003d5c:	61b8      	str	r0, [r7, #24]
        break;
 8003d5e:	e024      	b.n	8003daa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d60:	f7ff fbbc 	bl	80034dc <HAL_RCC_GetPCLK2Freq>
 8003d64:	61b8      	str	r0, [r7, #24]
        break;
 8003d66:	e020      	b.n	8003daa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d68:	4b0c      	ldr	r3, [pc, #48]	@ (8003d9c <UART_SetConfig+0x290>)
 8003d6a:	61bb      	str	r3, [r7, #24]
        break;
 8003d6c:	e01d      	b.n	8003daa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d6e:	f7ff fb33 	bl	80033d8 <HAL_RCC_GetSysClockFreq>
 8003d72:	61b8      	str	r0, [r7, #24]
        break;
 8003d74:	e019      	b.n	8003daa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d7a:	61bb      	str	r3, [r7, #24]
        break;
 8003d7c:	e015      	b.n	8003daa <UART_SetConfig+0x29e>
 8003d7e:	bf00      	nop
 8003d80:	efff69f3 	.word	0xefff69f3
 8003d84:	40013800 	.word	0x40013800
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	40004400 	.word	0x40004400
 8003d90:	40004800 	.word	0x40004800
 8003d94:	40004c00 	.word	0x40004c00
 8003d98:	40005000 	.word	0x40005000
 8003d9c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	77bb      	strb	r3, [r7, #30]
        break;
 8003da8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d073      	beq.n	8003e98 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	005a      	lsls	r2, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	085b      	lsrs	r3, r3, #1
 8003dba:	441a      	add	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	2b0f      	cmp	r3, #15
 8003dca:	d916      	bls.n	8003dfa <UART_SetConfig+0x2ee>
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dd2:	d212      	bcs.n	8003dfa <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	f023 030f 	bic.w	r3, r3, #15
 8003ddc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	085b      	lsrs	r3, r3, #1
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	89fb      	ldrh	r3, [r7, #14]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	89fa      	ldrh	r2, [r7, #14]
 8003df6:	60da      	str	r2, [r3, #12]
 8003df8:	e04e      	b.n	8003e98 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	77bb      	strb	r3, [r7, #30]
 8003dfe:	e04b      	b.n	8003e98 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e00:	7ffb      	ldrb	r3, [r7, #31]
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d827      	bhi.n	8003e56 <UART_SetConfig+0x34a>
 8003e06:	a201      	add	r2, pc, #4	@ (adr r2, 8003e0c <UART_SetConfig+0x300>)
 8003e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0c:	08003e31 	.word	0x08003e31
 8003e10:	08003e39 	.word	0x08003e39
 8003e14:	08003e41 	.word	0x08003e41
 8003e18:	08003e57 	.word	0x08003e57
 8003e1c:	08003e47 	.word	0x08003e47
 8003e20:	08003e57 	.word	0x08003e57
 8003e24:	08003e57 	.word	0x08003e57
 8003e28:	08003e57 	.word	0x08003e57
 8003e2c:	08003e4f 	.word	0x08003e4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e30:	f7ff fb32 	bl	8003498 <HAL_RCC_GetPCLK1Freq>
 8003e34:	61b8      	str	r0, [r7, #24]
        break;
 8003e36:	e013      	b.n	8003e60 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e38:	f7ff fb50 	bl	80034dc <HAL_RCC_GetPCLK2Freq>
 8003e3c:	61b8      	str	r0, [r7, #24]
        break;
 8003e3e:	e00f      	b.n	8003e60 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e40:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb0 <UART_SetConfig+0x3a4>)
 8003e42:	61bb      	str	r3, [r7, #24]
        break;
 8003e44:	e00c      	b.n	8003e60 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e46:	f7ff fac7 	bl	80033d8 <HAL_RCC_GetSysClockFreq>
 8003e4a:	61b8      	str	r0, [r7, #24]
        break;
 8003e4c:	e008      	b.n	8003e60 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e52:	61bb      	str	r3, [r7, #24]
        break;
 8003e54:	e004      	b.n	8003e60 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	77bb      	strb	r3, [r7, #30]
        break;
 8003e5e:	bf00      	nop
    }

    if (pclk != 0U)
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d018      	beq.n	8003e98 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	085a      	lsrs	r2, r3, #1
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	441a      	add	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e78:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	2b0f      	cmp	r3, #15
 8003e7e:	d909      	bls.n	8003e94 <UART_SetConfig+0x388>
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e86:	d205      	bcs.n	8003e94 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	60da      	str	r2, [r3, #12]
 8003e92:	e001      	b.n	8003e98 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003ea4:	7fbb      	ldrb	r3, [r7, #30]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3720      	adds	r7, #32
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	007a1200 	.word	0x007a1200

08003eb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec0:	f003 0308 	and.w	r3, r3, #8
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00a      	beq.n	8003ede <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00a      	beq.n	8003f22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f48:	f003 0310 	and.w	r3, r3, #16
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6a:	f003 0320 	and.w	r3, r3, #32
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d01a      	beq.n	8003fca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fb2:	d10a      	bne.n	8003fca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	605a      	str	r2, [r3, #4]
  }
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b098      	sub	sp, #96	@ 0x60
 8003ffc:	af02      	add	r7, sp, #8
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004008:	f7fc fc98 	bl	800093c <HAL_GetTick>
 800400c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0308 	and.w	r3, r3, #8
 8004018:	2b08      	cmp	r3, #8
 800401a:	d12e      	bne.n	800407a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800401c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004024:	2200      	movs	r2, #0
 8004026:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f88c 	bl	8004148 <UART_WaitOnFlagUntilTimeout>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d021      	beq.n	800407a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800403e:	e853 3f00 	ldrex	r3, [r3]
 8004042:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004046:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800404a:	653b      	str	r3, [r7, #80]	@ 0x50
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	461a      	mov	r2, r3
 8004052:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004054:	647b      	str	r3, [r7, #68]	@ 0x44
 8004056:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004058:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800405a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800405c:	e841 2300 	strex	r3, r2, [r1]
 8004060:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e6      	bne.n	8004036 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2220      	movs	r2, #32
 800406c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e062      	b.n	8004140 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b04      	cmp	r3, #4
 8004086:	d149      	bne.n	800411c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004088:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004090:	2200      	movs	r2, #0
 8004092:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f856 	bl	8004148 <UART_WaitOnFlagUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d03c      	beq.n	800411c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040aa:	e853 3f00 	ldrex	r3, [r3]
 80040ae:	623b      	str	r3, [r7, #32]
   return(result);
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	461a      	mov	r2, r3
 80040be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80040c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040c8:	e841 2300 	strex	r3, r2, [r1]
 80040cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e6      	bne.n	80040a2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	3308      	adds	r3, #8
 80040da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	e853 3f00 	ldrex	r3, [r3]
 80040e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f023 0301 	bic.w	r3, r3, #1
 80040ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3308      	adds	r3, #8
 80040f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040f4:	61fa      	str	r2, [r7, #28]
 80040f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f8:	69b9      	ldr	r1, [r7, #24]
 80040fa:	69fa      	ldr	r2, [r7, #28]
 80040fc:	e841 2300 	strex	r3, r2, [r1]
 8004100:	617b      	str	r3, [r7, #20]
   return(result);
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1e5      	bne.n	80040d4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2220      	movs	r2, #32
 800410c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e011      	b.n	8004140 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2220      	movs	r2, #32
 8004120:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2220      	movs	r2, #32
 8004126:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3758      	adds	r7, #88	@ 0x58
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	603b      	str	r3, [r7, #0]
 8004154:	4613      	mov	r3, r2
 8004156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004158:	e04f      	b.n	80041fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004160:	d04b      	beq.n	80041fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004162:	f7fc fbeb 	bl	800093c <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	429a      	cmp	r2, r3
 8004170:	d302      	bcc.n	8004178 <UART_WaitOnFlagUntilTimeout+0x30>
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e04e      	b.n	800421a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0304 	and.w	r3, r3, #4
 8004186:	2b00      	cmp	r3, #0
 8004188:	d037      	beq.n	80041fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2b80      	cmp	r3, #128	@ 0x80
 800418e:	d034      	beq.n	80041fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	2b40      	cmp	r3, #64	@ 0x40
 8004194:	d031      	beq.n	80041fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d110      	bne.n	80041c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2208      	movs	r2, #8
 80041aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 f838 	bl	8004222 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2208      	movs	r2, #8
 80041b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e029      	b.n	800421a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041d4:	d111      	bne.n	80041fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f81e 	bl	8004222 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e00f      	b.n	800421a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	69da      	ldr	r2, [r3, #28]
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	4013      	ands	r3, r2
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	429a      	cmp	r2, r3
 8004208:	bf0c      	ite	eq
 800420a:	2301      	moveq	r3, #1
 800420c:	2300      	movne	r3, #0
 800420e:	b2db      	uxtb	r3, r3
 8004210:	461a      	mov	r2, r3
 8004212:	79fb      	ldrb	r3, [r7, #7]
 8004214:	429a      	cmp	r2, r3
 8004216:	d0a0      	beq.n	800415a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004222:	b480      	push	{r7}
 8004224:	b095      	sub	sp, #84	@ 0x54
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004232:	e853 3f00 	ldrex	r3, [r3]
 8004236:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800423a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800423e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004248:	643b      	str	r3, [r7, #64]	@ 0x40
 800424a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800424e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004250:	e841 2300 	strex	r3, r2, [r1]
 8004254:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1e6      	bne.n	800422a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3308      	adds	r3, #8
 8004262:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	61fb      	str	r3, [r7, #28]
   return(result);
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	f023 0301 	bic.w	r3, r3, #1
 8004272:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3308      	adds	r3, #8
 800427a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800427c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800427e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004280:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004282:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004284:	e841 2300 	strex	r3, r2, [r1]
 8004288:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800428a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e5      	bne.n	800425c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004294:	2b01      	cmp	r3, #1
 8004296:	d118      	bne.n	80042ca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	e853 3f00 	ldrex	r3, [r3]
 80042a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	f023 0310 	bic.w	r3, r3, #16
 80042ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042b6:	61bb      	str	r3, [r7, #24]
 80042b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ba:	6979      	ldr	r1, [r7, #20]
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	e841 2300 	strex	r3, r2, [r1]
 80042c2:	613b      	str	r3, [r7, #16]
   return(result);
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1e6      	bne.n	8004298 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80042de:	bf00      	nop
 80042e0:	3754      	adds	r7, #84	@ 0x54
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
	...

080042ec <siprintf>:
 80042ec:	b40e      	push	{r1, r2, r3}
 80042ee:	b500      	push	{lr}
 80042f0:	b09c      	sub	sp, #112	@ 0x70
 80042f2:	ab1d      	add	r3, sp, #116	@ 0x74
 80042f4:	9002      	str	r0, [sp, #8]
 80042f6:	9006      	str	r0, [sp, #24]
 80042f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80042fc:	4809      	ldr	r0, [pc, #36]	@ (8004324 <siprintf+0x38>)
 80042fe:	9107      	str	r1, [sp, #28]
 8004300:	9104      	str	r1, [sp, #16]
 8004302:	4909      	ldr	r1, [pc, #36]	@ (8004328 <siprintf+0x3c>)
 8004304:	f853 2b04 	ldr.w	r2, [r3], #4
 8004308:	9105      	str	r1, [sp, #20]
 800430a:	6800      	ldr	r0, [r0, #0]
 800430c:	9301      	str	r3, [sp, #4]
 800430e:	a902      	add	r1, sp, #8
 8004310:	f000 f994 	bl	800463c <_svfiprintf_r>
 8004314:	9b02      	ldr	r3, [sp, #8]
 8004316:	2200      	movs	r2, #0
 8004318:	701a      	strb	r2, [r3, #0]
 800431a:	b01c      	add	sp, #112	@ 0x70
 800431c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004320:	b003      	add	sp, #12
 8004322:	4770      	bx	lr
 8004324:	2000000c 	.word	0x2000000c
 8004328:	ffff0208 	.word	0xffff0208

0800432c <memset>:
 800432c:	4402      	add	r2, r0
 800432e:	4603      	mov	r3, r0
 8004330:	4293      	cmp	r3, r2
 8004332:	d100      	bne.n	8004336 <memset+0xa>
 8004334:	4770      	bx	lr
 8004336:	f803 1b01 	strb.w	r1, [r3], #1
 800433a:	e7f9      	b.n	8004330 <memset+0x4>

0800433c <__errno>:
 800433c:	4b01      	ldr	r3, [pc, #4]	@ (8004344 <__errno+0x8>)
 800433e:	6818      	ldr	r0, [r3, #0]
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	2000000c 	.word	0x2000000c

08004348 <__libc_init_array>:
 8004348:	b570      	push	{r4, r5, r6, lr}
 800434a:	4d0d      	ldr	r5, [pc, #52]	@ (8004380 <__libc_init_array+0x38>)
 800434c:	4c0d      	ldr	r4, [pc, #52]	@ (8004384 <__libc_init_array+0x3c>)
 800434e:	1b64      	subs	r4, r4, r5
 8004350:	10a4      	asrs	r4, r4, #2
 8004352:	2600      	movs	r6, #0
 8004354:	42a6      	cmp	r6, r4
 8004356:	d109      	bne.n	800436c <__libc_init_array+0x24>
 8004358:	4d0b      	ldr	r5, [pc, #44]	@ (8004388 <__libc_init_array+0x40>)
 800435a:	4c0c      	ldr	r4, [pc, #48]	@ (800438c <__libc_init_array+0x44>)
 800435c:	f000 fc66 	bl	8004c2c <_init>
 8004360:	1b64      	subs	r4, r4, r5
 8004362:	10a4      	asrs	r4, r4, #2
 8004364:	2600      	movs	r6, #0
 8004366:	42a6      	cmp	r6, r4
 8004368:	d105      	bne.n	8004376 <__libc_init_array+0x2e>
 800436a:	bd70      	pop	{r4, r5, r6, pc}
 800436c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004370:	4798      	blx	r3
 8004372:	3601      	adds	r6, #1
 8004374:	e7ee      	b.n	8004354 <__libc_init_array+0xc>
 8004376:	f855 3b04 	ldr.w	r3, [r5], #4
 800437a:	4798      	blx	r3
 800437c:	3601      	adds	r6, #1
 800437e:	e7f2      	b.n	8004366 <__libc_init_array+0x1e>
 8004380:	08004cc8 	.word	0x08004cc8
 8004384:	08004cc8 	.word	0x08004cc8
 8004388:	08004cc8 	.word	0x08004cc8
 800438c:	08004ccc 	.word	0x08004ccc

08004390 <__retarget_lock_acquire_recursive>:
 8004390:	4770      	bx	lr

08004392 <__retarget_lock_release_recursive>:
 8004392:	4770      	bx	lr

08004394 <_free_r>:
 8004394:	b538      	push	{r3, r4, r5, lr}
 8004396:	4605      	mov	r5, r0
 8004398:	2900      	cmp	r1, #0
 800439a:	d041      	beq.n	8004420 <_free_r+0x8c>
 800439c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043a0:	1f0c      	subs	r4, r1, #4
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	bfb8      	it	lt
 80043a6:	18e4      	addlt	r4, r4, r3
 80043a8:	f000 f8e0 	bl	800456c <__malloc_lock>
 80043ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004424 <_free_r+0x90>)
 80043ae:	6813      	ldr	r3, [r2, #0]
 80043b0:	b933      	cbnz	r3, 80043c0 <_free_r+0x2c>
 80043b2:	6063      	str	r3, [r4, #4]
 80043b4:	6014      	str	r4, [r2, #0]
 80043b6:	4628      	mov	r0, r5
 80043b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043bc:	f000 b8dc 	b.w	8004578 <__malloc_unlock>
 80043c0:	42a3      	cmp	r3, r4
 80043c2:	d908      	bls.n	80043d6 <_free_r+0x42>
 80043c4:	6820      	ldr	r0, [r4, #0]
 80043c6:	1821      	adds	r1, r4, r0
 80043c8:	428b      	cmp	r3, r1
 80043ca:	bf01      	itttt	eq
 80043cc:	6819      	ldreq	r1, [r3, #0]
 80043ce:	685b      	ldreq	r3, [r3, #4]
 80043d0:	1809      	addeq	r1, r1, r0
 80043d2:	6021      	streq	r1, [r4, #0]
 80043d4:	e7ed      	b.n	80043b2 <_free_r+0x1e>
 80043d6:	461a      	mov	r2, r3
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	b10b      	cbz	r3, 80043e0 <_free_r+0x4c>
 80043dc:	42a3      	cmp	r3, r4
 80043de:	d9fa      	bls.n	80043d6 <_free_r+0x42>
 80043e0:	6811      	ldr	r1, [r2, #0]
 80043e2:	1850      	adds	r0, r2, r1
 80043e4:	42a0      	cmp	r0, r4
 80043e6:	d10b      	bne.n	8004400 <_free_r+0x6c>
 80043e8:	6820      	ldr	r0, [r4, #0]
 80043ea:	4401      	add	r1, r0
 80043ec:	1850      	adds	r0, r2, r1
 80043ee:	4283      	cmp	r3, r0
 80043f0:	6011      	str	r1, [r2, #0]
 80043f2:	d1e0      	bne.n	80043b6 <_free_r+0x22>
 80043f4:	6818      	ldr	r0, [r3, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	6053      	str	r3, [r2, #4]
 80043fa:	4408      	add	r0, r1
 80043fc:	6010      	str	r0, [r2, #0]
 80043fe:	e7da      	b.n	80043b6 <_free_r+0x22>
 8004400:	d902      	bls.n	8004408 <_free_r+0x74>
 8004402:	230c      	movs	r3, #12
 8004404:	602b      	str	r3, [r5, #0]
 8004406:	e7d6      	b.n	80043b6 <_free_r+0x22>
 8004408:	6820      	ldr	r0, [r4, #0]
 800440a:	1821      	adds	r1, r4, r0
 800440c:	428b      	cmp	r3, r1
 800440e:	bf04      	itt	eq
 8004410:	6819      	ldreq	r1, [r3, #0]
 8004412:	685b      	ldreq	r3, [r3, #4]
 8004414:	6063      	str	r3, [r4, #4]
 8004416:	bf04      	itt	eq
 8004418:	1809      	addeq	r1, r1, r0
 800441a:	6021      	streq	r1, [r4, #0]
 800441c:	6054      	str	r4, [r2, #4]
 800441e:	e7ca      	b.n	80043b6 <_free_r+0x22>
 8004420:	bd38      	pop	{r3, r4, r5, pc}
 8004422:	bf00      	nop
 8004424:	200002b0 	.word	0x200002b0

08004428 <sbrk_aligned>:
 8004428:	b570      	push	{r4, r5, r6, lr}
 800442a:	4e0f      	ldr	r6, [pc, #60]	@ (8004468 <sbrk_aligned+0x40>)
 800442c:	460c      	mov	r4, r1
 800442e:	6831      	ldr	r1, [r6, #0]
 8004430:	4605      	mov	r5, r0
 8004432:	b911      	cbnz	r1, 800443a <sbrk_aligned+0x12>
 8004434:	f000 fba6 	bl	8004b84 <_sbrk_r>
 8004438:	6030      	str	r0, [r6, #0]
 800443a:	4621      	mov	r1, r4
 800443c:	4628      	mov	r0, r5
 800443e:	f000 fba1 	bl	8004b84 <_sbrk_r>
 8004442:	1c43      	adds	r3, r0, #1
 8004444:	d103      	bne.n	800444e <sbrk_aligned+0x26>
 8004446:	f04f 34ff 	mov.w	r4, #4294967295
 800444a:	4620      	mov	r0, r4
 800444c:	bd70      	pop	{r4, r5, r6, pc}
 800444e:	1cc4      	adds	r4, r0, #3
 8004450:	f024 0403 	bic.w	r4, r4, #3
 8004454:	42a0      	cmp	r0, r4
 8004456:	d0f8      	beq.n	800444a <sbrk_aligned+0x22>
 8004458:	1a21      	subs	r1, r4, r0
 800445a:	4628      	mov	r0, r5
 800445c:	f000 fb92 	bl	8004b84 <_sbrk_r>
 8004460:	3001      	adds	r0, #1
 8004462:	d1f2      	bne.n	800444a <sbrk_aligned+0x22>
 8004464:	e7ef      	b.n	8004446 <sbrk_aligned+0x1e>
 8004466:	bf00      	nop
 8004468:	200002ac 	.word	0x200002ac

0800446c <_malloc_r>:
 800446c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004470:	1ccd      	adds	r5, r1, #3
 8004472:	f025 0503 	bic.w	r5, r5, #3
 8004476:	3508      	adds	r5, #8
 8004478:	2d0c      	cmp	r5, #12
 800447a:	bf38      	it	cc
 800447c:	250c      	movcc	r5, #12
 800447e:	2d00      	cmp	r5, #0
 8004480:	4606      	mov	r6, r0
 8004482:	db01      	blt.n	8004488 <_malloc_r+0x1c>
 8004484:	42a9      	cmp	r1, r5
 8004486:	d904      	bls.n	8004492 <_malloc_r+0x26>
 8004488:	230c      	movs	r3, #12
 800448a:	6033      	str	r3, [r6, #0]
 800448c:	2000      	movs	r0, #0
 800448e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004492:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004568 <_malloc_r+0xfc>
 8004496:	f000 f869 	bl	800456c <__malloc_lock>
 800449a:	f8d8 3000 	ldr.w	r3, [r8]
 800449e:	461c      	mov	r4, r3
 80044a0:	bb44      	cbnz	r4, 80044f4 <_malloc_r+0x88>
 80044a2:	4629      	mov	r1, r5
 80044a4:	4630      	mov	r0, r6
 80044a6:	f7ff ffbf 	bl	8004428 <sbrk_aligned>
 80044aa:	1c43      	adds	r3, r0, #1
 80044ac:	4604      	mov	r4, r0
 80044ae:	d158      	bne.n	8004562 <_malloc_r+0xf6>
 80044b0:	f8d8 4000 	ldr.w	r4, [r8]
 80044b4:	4627      	mov	r7, r4
 80044b6:	2f00      	cmp	r7, #0
 80044b8:	d143      	bne.n	8004542 <_malloc_r+0xd6>
 80044ba:	2c00      	cmp	r4, #0
 80044bc:	d04b      	beq.n	8004556 <_malloc_r+0xea>
 80044be:	6823      	ldr	r3, [r4, #0]
 80044c0:	4639      	mov	r1, r7
 80044c2:	4630      	mov	r0, r6
 80044c4:	eb04 0903 	add.w	r9, r4, r3
 80044c8:	f000 fb5c 	bl	8004b84 <_sbrk_r>
 80044cc:	4581      	cmp	r9, r0
 80044ce:	d142      	bne.n	8004556 <_malloc_r+0xea>
 80044d0:	6821      	ldr	r1, [r4, #0]
 80044d2:	1a6d      	subs	r5, r5, r1
 80044d4:	4629      	mov	r1, r5
 80044d6:	4630      	mov	r0, r6
 80044d8:	f7ff ffa6 	bl	8004428 <sbrk_aligned>
 80044dc:	3001      	adds	r0, #1
 80044de:	d03a      	beq.n	8004556 <_malloc_r+0xea>
 80044e0:	6823      	ldr	r3, [r4, #0]
 80044e2:	442b      	add	r3, r5
 80044e4:	6023      	str	r3, [r4, #0]
 80044e6:	f8d8 3000 	ldr.w	r3, [r8]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	bb62      	cbnz	r2, 8004548 <_malloc_r+0xdc>
 80044ee:	f8c8 7000 	str.w	r7, [r8]
 80044f2:	e00f      	b.n	8004514 <_malloc_r+0xa8>
 80044f4:	6822      	ldr	r2, [r4, #0]
 80044f6:	1b52      	subs	r2, r2, r5
 80044f8:	d420      	bmi.n	800453c <_malloc_r+0xd0>
 80044fa:	2a0b      	cmp	r2, #11
 80044fc:	d917      	bls.n	800452e <_malloc_r+0xc2>
 80044fe:	1961      	adds	r1, r4, r5
 8004500:	42a3      	cmp	r3, r4
 8004502:	6025      	str	r5, [r4, #0]
 8004504:	bf18      	it	ne
 8004506:	6059      	strne	r1, [r3, #4]
 8004508:	6863      	ldr	r3, [r4, #4]
 800450a:	bf08      	it	eq
 800450c:	f8c8 1000 	streq.w	r1, [r8]
 8004510:	5162      	str	r2, [r4, r5]
 8004512:	604b      	str	r3, [r1, #4]
 8004514:	4630      	mov	r0, r6
 8004516:	f000 f82f 	bl	8004578 <__malloc_unlock>
 800451a:	f104 000b 	add.w	r0, r4, #11
 800451e:	1d23      	adds	r3, r4, #4
 8004520:	f020 0007 	bic.w	r0, r0, #7
 8004524:	1ac2      	subs	r2, r0, r3
 8004526:	bf1c      	itt	ne
 8004528:	1a1b      	subne	r3, r3, r0
 800452a:	50a3      	strne	r3, [r4, r2]
 800452c:	e7af      	b.n	800448e <_malloc_r+0x22>
 800452e:	6862      	ldr	r2, [r4, #4]
 8004530:	42a3      	cmp	r3, r4
 8004532:	bf0c      	ite	eq
 8004534:	f8c8 2000 	streq.w	r2, [r8]
 8004538:	605a      	strne	r2, [r3, #4]
 800453a:	e7eb      	b.n	8004514 <_malloc_r+0xa8>
 800453c:	4623      	mov	r3, r4
 800453e:	6864      	ldr	r4, [r4, #4]
 8004540:	e7ae      	b.n	80044a0 <_malloc_r+0x34>
 8004542:	463c      	mov	r4, r7
 8004544:	687f      	ldr	r7, [r7, #4]
 8004546:	e7b6      	b.n	80044b6 <_malloc_r+0x4a>
 8004548:	461a      	mov	r2, r3
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	42a3      	cmp	r3, r4
 800454e:	d1fb      	bne.n	8004548 <_malloc_r+0xdc>
 8004550:	2300      	movs	r3, #0
 8004552:	6053      	str	r3, [r2, #4]
 8004554:	e7de      	b.n	8004514 <_malloc_r+0xa8>
 8004556:	230c      	movs	r3, #12
 8004558:	6033      	str	r3, [r6, #0]
 800455a:	4630      	mov	r0, r6
 800455c:	f000 f80c 	bl	8004578 <__malloc_unlock>
 8004560:	e794      	b.n	800448c <_malloc_r+0x20>
 8004562:	6005      	str	r5, [r0, #0]
 8004564:	e7d6      	b.n	8004514 <_malloc_r+0xa8>
 8004566:	bf00      	nop
 8004568:	200002b0 	.word	0x200002b0

0800456c <__malloc_lock>:
 800456c:	4801      	ldr	r0, [pc, #4]	@ (8004574 <__malloc_lock+0x8>)
 800456e:	f7ff bf0f 	b.w	8004390 <__retarget_lock_acquire_recursive>
 8004572:	bf00      	nop
 8004574:	200002a8 	.word	0x200002a8

08004578 <__malloc_unlock>:
 8004578:	4801      	ldr	r0, [pc, #4]	@ (8004580 <__malloc_unlock+0x8>)
 800457a:	f7ff bf0a 	b.w	8004392 <__retarget_lock_release_recursive>
 800457e:	bf00      	nop
 8004580:	200002a8 	.word	0x200002a8

08004584 <__ssputs_r>:
 8004584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004588:	688e      	ldr	r6, [r1, #8]
 800458a:	461f      	mov	r7, r3
 800458c:	42be      	cmp	r6, r7
 800458e:	680b      	ldr	r3, [r1, #0]
 8004590:	4682      	mov	sl, r0
 8004592:	460c      	mov	r4, r1
 8004594:	4690      	mov	r8, r2
 8004596:	d82d      	bhi.n	80045f4 <__ssputs_r+0x70>
 8004598:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800459c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80045a0:	d026      	beq.n	80045f0 <__ssputs_r+0x6c>
 80045a2:	6965      	ldr	r5, [r4, #20]
 80045a4:	6909      	ldr	r1, [r1, #16]
 80045a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045aa:	eba3 0901 	sub.w	r9, r3, r1
 80045ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045b2:	1c7b      	adds	r3, r7, #1
 80045b4:	444b      	add	r3, r9
 80045b6:	106d      	asrs	r5, r5, #1
 80045b8:	429d      	cmp	r5, r3
 80045ba:	bf38      	it	cc
 80045bc:	461d      	movcc	r5, r3
 80045be:	0553      	lsls	r3, r2, #21
 80045c0:	d527      	bpl.n	8004612 <__ssputs_r+0x8e>
 80045c2:	4629      	mov	r1, r5
 80045c4:	f7ff ff52 	bl	800446c <_malloc_r>
 80045c8:	4606      	mov	r6, r0
 80045ca:	b360      	cbz	r0, 8004626 <__ssputs_r+0xa2>
 80045cc:	6921      	ldr	r1, [r4, #16]
 80045ce:	464a      	mov	r2, r9
 80045d0:	f000 fae8 	bl	8004ba4 <memcpy>
 80045d4:	89a3      	ldrh	r3, [r4, #12]
 80045d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80045da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045de:	81a3      	strh	r3, [r4, #12]
 80045e0:	6126      	str	r6, [r4, #16]
 80045e2:	6165      	str	r5, [r4, #20]
 80045e4:	444e      	add	r6, r9
 80045e6:	eba5 0509 	sub.w	r5, r5, r9
 80045ea:	6026      	str	r6, [r4, #0]
 80045ec:	60a5      	str	r5, [r4, #8]
 80045ee:	463e      	mov	r6, r7
 80045f0:	42be      	cmp	r6, r7
 80045f2:	d900      	bls.n	80045f6 <__ssputs_r+0x72>
 80045f4:	463e      	mov	r6, r7
 80045f6:	6820      	ldr	r0, [r4, #0]
 80045f8:	4632      	mov	r2, r6
 80045fa:	4641      	mov	r1, r8
 80045fc:	f000 faa8 	bl	8004b50 <memmove>
 8004600:	68a3      	ldr	r3, [r4, #8]
 8004602:	1b9b      	subs	r3, r3, r6
 8004604:	60a3      	str	r3, [r4, #8]
 8004606:	6823      	ldr	r3, [r4, #0]
 8004608:	4433      	add	r3, r6
 800460a:	6023      	str	r3, [r4, #0]
 800460c:	2000      	movs	r0, #0
 800460e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004612:	462a      	mov	r2, r5
 8004614:	f000 fad4 	bl	8004bc0 <_realloc_r>
 8004618:	4606      	mov	r6, r0
 800461a:	2800      	cmp	r0, #0
 800461c:	d1e0      	bne.n	80045e0 <__ssputs_r+0x5c>
 800461e:	6921      	ldr	r1, [r4, #16]
 8004620:	4650      	mov	r0, sl
 8004622:	f7ff feb7 	bl	8004394 <_free_r>
 8004626:	230c      	movs	r3, #12
 8004628:	f8ca 3000 	str.w	r3, [sl]
 800462c:	89a3      	ldrh	r3, [r4, #12]
 800462e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004632:	81a3      	strh	r3, [r4, #12]
 8004634:	f04f 30ff 	mov.w	r0, #4294967295
 8004638:	e7e9      	b.n	800460e <__ssputs_r+0x8a>
	...

0800463c <_svfiprintf_r>:
 800463c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004640:	4698      	mov	r8, r3
 8004642:	898b      	ldrh	r3, [r1, #12]
 8004644:	061b      	lsls	r3, r3, #24
 8004646:	b09d      	sub	sp, #116	@ 0x74
 8004648:	4607      	mov	r7, r0
 800464a:	460d      	mov	r5, r1
 800464c:	4614      	mov	r4, r2
 800464e:	d510      	bpl.n	8004672 <_svfiprintf_r+0x36>
 8004650:	690b      	ldr	r3, [r1, #16]
 8004652:	b973      	cbnz	r3, 8004672 <_svfiprintf_r+0x36>
 8004654:	2140      	movs	r1, #64	@ 0x40
 8004656:	f7ff ff09 	bl	800446c <_malloc_r>
 800465a:	6028      	str	r0, [r5, #0]
 800465c:	6128      	str	r0, [r5, #16]
 800465e:	b930      	cbnz	r0, 800466e <_svfiprintf_r+0x32>
 8004660:	230c      	movs	r3, #12
 8004662:	603b      	str	r3, [r7, #0]
 8004664:	f04f 30ff 	mov.w	r0, #4294967295
 8004668:	b01d      	add	sp, #116	@ 0x74
 800466a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800466e:	2340      	movs	r3, #64	@ 0x40
 8004670:	616b      	str	r3, [r5, #20]
 8004672:	2300      	movs	r3, #0
 8004674:	9309      	str	r3, [sp, #36]	@ 0x24
 8004676:	2320      	movs	r3, #32
 8004678:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800467c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004680:	2330      	movs	r3, #48	@ 0x30
 8004682:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004820 <_svfiprintf_r+0x1e4>
 8004686:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800468a:	f04f 0901 	mov.w	r9, #1
 800468e:	4623      	mov	r3, r4
 8004690:	469a      	mov	sl, r3
 8004692:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004696:	b10a      	cbz	r2, 800469c <_svfiprintf_r+0x60>
 8004698:	2a25      	cmp	r2, #37	@ 0x25
 800469a:	d1f9      	bne.n	8004690 <_svfiprintf_r+0x54>
 800469c:	ebba 0b04 	subs.w	fp, sl, r4
 80046a0:	d00b      	beq.n	80046ba <_svfiprintf_r+0x7e>
 80046a2:	465b      	mov	r3, fp
 80046a4:	4622      	mov	r2, r4
 80046a6:	4629      	mov	r1, r5
 80046a8:	4638      	mov	r0, r7
 80046aa:	f7ff ff6b 	bl	8004584 <__ssputs_r>
 80046ae:	3001      	adds	r0, #1
 80046b0:	f000 80a7 	beq.w	8004802 <_svfiprintf_r+0x1c6>
 80046b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80046b6:	445a      	add	r2, fp
 80046b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80046ba:	f89a 3000 	ldrb.w	r3, [sl]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 809f 	beq.w	8004802 <_svfiprintf_r+0x1c6>
 80046c4:	2300      	movs	r3, #0
 80046c6:	f04f 32ff 	mov.w	r2, #4294967295
 80046ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046ce:	f10a 0a01 	add.w	sl, sl, #1
 80046d2:	9304      	str	r3, [sp, #16]
 80046d4:	9307      	str	r3, [sp, #28]
 80046d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80046da:	931a      	str	r3, [sp, #104]	@ 0x68
 80046dc:	4654      	mov	r4, sl
 80046de:	2205      	movs	r2, #5
 80046e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046e4:	484e      	ldr	r0, [pc, #312]	@ (8004820 <_svfiprintf_r+0x1e4>)
 80046e6:	f7fb fd83 	bl	80001f0 <memchr>
 80046ea:	9a04      	ldr	r2, [sp, #16]
 80046ec:	b9d8      	cbnz	r0, 8004726 <_svfiprintf_r+0xea>
 80046ee:	06d0      	lsls	r0, r2, #27
 80046f0:	bf44      	itt	mi
 80046f2:	2320      	movmi	r3, #32
 80046f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046f8:	0711      	lsls	r1, r2, #28
 80046fa:	bf44      	itt	mi
 80046fc:	232b      	movmi	r3, #43	@ 0x2b
 80046fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004702:	f89a 3000 	ldrb.w	r3, [sl]
 8004706:	2b2a      	cmp	r3, #42	@ 0x2a
 8004708:	d015      	beq.n	8004736 <_svfiprintf_r+0xfa>
 800470a:	9a07      	ldr	r2, [sp, #28]
 800470c:	4654      	mov	r4, sl
 800470e:	2000      	movs	r0, #0
 8004710:	f04f 0c0a 	mov.w	ip, #10
 8004714:	4621      	mov	r1, r4
 8004716:	f811 3b01 	ldrb.w	r3, [r1], #1
 800471a:	3b30      	subs	r3, #48	@ 0x30
 800471c:	2b09      	cmp	r3, #9
 800471e:	d94b      	bls.n	80047b8 <_svfiprintf_r+0x17c>
 8004720:	b1b0      	cbz	r0, 8004750 <_svfiprintf_r+0x114>
 8004722:	9207      	str	r2, [sp, #28]
 8004724:	e014      	b.n	8004750 <_svfiprintf_r+0x114>
 8004726:	eba0 0308 	sub.w	r3, r0, r8
 800472a:	fa09 f303 	lsl.w	r3, r9, r3
 800472e:	4313      	orrs	r3, r2
 8004730:	9304      	str	r3, [sp, #16]
 8004732:	46a2      	mov	sl, r4
 8004734:	e7d2      	b.n	80046dc <_svfiprintf_r+0xa0>
 8004736:	9b03      	ldr	r3, [sp, #12]
 8004738:	1d19      	adds	r1, r3, #4
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	9103      	str	r1, [sp, #12]
 800473e:	2b00      	cmp	r3, #0
 8004740:	bfbb      	ittet	lt
 8004742:	425b      	neglt	r3, r3
 8004744:	f042 0202 	orrlt.w	r2, r2, #2
 8004748:	9307      	strge	r3, [sp, #28]
 800474a:	9307      	strlt	r3, [sp, #28]
 800474c:	bfb8      	it	lt
 800474e:	9204      	strlt	r2, [sp, #16]
 8004750:	7823      	ldrb	r3, [r4, #0]
 8004752:	2b2e      	cmp	r3, #46	@ 0x2e
 8004754:	d10a      	bne.n	800476c <_svfiprintf_r+0x130>
 8004756:	7863      	ldrb	r3, [r4, #1]
 8004758:	2b2a      	cmp	r3, #42	@ 0x2a
 800475a:	d132      	bne.n	80047c2 <_svfiprintf_r+0x186>
 800475c:	9b03      	ldr	r3, [sp, #12]
 800475e:	1d1a      	adds	r2, r3, #4
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	9203      	str	r2, [sp, #12]
 8004764:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004768:	3402      	adds	r4, #2
 800476a:	9305      	str	r3, [sp, #20]
 800476c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004830 <_svfiprintf_r+0x1f4>
 8004770:	7821      	ldrb	r1, [r4, #0]
 8004772:	2203      	movs	r2, #3
 8004774:	4650      	mov	r0, sl
 8004776:	f7fb fd3b 	bl	80001f0 <memchr>
 800477a:	b138      	cbz	r0, 800478c <_svfiprintf_r+0x150>
 800477c:	9b04      	ldr	r3, [sp, #16]
 800477e:	eba0 000a 	sub.w	r0, r0, sl
 8004782:	2240      	movs	r2, #64	@ 0x40
 8004784:	4082      	lsls	r2, r0
 8004786:	4313      	orrs	r3, r2
 8004788:	3401      	adds	r4, #1
 800478a:	9304      	str	r3, [sp, #16]
 800478c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004790:	4824      	ldr	r0, [pc, #144]	@ (8004824 <_svfiprintf_r+0x1e8>)
 8004792:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004796:	2206      	movs	r2, #6
 8004798:	f7fb fd2a 	bl	80001f0 <memchr>
 800479c:	2800      	cmp	r0, #0
 800479e:	d036      	beq.n	800480e <_svfiprintf_r+0x1d2>
 80047a0:	4b21      	ldr	r3, [pc, #132]	@ (8004828 <_svfiprintf_r+0x1ec>)
 80047a2:	bb1b      	cbnz	r3, 80047ec <_svfiprintf_r+0x1b0>
 80047a4:	9b03      	ldr	r3, [sp, #12]
 80047a6:	3307      	adds	r3, #7
 80047a8:	f023 0307 	bic.w	r3, r3, #7
 80047ac:	3308      	adds	r3, #8
 80047ae:	9303      	str	r3, [sp, #12]
 80047b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047b2:	4433      	add	r3, r6
 80047b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80047b6:	e76a      	b.n	800468e <_svfiprintf_r+0x52>
 80047b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80047bc:	460c      	mov	r4, r1
 80047be:	2001      	movs	r0, #1
 80047c0:	e7a8      	b.n	8004714 <_svfiprintf_r+0xd8>
 80047c2:	2300      	movs	r3, #0
 80047c4:	3401      	adds	r4, #1
 80047c6:	9305      	str	r3, [sp, #20]
 80047c8:	4619      	mov	r1, r3
 80047ca:	f04f 0c0a 	mov.w	ip, #10
 80047ce:	4620      	mov	r0, r4
 80047d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047d4:	3a30      	subs	r2, #48	@ 0x30
 80047d6:	2a09      	cmp	r2, #9
 80047d8:	d903      	bls.n	80047e2 <_svfiprintf_r+0x1a6>
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0c6      	beq.n	800476c <_svfiprintf_r+0x130>
 80047de:	9105      	str	r1, [sp, #20]
 80047e0:	e7c4      	b.n	800476c <_svfiprintf_r+0x130>
 80047e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80047e6:	4604      	mov	r4, r0
 80047e8:	2301      	movs	r3, #1
 80047ea:	e7f0      	b.n	80047ce <_svfiprintf_r+0x192>
 80047ec:	ab03      	add	r3, sp, #12
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	462a      	mov	r2, r5
 80047f2:	4b0e      	ldr	r3, [pc, #56]	@ (800482c <_svfiprintf_r+0x1f0>)
 80047f4:	a904      	add	r1, sp, #16
 80047f6:	4638      	mov	r0, r7
 80047f8:	f3af 8000 	nop.w
 80047fc:	1c42      	adds	r2, r0, #1
 80047fe:	4606      	mov	r6, r0
 8004800:	d1d6      	bne.n	80047b0 <_svfiprintf_r+0x174>
 8004802:	89ab      	ldrh	r3, [r5, #12]
 8004804:	065b      	lsls	r3, r3, #25
 8004806:	f53f af2d 	bmi.w	8004664 <_svfiprintf_r+0x28>
 800480a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800480c:	e72c      	b.n	8004668 <_svfiprintf_r+0x2c>
 800480e:	ab03      	add	r3, sp, #12
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	462a      	mov	r2, r5
 8004814:	4b05      	ldr	r3, [pc, #20]	@ (800482c <_svfiprintf_r+0x1f0>)
 8004816:	a904      	add	r1, sp, #16
 8004818:	4638      	mov	r0, r7
 800481a:	f000 f879 	bl	8004910 <_printf_i>
 800481e:	e7ed      	b.n	80047fc <_svfiprintf_r+0x1c0>
 8004820:	08004c8c 	.word	0x08004c8c
 8004824:	08004c96 	.word	0x08004c96
 8004828:	00000000 	.word	0x00000000
 800482c:	08004585 	.word	0x08004585
 8004830:	08004c92 	.word	0x08004c92

08004834 <_printf_common>:
 8004834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004838:	4616      	mov	r6, r2
 800483a:	4698      	mov	r8, r3
 800483c:	688a      	ldr	r2, [r1, #8]
 800483e:	690b      	ldr	r3, [r1, #16]
 8004840:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004844:	4293      	cmp	r3, r2
 8004846:	bfb8      	it	lt
 8004848:	4613      	movlt	r3, r2
 800484a:	6033      	str	r3, [r6, #0]
 800484c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004850:	4607      	mov	r7, r0
 8004852:	460c      	mov	r4, r1
 8004854:	b10a      	cbz	r2, 800485a <_printf_common+0x26>
 8004856:	3301      	adds	r3, #1
 8004858:	6033      	str	r3, [r6, #0]
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	0699      	lsls	r1, r3, #26
 800485e:	bf42      	ittt	mi
 8004860:	6833      	ldrmi	r3, [r6, #0]
 8004862:	3302      	addmi	r3, #2
 8004864:	6033      	strmi	r3, [r6, #0]
 8004866:	6825      	ldr	r5, [r4, #0]
 8004868:	f015 0506 	ands.w	r5, r5, #6
 800486c:	d106      	bne.n	800487c <_printf_common+0x48>
 800486e:	f104 0a19 	add.w	sl, r4, #25
 8004872:	68e3      	ldr	r3, [r4, #12]
 8004874:	6832      	ldr	r2, [r6, #0]
 8004876:	1a9b      	subs	r3, r3, r2
 8004878:	42ab      	cmp	r3, r5
 800487a:	dc26      	bgt.n	80048ca <_printf_common+0x96>
 800487c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004880:	6822      	ldr	r2, [r4, #0]
 8004882:	3b00      	subs	r3, #0
 8004884:	bf18      	it	ne
 8004886:	2301      	movne	r3, #1
 8004888:	0692      	lsls	r2, r2, #26
 800488a:	d42b      	bmi.n	80048e4 <_printf_common+0xb0>
 800488c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004890:	4641      	mov	r1, r8
 8004892:	4638      	mov	r0, r7
 8004894:	47c8      	blx	r9
 8004896:	3001      	adds	r0, #1
 8004898:	d01e      	beq.n	80048d8 <_printf_common+0xa4>
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	6922      	ldr	r2, [r4, #16]
 800489e:	f003 0306 	and.w	r3, r3, #6
 80048a2:	2b04      	cmp	r3, #4
 80048a4:	bf02      	ittt	eq
 80048a6:	68e5      	ldreq	r5, [r4, #12]
 80048a8:	6833      	ldreq	r3, [r6, #0]
 80048aa:	1aed      	subeq	r5, r5, r3
 80048ac:	68a3      	ldr	r3, [r4, #8]
 80048ae:	bf0c      	ite	eq
 80048b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048b4:	2500      	movne	r5, #0
 80048b6:	4293      	cmp	r3, r2
 80048b8:	bfc4      	itt	gt
 80048ba:	1a9b      	subgt	r3, r3, r2
 80048bc:	18ed      	addgt	r5, r5, r3
 80048be:	2600      	movs	r6, #0
 80048c0:	341a      	adds	r4, #26
 80048c2:	42b5      	cmp	r5, r6
 80048c4:	d11a      	bne.n	80048fc <_printf_common+0xc8>
 80048c6:	2000      	movs	r0, #0
 80048c8:	e008      	b.n	80048dc <_printf_common+0xa8>
 80048ca:	2301      	movs	r3, #1
 80048cc:	4652      	mov	r2, sl
 80048ce:	4641      	mov	r1, r8
 80048d0:	4638      	mov	r0, r7
 80048d2:	47c8      	blx	r9
 80048d4:	3001      	adds	r0, #1
 80048d6:	d103      	bne.n	80048e0 <_printf_common+0xac>
 80048d8:	f04f 30ff 	mov.w	r0, #4294967295
 80048dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048e0:	3501      	adds	r5, #1
 80048e2:	e7c6      	b.n	8004872 <_printf_common+0x3e>
 80048e4:	18e1      	adds	r1, r4, r3
 80048e6:	1c5a      	adds	r2, r3, #1
 80048e8:	2030      	movs	r0, #48	@ 0x30
 80048ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80048ee:	4422      	add	r2, r4
 80048f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80048f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80048f8:	3302      	adds	r3, #2
 80048fa:	e7c7      	b.n	800488c <_printf_common+0x58>
 80048fc:	2301      	movs	r3, #1
 80048fe:	4622      	mov	r2, r4
 8004900:	4641      	mov	r1, r8
 8004902:	4638      	mov	r0, r7
 8004904:	47c8      	blx	r9
 8004906:	3001      	adds	r0, #1
 8004908:	d0e6      	beq.n	80048d8 <_printf_common+0xa4>
 800490a:	3601      	adds	r6, #1
 800490c:	e7d9      	b.n	80048c2 <_printf_common+0x8e>
	...

08004910 <_printf_i>:
 8004910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004914:	7e0f      	ldrb	r7, [r1, #24]
 8004916:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004918:	2f78      	cmp	r7, #120	@ 0x78
 800491a:	4691      	mov	r9, r2
 800491c:	4680      	mov	r8, r0
 800491e:	460c      	mov	r4, r1
 8004920:	469a      	mov	sl, r3
 8004922:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004926:	d807      	bhi.n	8004938 <_printf_i+0x28>
 8004928:	2f62      	cmp	r7, #98	@ 0x62
 800492a:	d80a      	bhi.n	8004942 <_printf_i+0x32>
 800492c:	2f00      	cmp	r7, #0
 800492e:	f000 80d2 	beq.w	8004ad6 <_printf_i+0x1c6>
 8004932:	2f58      	cmp	r7, #88	@ 0x58
 8004934:	f000 80b9 	beq.w	8004aaa <_printf_i+0x19a>
 8004938:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800493c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004940:	e03a      	b.n	80049b8 <_printf_i+0xa8>
 8004942:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004946:	2b15      	cmp	r3, #21
 8004948:	d8f6      	bhi.n	8004938 <_printf_i+0x28>
 800494a:	a101      	add	r1, pc, #4	@ (adr r1, 8004950 <_printf_i+0x40>)
 800494c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004950:	080049a9 	.word	0x080049a9
 8004954:	080049bd 	.word	0x080049bd
 8004958:	08004939 	.word	0x08004939
 800495c:	08004939 	.word	0x08004939
 8004960:	08004939 	.word	0x08004939
 8004964:	08004939 	.word	0x08004939
 8004968:	080049bd 	.word	0x080049bd
 800496c:	08004939 	.word	0x08004939
 8004970:	08004939 	.word	0x08004939
 8004974:	08004939 	.word	0x08004939
 8004978:	08004939 	.word	0x08004939
 800497c:	08004abd 	.word	0x08004abd
 8004980:	080049e7 	.word	0x080049e7
 8004984:	08004a77 	.word	0x08004a77
 8004988:	08004939 	.word	0x08004939
 800498c:	08004939 	.word	0x08004939
 8004990:	08004adf 	.word	0x08004adf
 8004994:	08004939 	.word	0x08004939
 8004998:	080049e7 	.word	0x080049e7
 800499c:	08004939 	.word	0x08004939
 80049a0:	08004939 	.word	0x08004939
 80049a4:	08004a7f 	.word	0x08004a7f
 80049a8:	6833      	ldr	r3, [r6, #0]
 80049aa:	1d1a      	adds	r2, r3, #4
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6032      	str	r2, [r6, #0]
 80049b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80049b8:	2301      	movs	r3, #1
 80049ba:	e09d      	b.n	8004af8 <_printf_i+0x1e8>
 80049bc:	6833      	ldr	r3, [r6, #0]
 80049be:	6820      	ldr	r0, [r4, #0]
 80049c0:	1d19      	adds	r1, r3, #4
 80049c2:	6031      	str	r1, [r6, #0]
 80049c4:	0606      	lsls	r6, r0, #24
 80049c6:	d501      	bpl.n	80049cc <_printf_i+0xbc>
 80049c8:	681d      	ldr	r5, [r3, #0]
 80049ca:	e003      	b.n	80049d4 <_printf_i+0xc4>
 80049cc:	0645      	lsls	r5, r0, #25
 80049ce:	d5fb      	bpl.n	80049c8 <_printf_i+0xb8>
 80049d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80049d4:	2d00      	cmp	r5, #0
 80049d6:	da03      	bge.n	80049e0 <_printf_i+0xd0>
 80049d8:	232d      	movs	r3, #45	@ 0x2d
 80049da:	426d      	negs	r5, r5
 80049dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049e0:	4859      	ldr	r0, [pc, #356]	@ (8004b48 <_printf_i+0x238>)
 80049e2:	230a      	movs	r3, #10
 80049e4:	e011      	b.n	8004a0a <_printf_i+0xfa>
 80049e6:	6821      	ldr	r1, [r4, #0]
 80049e8:	6833      	ldr	r3, [r6, #0]
 80049ea:	0608      	lsls	r0, r1, #24
 80049ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80049f0:	d402      	bmi.n	80049f8 <_printf_i+0xe8>
 80049f2:	0649      	lsls	r1, r1, #25
 80049f4:	bf48      	it	mi
 80049f6:	b2ad      	uxthmi	r5, r5
 80049f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80049fa:	4853      	ldr	r0, [pc, #332]	@ (8004b48 <_printf_i+0x238>)
 80049fc:	6033      	str	r3, [r6, #0]
 80049fe:	bf14      	ite	ne
 8004a00:	230a      	movne	r3, #10
 8004a02:	2308      	moveq	r3, #8
 8004a04:	2100      	movs	r1, #0
 8004a06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a0a:	6866      	ldr	r6, [r4, #4]
 8004a0c:	60a6      	str	r6, [r4, #8]
 8004a0e:	2e00      	cmp	r6, #0
 8004a10:	bfa2      	ittt	ge
 8004a12:	6821      	ldrge	r1, [r4, #0]
 8004a14:	f021 0104 	bicge.w	r1, r1, #4
 8004a18:	6021      	strge	r1, [r4, #0]
 8004a1a:	b90d      	cbnz	r5, 8004a20 <_printf_i+0x110>
 8004a1c:	2e00      	cmp	r6, #0
 8004a1e:	d04b      	beq.n	8004ab8 <_printf_i+0x1a8>
 8004a20:	4616      	mov	r6, r2
 8004a22:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a26:	fb03 5711 	mls	r7, r3, r1, r5
 8004a2a:	5dc7      	ldrb	r7, [r0, r7]
 8004a2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a30:	462f      	mov	r7, r5
 8004a32:	42bb      	cmp	r3, r7
 8004a34:	460d      	mov	r5, r1
 8004a36:	d9f4      	bls.n	8004a22 <_printf_i+0x112>
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	d10b      	bne.n	8004a54 <_printf_i+0x144>
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	07df      	lsls	r7, r3, #31
 8004a40:	d508      	bpl.n	8004a54 <_printf_i+0x144>
 8004a42:	6923      	ldr	r3, [r4, #16]
 8004a44:	6861      	ldr	r1, [r4, #4]
 8004a46:	4299      	cmp	r1, r3
 8004a48:	bfde      	ittt	le
 8004a4a:	2330      	movle	r3, #48	@ 0x30
 8004a4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a50:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a54:	1b92      	subs	r2, r2, r6
 8004a56:	6122      	str	r2, [r4, #16]
 8004a58:	f8cd a000 	str.w	sl, [sp]
 8004a5c:	464b      	mov	r3, r9
 8004a5e:	aa03      	add	r2, sp, #12
 8004a60:	4621      	mov	r1, r4
 8004a62:	4640      	mov	r0, r8
 8004a64:	f7ff fee6 	bl	8004834 <_printf_common>
 8004a68:	3001      	adds	r0, #1
 8004a6a:	d14a      	bne.n	8004b02 <_printf_i+0x1f2>
 8004a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a70:	b004      	add	sp, #16
 8004a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a76:	6823      	ldr	r3, [r4, #0]
 8004a78:	f043 0320 	orr.w	r3, r3, #32
 8004a7c:	6023      	str	r3, [r4, #0]
 8004a7e:	4833      	ldr	r0, [pc, #204]	@ (8004b4c <_printf_i+0x23c>)
 8004a80:	2778      	movs	r7, #120	@ 0x78
 8004a82:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	6831      	ldr	r1, [r6, #0]
 8004a8a:	061f      	lsls	r7, r3, #24
 8004a8c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004a90:	d402      	bmi.n	8004a98 <_printf_i+0x188>
 8004a92:	065f      	lsls	r7, r3, #25
 8004a94:	bf48      	it	mi
 8004a96:	b2ad      	uxthmi	r5, r5
 8004a98:	6031      	str	r1, [r6, #0]
 8004a9a:	07d9      	lsls	r1, r3, #31
 8004a9c:	bf44      	itt	mi
 8004a9e:	f043 0320 	orrmi.w	r3, r3, #32
 8004aa2:	6023      	strmi	r3, [r4, #0]
 8004aa4:	b11d      	cbz	r5, 8004aae <_printf_i+0x19e>
 8004aa6:	2310      	movs	r3, #16
 8004aa8:	e7ac      	b.n	8004a04 <_printf_i+0xf4>
 8004aaa:	4827      	ldr	r0, [pc, #156]	@ (8004b48 <_printf_i+0x238>)
 8004aac:	e7e9      	b.n	8004a82 <_printf_i+0x172>
 8004aae:	6823      	ldr	r3, [r4, #0]
 8004ab0:	f023 0320 	bic.w	r3, r3, #32
 8004ab4:	6023      	str	r3, [r4, #0]
 8004ab6:	e7f6      	b.n	8004aa6 <_printf_i+0x196>
 8004ab8:	4616      	mov	r6, r2
 8004aba:	e7bd      	b.n	8004a38 <_printf_i+0x128>
 8004abc:	6833      	ldr	r3, [r6, #0]
 8004abe:	6825      	ldr	r5, [r4, #0]
 8004ac0:	6961      	ldr	r1, [r4, #20]
 8004ac2:	1d18      	adds	r0, r3, #4
 8004ac4:	6030      	str	r0, [r6, #0]
 8004ac6:	062e      	lsls	r6, r5, #24
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	d501      	bpl.n	8004ad0 <_printf_i+0x1c0>
 8004acc:	6019      	str	r1, [r3, #0]
 8004ace:	e002      	b.n	8004ad6 <_printf_i+0x1c6>
 8004ad0:	0668      	lsls	r0, r5, #25
 8004ad2:	d5fb      	bpl.n	8004acc <_printf_i+0x1bc>
 8004ad4:	8019      	strh	r1, [r3, #0]
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	6123      	str	r3, [r4, #16]
 8004ada:	4616      	mov	r6, r2
 8004adc:	e7bc      	b.n	8004a58 <_printf_i+0x148>
 8004ade:	6833      	ldr	r3, [r6, #0]
 8004ae0:	1d1a      	adds	r2, r3, #4
 8004ae2:	6032      	str	r2, [r6, #0]
 8004ae4:	681e      	ldr	r6, [r3, #0]
 8004ae6:	6862      	ldr	r2, [r4, #4]
 8004ae8:	2100      	movs	r1, #0
 8004aea:	4630      	mov	r0, r6
 8004aec:	f7fb fb80 	bl	80001f0 <memchr>
 8004af0:	b108      	cbz	r0, 8004af6 <_printf_i+0x1e6>
 8004af2:	1b80      	subs	r0, r0, r6
 8004af4:	6060      	str	r0, [r4, #4]
 8004af6:	6863      	ldr	r3, [r4, #4]
 8004af8:	6123      	str	r3, [r4, #16]
 8004afa:	2300      	movs	r3, #0
 8004afc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b00:	e7aa      	b.n	8004a58 <_printf_i+0x148>
 8004b02:	6923      	ldr	r3, [r4, #16]
 8004b04:	4632      	mov	r2, r6
 8004b06:	4649      	mov	r1, r9
 8004b08:	4640      	mov	r0, r8
 8004b0a:	47d0      	blx	sl
 8004b0c:	3001      	adds	r0, #1
 8004b0e:	d0ad      	beq.n	8004a6c <_printf_i+0x15c>
 8004b10:	6823      	ldr	r3, [r4, #0]
 8004b12:	079b      	lsls	r3, r3, #30
 8004b14:	d413      	bmi.n	8004b3e <_printf_i+0x22e>
 8004b16:	68e0      	ldr	r0, [r4, #12]
 8004b18:	9b03      	ldr	r3, [sp, #12]
 8004b1a:	4298      	cmp	r0, r3
 8004b1c:	bfb8      	it	lt
 8004b1e:	4618      	movlt	r0, r3
 8004b20:	e7a6      	b.n	8004a70 <_printf_i+0x160>
 8004b22:	2301      	movs	r3, #1
 8004b24:	4632      	mov	r2, r6
 8004b26:	4649      	mov	r1, r9
 8004b28:	4640      	mov	r0, r8
 8004b2a:	47d0      	blx	sl
 8004b2c:	3001      	adds	r0, #1
 8004b2e:	d09d      	beq.n	8004a6c <_printf_i+0x15c>
 8004b30:	3501      	adds	r5, #1
 8004b32:	68e3      	ldr	r3, [r4, #12]
 8004b34:	9903      	ldr	r1, [sp, #12]
 8004b36:	1a5b      	subs	r3, r3, r1
 8004b38:	42ab      	cmp	r3, r5
 8004b3a:	dcf2      	bgt.n	8004b22 <_printf_i+0x212>
 8004b3c:	e7eb      	b.n	8004b16 <_printf_i+0x206>
 8004b3e:	2500      	movs	r5, #0
 8004b40:	f104 0619 	add.w	r6, r4, #25
 8004b44:	e7f5      	b.n	8004b32 <_printf_i+0x222>
 8004b46:	bf00      	nop
 8004b48:	08004c9d 	.word	0x08004c9d
 8004b4c:	08004cae 	.word	0x08004cae

08004b50 <memmove>:
 8004b50:	4288      	cmp	r0, r1
 8004b52:	b510      	push	{r4, lr}
 8004b54:	eb01 0402 	add.w	r4, r1, r2
 8004b58:	d902      	bls.n	8004b60 <memmove+0x10>
 8004b5a:	4284      	cmp	r4, r0
 8004b5c:	4623      	mov	r3, r4
 8004b5e:	d807      	bhi.n	8004b70 <memmove+0x20>
 8004b60:	1e43      	subs	r3, r0, #1
 8004b62:	42a1      	cmp	r1, r4
 8004b64:	d008      	beq.n	8004b78 <memmove+0x28>
 8004b66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b6e:	e7f8      	b.n	8004b62 <memmove+0x12>
 8004b70:	4402      	add	r2, r0
 8004b72:	4601      	mov	r1, r0
 8004b74:	428a      	cmp	r2, r1
 8004b76:	d100      	bne.n	8004b7a <memmove+0x2a>
 8004b78:	bd10      	pop	{r4, pc}
 8004b7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b82:	e7f7      	b.n	8004b74 <memmove+0x24>

08004b84 <_sbrk_r>:
 8004b84:	b538      	push	{r3, r4, r5, lr}
 8004b86:	4d06      	ldr	r5, [pc, #24]	@ (8004ba0 <_sbrk_r+0x1c>)
 8004b88:	2300      	movs	r3, #0
 8004b8a:	4604      	mov	r4, r0
 8004b8c:	4608      	mov	r0, r1
 8004b8e:	602b      	str	r3, [r5, #0]
 8004b90:	f7fb fe08 	bl	80007a4 <_sbrk>
 8004b94:	1c43      	adds	r3, r0, #1
 8004b96:	d102      	bne.n	8004b9e <_sbrk_r+0x1a>
 8004b98:	682b      	ldr	r3, [r5, #0]
 8004b9a:	b103      	cbz	r3, 8004b9e <_sbrk_r+0x1a>
 8004b9c:	6023      	str	r3, [r4, #0]
 8004b9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ba0:	200002a4 	.word	0x200002a4

08004ba4 <memcpy>:
 8004ba4:	440a      	add	r2, r1
 8004ba6:	4291      	cmp	r1, r2
 8004ba8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bac:	d100      	bne.n	8004bb0 <memcpy+0xc>
 8004bae:	4770      	bx	lr
 8004bb0:	b510      	push	{r4, lr}
 8004bb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bba:	4291      	cmp	r1, r2
 8004bbc:	d1f9      	bne.n	8004bb2 <memcpy+0xe>
 8004bbe:	bd10      	pop	{r4, pc}

08004bc0 <_realloc_r>:
 8004bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bc4:	4680      	mov	r8, r0
 8004bc6:	4615      	mov	r5, r2
 8004bc8:	460c      	mov	r4, r1
 8004bca:	b921      	cbnz	r1, 8004bd6 <_realloc_r+0x16>
 8004bcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bd0:	4611      	mov	r1, r2
 8004bd2:	f7ff bc4b 	b.w	800446c <_malloc_r>
 8004bd6:	b92a      	cbnz	r2, 8004be4 <_realloc_r+0x24>
 8004bd8:	f7ff fbdc 	bl	8004394 <_free_r>
 8004bdc:	2400      	movs	r4, #0
 8004bde:	4620      	mov	r0, r4
 8004be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004be4:	f000 f81a 	bl	8004c1c <_malloc_usable_size_r>
 8004be8:	4285      	cmp	r5, r0
 8004bea:	4606      	mov	r6, r0
 8004bec:	d802      	bhi.n	8004bf4 <_realloc_r+0x34>
 8004bee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004bf2:	d8f4      	bhi.n	8004bde <_realloc_r+0x1e>
 8004bf4:	4629      	mov	r1, r5
 8004bf6:	4640      	mov	r0, r8
 8004bf8:	f7ff fc38 	bl	800446c <_malloc_r>
 8004bfc:	4607      	mov	r7, r0
 8004bfe:	2800      	cmp	r0, #0
 8004c00:	d0ec      	beq.n	8004bdc <_realloc_r+0x1c>
 8004c02:	42b5      	cmp	r5, r6
 8004c04:	462a      	mov	r2, r5
 8004c06:	4621      	mov	r1, r4
 8004c08:	bf28      	it	cs
 8004c0a:	4632      	movcs	r2, r6
 8004c0c:	f7ff ffca 	bl	8004ba4 <memcpy>
 8004c10:	4621      	mov	r1, r4
 8004c12:	4640      	mov	r0, r8
 8004c14:	f7ff fbbe 	bl	8004394 <_free_r>
 8004c18:	463c      	mov	r4, r7
 8004c1a:	e7e0      	b.n	8004bde <_realloc_r+0x1e>

08004c1c <_malloc_usable_size_r>:
 8004c1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c20:	1f18      	subs	r0, r3, #4
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	bfbc      	itt	lt
 8004c26:	580b      	ldrlt	r3, [r1, r0]
 8004c28:	18c0      	addlt	r0, r0, r3
 8004c2a:	4770      	bx	lr

08004c2c <_init>:
 8004c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c2e:	bf00      	nop
 8004c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c32:	bc08      	pop	{r3}
 8004c34:	469e      	mov	lr, r3
 8004c36:	4770      	bx	lr

08004c38 <_fini>:
 8004c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3a:	bf00      	nop
 8004c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c3e:	bc08      	pop	{r3}
 8004c40:	469e      	mov	lr, r3
 8004c42:	4770      	bx	lr
