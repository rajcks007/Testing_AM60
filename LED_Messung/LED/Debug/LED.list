
LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004894  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004a34  08004a34  00005a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ab0  08004ab0  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ab0  08004ab0  00005ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ab8  08004ab8  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ab8  08004ab8  00005ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004abc  08004abc  00005abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004ac0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          00000258  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002b4  200002b4  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ac23  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001815  00000000  00000000  00010caf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000808  00000000  00000000  000124c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000634  00000000  00000000  00012cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020879  00000000  00000000  00013304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c9c6  00000000  00000000  00033b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c92fd  00000000  00000000  00040543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00109840  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002500  00000000  00000000  00109884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0010bd84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004a1c 	.word	0x08004a1c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004a1c 	.word	0x08004a1c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000294:	f000 fae2 	bl	800085c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000298:	f000 f834 	bl	8000304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029c:	f000 f91e 	bl	80004dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002a0:	f000 f8ec 	bl	800047c <MX_USART2_UART_Init>
  MX_ADC2_Init();
 80002a4:	f000 f88c 	bl	80003c0 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc2);
 80002a8:	4811      	ldr	r0, [pc, #68]	@ (80002f0 <main+0x60>)
 80002aa:	f000 fd5b 	bl	8000d64 <HAL_ADC_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //get adc value
	  	  HAL_ADC_PollForConversion(&hadc2, 1);
 80002ae:	2101      	movs	r1, #1
 80002b0:	480f      	ldr	r0, [pc, #60]	@ (80002f0 <main+0x60>)
 80002b2:	f000 fe6d 	bl	8000f90 <HAL_ADC_PollForConversion>
	  	  value_adc = HAL_ADC_GetValue(&hadc2);
 80002b6:	480e      	ldr	r0, [pc, #56]	@ (80002f0 <main+0x60>)
 80002b8:	f000 ff6c 	bl	8001194 <HAL_ADC_GetValue>
 80002bc:	4603      	mov	r3, r0
 80002be:	4a0d      	ldr	r2, [pc, #52]	@ (80002f4 <main+0x64>)
 80002c0:	6013      	str	r3, [r2, #0]
	  	  sprintf(light, "/* %lu */ \r\n", value_adc);
 80002c2:	4b0c      	ldr	r3, [pc, #48]	@ (80002f4 <main+0x64>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	461a      	mov	r2, r3
 80002c8:	490b      	ldr	r1, [pc, #44]	@ (80002f8 <main+0x68>)
 80002ca:	480c      	ldr	r0, [pc, #48]	@ (80002fc <main+0x6c>)
 80002cc:	f003 ff06 	bl	80040dc <siprintf>
	  	  HAL_UART_Transmit(&huart2, (uint8_t*)light, strlen(light), HAL_MAX_DELAY);
 80002d0:	480a      	ldr	r0, [pc, #40]	@ (80002fc <main+0x6c>)
 80002d2:	f7ff ff85 	bl	80001e0 <strlen>
 80002d6:	4603      	mov	r3, r0
 80002d8:	b29a      	uxth	r2, r3
 80002da:	f04f 33ff 	mov.w	r3, #4294967295
 80002de:	4907      	ldr	r1, [pc, #28]	@ (80002fc <main+0x6c>)
 80002e0:	4807      	ldr	r0, [pc, #28]	@ (8000300 <main+0x70>)
 80002e2:	f003 fa81 	bl	80037e8 <HAL_UART_Transmit>
	  	  HAL_Delay(100);
 80002e6:	2064      	movs	r0, #100	@ 0x64
 80002e8:	f000 fb1e 	bl	8000928 <HAL_Delay>
	  	  HAL_ADC_PollForConversion(&hadc2, 1);
 80002ec:	bf00      	nop
 80002ee:	e7de      	b.n	80002ae <main+0x1e>
 80002f0:	20000078 	.word	0x20000078
 80002f4:	20000150 	.word	0x20000150
 80002f8:	08004a34 	.word	0x08004a34
 80002fc:	20000154 	.word	0x20000154
 8000300:	200000c8 	.word	0x200000c8

08000304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b0a6      	sub	sp, #152	@ 0x98
 8000308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800030e:	2228      	movs	r2, #40	@ 0x28
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f003 ff02 	bl	800411c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000318:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	605a      	str	r2, [r3, #4]
 8000322:	609a      	str	r2, [r3, #8]
 8000324:	60da      	str	r2, [r3, #12]
 8000326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2258      	movs	r2, #88	@ 0x58
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f003 fef4 	bl	800411c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000334:	2302      	movs	r3, #2
 8000336:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000338:	2301      	movs	r3, #1
 800033a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800033c:	2310      	movs	r3, #16
 800033e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000342:	2302      	movs	r3, #2
 8000344:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000348:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800034c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000350:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000354:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000362:	4618      	mov	r0, r3
 8000364:	f001 fd60 	bl	8001e28 <HAL_RCC_OscConfig>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800036e:	f000 f929 	bl	80005c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000372:	230f      	movs	r3, #15
 8000374:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000376:	2302      	movs	r3, #2
 8000378:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800037e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000382:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000384:	2300      	movs	r3, #0
 8000386:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000388:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800038c:	2102      	movs	r1, #2
 800038e:	4618      	mov	r0, r3
 8000390:	f002 fd9e 	bl	8002ed0 <HAL_RCC_ClockConfig>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800039a:	f000 f913 	bl	80005c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800039e:	2302      	movs	r3, #2
 80003a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	4618      	mov	r0, r3
 80003aa:	f002 ffb1 	bl	8003310 <HAL_RCCEx_PeriphCLKConfig>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80003b4:	f000 f906 	bl	80005c4 <Error_Handler>
  }
}
 80003b8:	bf00      	nop
 80003ba:	3798      	adds	r7, #152	@ 0x98
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}

080003c0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b086      	sub	sp, #24
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003c6:	463b      	mov	r3, r7
 80003c8:	2200      	movs	r2, #0
 80003ca:	601a      	str	r2, [r3, #0]
 80003cc:	605a      	str	r2, [r3, #4]
 80003ce:	609a      	str	r2, [r3, #8]
 80003d0:	60da      	str	r2, [r3, #12]
 80003d2:	611a      	str	r2, [r3, #16]
 80003d4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80003d6:	4b27      	ldr	r3, [pc, #156]	@ (8000474 <MX_ADC2_Init+0xb4>)
 80003d8:	4a27      	ldr	r2, [pc, #156]	@ (8000478 <MX_ADC2_Init+0xb8>)
 80003da:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80003dc:	4b25      	ldr	r3, [pc, #148]	@ (8000474 <MX_ADC2_Init+0xb4>)
 80003de:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80003e2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80003e4:	4b23      	ldr	r3, [pc, #140]	@ (8000474 <MX_ADC2_Init+0xb4>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003ea:	4b22      	ldr	r3, [pc, #136]	@ (8000474 <MX_ADC2_Init+0xb4>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80003f0:	4b20      	ldr	r3, [pc, #128]	@ (8000474 <MX_ADC2_Init+0xb4>)
 80003f2:	2201      	movs	r2, #1
 80003f4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80003f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000474 <MX_ADC2_Init+0xb4>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000474 <MX_ADC2_Init+0xb4>)
 8000400:	2200      	movs	r2, #0
 8000402:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000404:	4b1b      	ldr	r3, [pc, #108]	@ (8000474 <MX_ADC2_Init+0xb4>)
 8000406:	2201      	movs	r2, #1
 8000408:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800040a:	4b1a      	ldr	r3, [pc, #104]	@ (8000474 <MX_ADC2_Init+0xb4>)
 800040c:	2200      	movs	r2, #0
 800040e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000410:	4b18      	ldr	r3, [pc, #96]	@ (8000474 <MX_ADC2_Init+0xb4>)
 8000412:	2201      	movs	r2, #1
 8000414:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000416:	4b17      	ldr	r3, [pc, #92]	@ (8000474 <MX_ADC2_Init+0xb4>)
 8000418:	2200      	movs	r2, #0
 800041a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800041e:	4b15      	ldr	r3, [pc, #84]	@ (8000474 <MX_ADC2_Init+0xb4>)
 8000420:	2204      	movs	r2, #4
 8000422:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000424:	4b13      	ldr	r3, [pc, #76]	@ (8000474 <MX_ADC2_Init+0xb4>)
 8000426:	2200      	movs	r2, #0
 8000428:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800042a:	4b12      	ldr	r3, [pc, #72]	@ (8000474 <MX_ADC2_Init+0xb4>)
 800042c:	2200      	movs	r2, #0
 800042e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000430:	4810      	ldr	r0, [pc, #64]	@ (8000474 <MX_ADC2_Init+0xb4>)
 8000432:	f000 fa9d 	bl	8000970 <HAL_ADC_Init>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 800043c:	f000 f8c2 	bl	80005c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000440:	2303      	movs	r3, #3
 8000442:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000444:	2301      	movs	r3, #1
 8000446:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000448:	2300      	movs	r3, #0
 800044a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800044c:	2300      	movs	r3, #0
 800044e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000450:	2300      	movs	r3, #0
 8000452:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000454:	2300      	movs	r3, #0
 8000456:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000458:	463b      	mov	r3, r7
 800045a:	4619      	mov	r1, r3
 800045c:	4805      	ldr	r0, [pc, #20]	@ (8000474 <MX_ADC2_Init+0xb4>)
 800045e:	f000 fea7 	bl	80011b0 <HAL_ADC_ConfigChannel>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000468:	f000 f8ac 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800046c:	bf00      	nop
 800046e:	3718      	adds	r7, #24
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	20000078 	.word	0x20000078
 8000478:	50000100 	.word	0x50000100

0800047c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000480:	4b14      	ldr	r3, [pc, #80]	@ (80004d4 <MX_USART2_UART_Init+0x58>)
 8000482:	4a15      	ldr	r2, [pc, #84]	@ (80004d8 <MX_USART2_UART_Init+0x5c>)
 8000484:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000486:	4b13      	ldr	r3, [pc, #76]	@ (80004d4 <MX_USART2_UART_Init+0x58>)
 8000488:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800048c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800048e:	4b11      	ldr	r3, [pc, #68]	@ (80004d4 <MX_USART2_UART_Init+0x58>)
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000494:	4b0f      	ldr	r3, [pc, #60]	@ (80004d4 <MX_USART2_UART_Init+0x58>)
 8000496:	2200      	movs	r2, #0
 8000498:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800049a:	4b0e      	ldr	r3, [pc, #56]	@ (80004d4 <MX_USART2_UART_Init+0x58>)
 800049c:	2200      	movs	r2, #0
 800049e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004a0:	4b0c      	ldr	r3, [pc, #48]	@ (80004d4 <MX_USART2_UART_Init+0x58>)
 80004a2:	220c      	movs	r2, #12
 80004a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004a6:	4b0b      	ldr	r3, [pc, #44]	@ (80004d4 <MX_USART2_UART_Init+0x58>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004ac:	4b09      	ldr	r3, [pc, #36]	@ (80004d4 <MX_USART2_UART_Init+0x58>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004b2:	4b08      	ldr	r3, [pc, #32]	@ (80004d4 <MX_USART2_UART_Init+0x58>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004b8:	4b06      	ldr	r3, [pc, #24]	@ (80004d4 <MX_USART2_UART_Init+0x58>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004be:	4805      	ldr	r0, [pc, #20]	@ (80004d4 <MX_USART2_UART_Init+0x58>)
 80004c0:	f003 f944 	bl	800374c <HAL_UART_Init>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004ca:	f000 f87b 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	200000c8 	.word	0x200000c8
 80004d8:	40004400 	.word	0x40004400

080004dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08a      	sub	sp, #40	@ 0x28
 80004e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e2:	f107 0314 	add.w	r3, r7, #20
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
 80004f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f2:	4b32      	ldr	r3, [pc, #200]	@ (80005bc <MX_GPIO_Init+0xe0>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	4a31      	ldr	r2, [pc, #196]	@ (80005bc <MX_GPIO_Init+0xe0>)
 80004f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80004fc:	6153      	str	r3, [r2, #20]
 80004fe:	4b2f      	ldr	r3, [pc, #188]	@ (80005bc <MX_GPIO_Init+0xe0>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000506:	613b      	str	r3, [r7, #16]
 8000508:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800050a:	4b2c      	ldr	r3, [pc, #176]	@ (80005bc <MX_GPIO_Init+0xe0>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	4a2b      	ldr	r2, [pc, #172]	@ (80005bc <MX_GPIO_Init+0xe0>)
 8000510:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000514:	6153      	str	r3, [r2, #20]
 8000516:	4b29      	ldr	r3, [pc, #164]	@ (80005bc <MX_GPIO_Init+0xe0>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	4b26      	ldr	r3, [pc, #152]	@ (80005bc <MX_GPIO_Init+0xe0>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	4a25      	ldr	r2, [pc, #148]	@ (80005bc <MX_GPIO_Init+0xe0>)
 8000528:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800052c:	6153      	str	r3, [r2, #20]
 800052e:	4b23      	ldr	r3, [pc, #140]	@ (80005bc <MX_GPIO_Init+0xe0>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	4b20      	ldr	r3, [pc, #128]	@ (80005bc <MX_GPIO_Init+0xe0>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	4a1f      	ldr	r2, [pc, #124]	@ (80005bc <MX_GPIO_Init+0xe0>)
 8000540:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000544:	6153      	str	r3, [r2, #20]
 8000546:	4b1d      	ldr	r3, [pc, #116]	@ (80005bc <MX_GPIO_Init+0xe0>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	2120      	movs	r1, #32
 8000556:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800055a:	f001 fc4d 	bl	8001df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800055e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000564:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	4619      	mov	r1, r3
 8000574:	4812      	ldr	r0, [pc, #72]	@ (80005c0 <MX_GPIO_Init+0xe4>)
 8000576:	f001 fab5 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800057a:	2320      	movs	r3, #32
 800057c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057e:	2301      	movs	r3, #1
 8000580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	2300      	movs	r3, #0
 8000584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000586:	2300      	movs	r3, #0
 8000588:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	4619      	mov	r1, r3
 8000590:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000594:	f001 faa6 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000598:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800059c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800059e:	2300      	movs	r3, #0
 80005a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	4619      	mov	r1, r3
 80005ac:	4804      	ldr	r0, [pc, #16]	@ (80005c0 <MX_GPIO_Init+0xe4>)
 80005ae:	f001 fa99 	bl	8001ae4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005b2:	bf00      	nop
 80005b4:	3728      	adds	r7, #40	@ 0x28
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000
 80005c0:	48000800 	.word	0x48000800

080005c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c8:	b672      	cpsid	i
}
 80005ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <Error_Handler+0x8>

080005d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000614 <HAL_MspInit+0x44>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	4a0e      	ldr	r2, [pc, #56]	@ (8000614 <HAL_MspInit+0x44>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6193      	str	r3, [r2, #24]
 80005e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <HAL_MspInit+0x44>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ee:	4b09      	ldr	r3, [pc, #36]	@ (8000614 <HAL_MspInit+0x44>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	4a08      	ldr	r2, [pc, #32]	@ (8000614 <HAL_MspInit+0x44>)
 80005f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f8:	61d3      	str	r3, [r2, #28]
 80005fa:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <HAL_MspInit+0x44>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000606:	2007      	movs	r0, #7
 8000608:	f001 fa38 	bl	8001a7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40021000 	.word	0x40021000

08000618 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08a      	sub	sp, #40	@ 0x28
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000620:	f107 0314 	add.w	r3, r7, #20
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a15      	ldr	r2, [pc, #84]	@ (800068c <HAL_ADC_MspInit+0x74>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d124      	bne.n	8000684 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800063a:	4b15      	ldr	r3, [pc, #84]	@ (8000690 <HAL_ADC_MspInit+0x78>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	4a14      	ldr	r2, [pc, #80]	@ (8000690 <HAL_ADC_MspInit+0x78>)
 8000640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000644:	6153      	str	r3, [r2, #20]
 8000646:	4b12      	ldr	r3, [pc, #72]	@ (8000690 <HAL_ADC_MspInit+0x78>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	4b0f      	ldr	r3, [pc, #60]	@ (8000690 <HAL_ADC_MspInit+0x78>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	4a0e      	ldr	r2, [pc, #56]	@ (8000690 <HAL_ADC_MspInit+0x78>)
 8000658:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800065c:	6153      	str	r3, [r2, #20]
 800065e:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <HAL_ADC_MspInit+0x78>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA6     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800066a:	2340      	movs	r3, #64	@ 0x40
 800066c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800066e:	2303      	movs	r3, #3
 8000670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4619      	mov	r1, r3
 800067c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000680:	f001 fa30 	bl	8001ae4 <HAL_GPIO_Init>

  /* USER CODE END ADC2_MspInit 1 */

  }

}
 8000684:	bf00      	nop
 8000686:	3728      	adds	r7, #40	@ 0x28
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	50000100 	.word	0x50000100
 8000690:	40021000 	.word	0x40021000

08000694 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	@ 0x28
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a17      	ldr	r2, [pc, #92]	@ (8000710 <HAL_UART_MspInit+0x7c>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d128      	bne.n	8000708 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006b6:	4b17      	ldr	r3, [pc, #92]	@ (8000714 <HAL_UART_MspInit+0x80>)
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	4a16      	ldr	r2, [pc, #88]	@ (8000714 <HAL_UART_MspInit+0x80>)
 80006bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006c0:	61d3      	str	r3, [r2, #28]
 80006c2:	4b14      	ldr	r3, [pc, #80]	@ (8000714 <HAL_UART_MspInit+0x80>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <HAL_UART_MspInit+0x80>)
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	4a10      	ldr	r2, [pc, #64]	@ (8000714 <HAL_UART_MspInit+0x80>)
 80006d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006d8:	6153      	str	r3, [r2, #20]
 80006da:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <HAL_UART_MspInit+0x80>)
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006e6:	230c      	movs	r3, #12
 80006e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ea:	2302      	movs	r3, #2
 80006ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	2300      	movs	r3, #0
 80006f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006f6:	2307      	movs	r3, #7
 80006f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	4619      	mov	r1, r3
 8000700:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000704:	f001 f9ee 	bl	8001ae4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000708:	bf00      	nop
 800070a:	3728      	adds	r7, #40	@ 0x28
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40004400 	.word	0x40004400
 8000714:	40021000 	.word	0x40021000

08000718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800071c:	bf00      	nop
 800071e:	e7fd      	b.n	800071c <NMI_Handler+0x4>

08000720 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000724:	bf00      	nop
 8000726:	e7fd      	b.n	8000724 <HardFault_Handler+0x4>

08000728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800072c:	bf00      	nop
 800072e:	e7fd      	b.n	800072c <MemManage_Handler+0x4>

08000730 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <BusFault_Handler+0x4>

08000738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <UsageFault_Handler+0x4>

08000740 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr

0800075c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr

0800076a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800076e:	f000 f8bb 	bl	80008e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000780:	4a14      	ldr	r2, [pc, #80]	@ (80007d4 <_sbrk+0x5c>)
 8000782:	4b15      	ldr	r3, [pc, #84]	@ (80007d8 <_sbrk+0x60>)
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800078c:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <_sbrk+0x64>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d102      	bne.n	800079a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000794:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <_sbrk+0x64>)
 8000796:	4a12      	ldr	r2, [pc, #72]	@ (80007e0 <_sbrk+0x68>)
 8000798:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800079a:	4b10      	ldr	r3, [pc, #64]	@ (80007dc <_sbrk+0x64>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4413      	add	r3, r2
 80007a2:	693a      	ldr	r2, [r7, #16]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d207      	bcs.n	80007b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007a8:	f003 fcc0 	bl	800412c <__errno>
 80007ac:	4603      	mov	r3, r0
 80007ae:	220c      	movs	r2, #12
 80007b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007b2:	f04f 33ff 	mov.w	r3, #4294967295
 80007b6:	e009      	b.n	80007cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007b8:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <_sbrk+0x64>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007be:	4b07      	ldr	r3, [pc, #28]	@ (80007dc <_sbrk+0x64>)
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4413      	add	r3, r2
 80007c6:	4a05      	ldr	r2, [pc, #20]	@ (80007dc <_sbrk+0x64>)
 80007c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007ca:	68fb      	ldr	r3, [r7, #12]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3718      	adds	r7, #24
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20010000 	.word	0x20010000
 80007d8:	00000400 	.word	0x00000400
 80007dc:	20000164 	.word	0x20000164
 80007e0:	200002b8 	.word	0x200002b8

080007e4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <SystemInit+0x20>)
 80007ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007ee:	4a05      	ldr	r2, [pc, #20]	@ (8000804 <SystemInit+0x20>)
 80007f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000808:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000840 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800080c:	f7ff ffea 	bl	80007e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000810:	480c      	ldr	r0, [pc, #48]	@ (8000844 <LoopForever+0x6>)
  ldr r1, =_edata
 8000812:	490d      	ldr	r1, [pc, #52]	@ (8000848 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000814:	4a0d      	ldr	r2, [pc, #52]	@ (800084c <LoopForever+0xe>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000818:	e002      	b.n	8000820 <LoopCopyDataInit>

0800081a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800081a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800081c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081e:	3304      	adds	r3, #4

08000820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000824:	d3f9      	bcc.n	800081a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000826:	4a0a      	ldr	r2, [pc, #40]	@ (8000850 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000828:	4c0a      	ldr	r4, [pc, #40]	@ (8000854 <LoopForever+0x16>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800082c:	e001      	b.n	8000832 <LoopFillZerobss>

0800082e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000830:	3204      	adds	r2, #4

08000832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000834:	d3fb      	bcc.n	800082e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000836:	f003 fc7f 	bl	8004138 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800083a:	f7ff fd29 	bl	8000290 <main>

0800083e <LoopForever>:

LoopForever:
    b LoopForever
 800083e:	e7fe      	b.n	800083e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000840:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000848:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800084c:	08004ac0 	.word	0x08004ac0
  ldr r2, =_sbss
 8000850:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000854:	200002b4 	.word	0x200002b4

08000858 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000858:	e7fe      	b.n	8000858 <ADC1_2_IRQHandler>
	...

0800085c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000860:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <HAL_Init+0x28>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a07      	ldr	r2, [pc, #28]	@ (8000884 <HAL_Init+0x28>)
 8000866:	f043 0310 	orr.w	r3, r3, #16
 800086a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800086c:	2003      	movs	r0, #3
 800086e:	f001 f905 	bl	8001a7c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000872:	2000      	movs	r0, #0
 8000874:	f000 f808 	bl	8000888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000878:	f7ff feaa 	bl	80005d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40022000 	.word	0x40022000

08000888 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000890:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <HAL_InitTick+0x54>)
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <HAL_InitTick+0x58>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4619      	mov	r1, r3
 800089a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800089e:	fbb3 f3f1 	udiv	r3, r3, r1
 80008a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 f90f 	bl	8001aca <HAL_SYSTICK_Config>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	e00e      	b.n	80008d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2b0f      	cmp	r3, #15
 80008ba:	d80a      	bhi.n	80008d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008bc:	2200      	movs	r2, #0
 80008be:	6879      	ldr	r1, [r7, #4]
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	f001 f8e5 	bl	8001a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c8:	4a06      	ldr	r2, [pc, #24]	@ (80008e4 <HAL_InitTick+0x5c>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008ce:	2300      	movs	r3, #0
 80008d0:	e000      	b.n	80008d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000000 	.word	0x20000000
 80008e0:	20000008 	.word	0x20000008
 80008e4:	20000004 	.word	0x20000004

080008e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008ec:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <HAL_IncTick+0x20>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b06      	ldr	r3, [pc, #24]	@ (800090c <HAL_IncTick+0x24>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4413      	add	r3, r2
 80008f8:	4a04      	ldr	r2, [pc, #16]	@ (800090c <HAL_IncTick+0x24>)
 80008fa:	6013      	str	r3, [r2, #0]
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	20000008 	.word	0x20000008
 800090c:	20000168 	.word	0x20000168

08000910 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return uwTick;  
 8000914:	4b03      	ldr	r3, [pc, #12]	@ (8000924 <HAL_GetTick+0x14>)
 8000916:	681b      	ldr	r3, [r3, #0]
}
 8000918:	4618      	mov	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	20000168 	.word	0x20000168

08000928 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000930:	f7ff ffee 	bl	8000910 <HAL_GetTick>
 8000934:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000940:	d005      	beq.n	800094e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000942:	4b0a      	ldr	r3, [pc, #40]	@ (800096c <HAL_Delay+0x44>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	461a      	mov	r2, r3
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	4413      	add	r3, r2
 800094c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800094e:	bf00      	nop
 8000950:	f7ff ffde 	bl	8000910 <HAL_GetTick>
 8000954:	4602      	mov	r2, r0
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	429a      	cmp	r2, r3
 800095e:	d8f7      	bhi.n	8000950 <HAL_Delay+0x28>
  {
  }
}
 8000960:	bf00      	nop
 8000962:	bf00      	nop
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000008 	.word	0x20000008

08000970 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b09a      	sub	sp, #104	@ 0x68
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000978:	2300      	movs	r3, #0
 800097a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800097e:	2300      	movs	r3, #0
 8000980:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000982:	2300      	movs	r3, #0
 8000984:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d101      	bne.n	8000990 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800098c:	2301      	movs	r3, #1
 800098e:	e1e3      	b.n	8000d58 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	691b      	ldr	r3, [r3, #16]
 8000994:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099a:	f003 0310 	and.w	r3, r3, #16
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d176      	bne.n	8000a90 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d152      	bne.n	8000a50 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2200      	movs	r2, #0
 80009ae:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2200      	movs	r2, #0
 80009b4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2200      	movs	r2, #0
 80009ba:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2200      	movs	r2, #0
 80009c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f7ff fe27 	bl	8000618 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d13b      	bne.n	8000a50 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f000 ff37 	bl	800184c <ADC_Disable>
 80009de:	4603      	mov	r3, r0
 80009e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e8:	f003 0310 	and.w	r3, r3, #16
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d12f      	bne.n	8000a50 <HAL_ADC_Init+0xe0>
 80009f0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d12b      	bne.n	8000a50 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000a00:	f023 0302 	bic.w	r3, r3, #2
 8000a04:	f043 0202 	orr.w	r2, r3, #2
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	689a      	ldr	r2, [r3, #8]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000a1a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	689a      	ldr	r2, [r3, #8]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000a2a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000a2c:	4b92      	ldr	r3, [pc, #584]	@ (8000c78 <HAL_ADC_Init+0x308>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a92      	ldr	r2, [pc, #584]	@ (8000c7c <HAL_ADC_Init+0x30c>)
 8000a32:	fba2 2303 	umull	r2, r3, r2, r3
 8000a36:	0c9a      	lsrs	r2, r3, #18
 8000a38:	4613      	mov	r3, r2
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	4413      	add	r3, r2
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a42:	e002      	b.n	8000a4a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d1f9      	bne.n	8000a44 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d007      	beq.n	8000a6e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000a68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000a6c:	d110      	bne.n	8000a90 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a72:	f023 0312 	bic.w	r3, r3, #18
 8000a76:	f043 0210 	orr.w	r2, r3, #16
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a82:	f043 0201 	orr.w	r2, r3, #1
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a94:	f003 0310 	and.w	r3, r3, #16
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	f040 8150 	bne.w	8000d3e <HAL_ADC_Init+0x3ce>
 8000a9e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	f040 814b 	bne.w	8000d3e <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	f040 8143 	bne.w	8000d3e <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000ac0:	f043 0202 	orr.w	r2, r3, #2
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ad0:	d004      	beq.n	8000adc <HAL_ADC_Init+0x16c>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a6a      	ldr	r2, [pc, #424]	@ (8000c80 <HAL_ADC_Init+0x310>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d101      	bne.n	8000ae0 <HAL_ADC_Init+0x170>
 8000adc:	4b69      	ldr	r3, [pc, #420]	@ (8000c84 <HAL_ADC_Init+0x314>)
 8000ade:	e000      	b.n	8000ae2 <HAL_ADC_Init+0x172>
 8000ae0:	4b69      	ldr	r3, [pc, #420]	@ (8000c88 <HAL_ADC_Init+0x318>)
 8000ae2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000aec:	d102      	bne.n	8000af4 <HAL_ADC_Init+0x184>
 8000aee:	4b64      	ldr	r3, [pc, #400]	@ (8000c80 <HAL_ADC_Init+0x310>)
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	e01a      	b.n	8000b2a <HAL_ADC_Init+0x1ba>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a61      	ldr	r2, [pc, #388]	@ (8000c80 <HAL_ADC_Init+0x310>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d103      	bne.n	8000b06 <HAL_ADC_Init+0x196>
 8000afe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	e011      	b.n	8000b2a <HAL_ADC_Init+0x1ba>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a60      	ldr	r2, [pc, #384]	@ (8000c8c <HAL_ADC_Init+0x31c>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d102      	bne.n	8000b16 <HAL_ADC_Init+0x1a6>
 8000b10:	4b5f      	ldr	r3, [pc, #380]	@ (8000c90 <HAL_ADC_Init+0x320>)
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	e009      	b.n	8000b2a <HAL_ADC_Init+0x1ba>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a5d      	ldr	r2, [pc, #372]	@ (8000c90 <HAL_ADC_Init+0x320>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d102      	bne.n	8000b26 <HAL_ADC_Init+0x1b6>
 8000b20:	4b5a      	ldr	r3, [pc, #360]	@ (8000c8c <HAL_ADC_Init+0x31c>)
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	e001      	b.n	8000b2a <HAL_ADC_Init+0x1ba>
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	f003 0303 	and.w	r3, r3, #3
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d108      	bne.n	8000b4a <HAL_ADC_Init+0x1da>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d101      	bne.n	8000b4a <HAL_ADC_Init+0x1da>
 8000b46:	2301      	movs	r3, #1
 8000b48:	e000      	b.n	8000b4c <HAL_ADC_Init+0x1dc>
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d11c      	bne.n	8000b8a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b50:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d010      	beq.n	8000b78 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	f003 0303 	and.w	r3, r3, #3
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d107      	bne.n	8000b72 <HAL_ADC_Init+0x202>
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d101      	bne.n	8000b72 <HAL_ADC_Init+0x202>
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e000      	b.n	8000b74 <HAL_ADC_Init+0x204>
 8000b72:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d108      	bne.n	8000b8a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000b78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	431a      	orrs	r2, r3
 8000b86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b88:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	7e5b      	ldrb	r3, [r3, #25]
 8000b8e:	035b      	lsls	r3, r3, #13
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000b94:	2a01      	cmp	r2, #1
 8000b96:	d002      	beq.n	8000b9e <HAL_ADC_Init+0x22e>
 8000b98:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b9c:	e000      	b.n	8000ba0 <HAL_ADC_Init+0x230>
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	431a      	orrs	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	68db      	ldr	r3, [r3, #12]
 8000ba6:	431a      	orrs	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d11b      	bne.n	8000bf6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	7e5b      	ldrb	r3, [r3, #25]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d109      	bne.n	8000bda <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	045a      	lsls	r2, r3, #17
 8000bce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bd6:	663b      	str	r3, [r7, #96]	@ 0x60
 8000bd8:	e00d      	b.n	8000bf6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bde:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000be2:	f043 0220 	orr.w	r2, r3, #32
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bee:	f043 0201 	orr.w	r2, r3, #1
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d054      	beq.n	8000ca8 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a22      	ldr	r2, [pc, #136]	@ (8000c8c <HAL_ADC_Init+0x31c>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d004      	beq.n	8000c12 <HAL_ADC_Init+0x2a2>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a20      	ldr	r2, [pc, #128]	@ (8000c90 <HAL_ADC_Init+0x320>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d140      	bne.n	8000c94 <HAL_ADC_Init+0x324>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c16:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8000c1a:	d02a      	beq.n	8000c72 <HAL_ADC_Init+0x302>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c24:	d022      	beq.n	8000c6c <HAL_ADC_Init+0x2fc>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c2a:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8000c2e:	d01a      	beq.n	8000c66 <HAL_ADC_Init+0x2f6>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c34:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8000c38:	d012      	beq.n	8000c60 <HAL_ADC_Init+0x2f0>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c3e:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8000c42:	d00a      	beq.n	8000c5a <HAL_ADC_Init+0x2ea>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c48:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8000c4c:	d002      	beq.n	8000c54 <HAL_ADC_Init+0x2e4>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c52:	e023      	b.n	8000c9c <HAL_ADC_Init+0x32c>
 8000c54:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000c58:	e020      	b.n	8000c9c <HAL_ADC_Init+0x32c>
 8000c5a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000c5e:	e01d      	b.n	8000c9c <HAL_ADC_Init+0x32c>
 8000c60:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000c64:	e01a      	b.n	8000c9c <HAL_ADC_Init+0x32c>
 8000c66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c6a:	e017      	b.n	8000c9c <HAL_ADC_Init+0x32c>
 8000c6c:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8000c70:	e014      	b.n	8000c9c <HAL_ADC_Init+0x32c>
 8000c72:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000c76:	e011      	b.n	8000c9c <HAL_ADC_Init+0x32c>
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	431bde83 	.word	0x431bde83
 8000c80:	50000100 	.word	0x50000100
 8000c84:	50000300 	.word	0x50000300
 8000c88:	50000700 	.word	0x50000700
 8000c8c:	50000400 	.word	0x50000400
 8000c90:	50000500 	.word	0x50000500
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	f003 030c 	and.w	r3, r3, #12
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d114      	bne.n	8000ce0 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	6812      	ldr	r2, [r2, #0]
 8000cc0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000cc4:	f023 0302 	bic.w	r3, r3, #2
 8000cc8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	7e1b      	ldrb	r3, [r3, #24]
 8000cce:	039a      	lsls	r2, r3, #14
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	68da      	ldr	r2, [r3, #12]
 8000ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d60 <HAL_ADC_Init+0x3f0>)
 8000ce8:	4013      	ands	r3, r2
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	6812      	ldr	r2, [r2, #0]
 8000cee:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000cf0:	430b      	orrs	r3, r1
 8000cf2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	691b      	ldr	r3, [r3, #16]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d10c      	bne.n	8000d16 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	f023 010f 	bic.w	r1, r3, #15
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	1e5a      	subs	r2, r3, #1
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	430a      	orrs	r2, r1
 8000d12:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d14:	e007      	b.n	8000d26 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f022 020f 	bic.w	r2, r2, #15
 8000d24:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d30:	f023 0303 	bic.w	r3, r3, #3
 8000d34:	f043 0201 	orr.w	r2, r3, #1
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d3c:	e00a      	b.n	8000d54 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d42:	f023 0312 	bic.w	r3, r3, #18
 8000d46:	f043 0210 	orr.w	r2, r3, #16
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000d4e:	2301      	movs	r3, #1
 8000d50:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000d54:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3768      	adds	r7, #104	@ 0x68
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	fff0c007 	.word	0xfff0c007

08000d64 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	f003 0304 	and.w	r3, r3, #4
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f040 80f9 	bne.w	8000f72 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d101      	bne.n	8000d8e <HAL_ADC_Start+0x2a>
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	e0f4      	b.n	8000f78 <HAL_ADC_Start+0x214>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2201      	movs	r2, #1
 8000d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f000 fcf4 	bl	8001784 <ADC_Enable>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 80e0 	bne.w	8000f68 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000db0:	f023 0301 	bic.w	r3, r3, #1
 8000db4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000dc4:	d004      	beq.n	8000dd0 <HAL_ADC_Start+0x6c>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a6d      	ldr	r2, [pc, #436]	@ (8000f80 <HAL_ADC_Start+0x21c>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d106      	bne.n	8000dde <HAL_ADC_Start+0x7a>
 8000dd0:	4b6c      	ldr	r3, [pc, #432]	@ (8000f84 <HAL_ADC_Start+0x220>)
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	f003 031f 	and.w	r3, r3, #31
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d010      	beq.n	8000dfe <HAL_ADC_Start+0x9a>
 8000ddc:	e005      	b.n	8000dea <HAL_ADC_Start+0x86>
 8000dde:	4b6a      	ldr	r3, [pc, #424]	@ (8000f88 <HAL_ADC_Start+0x224>)
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	f003 031f 	and.w	r3, r3, #31
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d009      	beq.n	8000dfe <HAL_ADC_Start+0x9a>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000df2:	d004      	beq.n	8000dfe <HAL_ADC_Start+0x9a>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a64      	ldr	r2, [pc, #400]	@ (8000f8c <HAL_ADC_Start+0x228>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d115      	bne.n	8000e2a <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e02:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d036      	beq.n	8000e86 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000e20:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000e28:	e02d      	b.n	8000e86 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e3e:	d004      	beq.n	8000e4a <HAL_ADC_Start+0xe6>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a4e      	ldr	r2, [pc, #312]	@ (8000f80 <HAL_ADC_Start+0x21c>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d10a      	bne.n	8000e60 <HAL_ADC_Start+0xfc>
 8000e4a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	bf14      	ite	ne
 8000e58:	2301      	movne	r3, #1
 8000e5a:	2300      	moveq	r3, #0
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	e008      	b.n	8000e72 <HAL_ADC_Start+0x10e>
 8000e60:	4b4a      	ldr	r3, [pc, #296]	@ (8000f8c <HAL_ADC_Start+0x228>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	bf14      	ite	ne
 8000e6c:	2301      	movne	r3, #1
 8000e6e:	2300      	moveq	r3, #0
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d007      	beq.n	8000e86 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000e7e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000e92:	d106      	bne.n	8000ea2 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e98:	f023 0206 	bic.w	r2, r3, #6
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	645a      	str	r2, [r3, #68]	@ 0x44
 8000ea0:	e002      	b.n	8000ea8 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	221c      	movs	r2, #28
 8000eb6:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ec0:	d004      	beq.n	8000ecc <HAL_ADC_Start+0x168>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a2e      	ldr	r2, [pc, #184]	@ (8000f80 <HAL_ADC_Start+0x21c>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d106      	bne.n	8000eda <HAL_ADC_Start+0x176>
 8000ecc:	4b2d      	ldr	r3, [pc, #180]	@ (8000f84 <HAL_ADC_Start+0x220>)
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	f003 031f 	and.w	r3, r3, #31
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d03e      	beq.n	8000f56 <HAL_ADC_Start+0x1f2>
 8000ed8:	e005      	b.n	8000ee6 <HAL_ADC_Start+0x182>
 8000eda:	4b2b      	ldr	r3, [pc, #172]	@ (8000f88 <HAL_ADC_Start+0x224>)
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f003 031f 	and.w	r3, r3, #31
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d037      	beq.n	8000f56 <HAL_ADC_Start+0x1f2>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000eee:	d004      	beq.n	8000efa <HAL_ADC_Start+0x196>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a22      	ldr	r2, [pc, #136]	@ (8000f80 <HAL_ADC_Start+0x21c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d106      	bne.n	8000f08 <HAL_ADC_Start+0x1a4>
 8000efa:	4b22      	ldr	r3, [pc, #136]	@ (8000f84 <HAL_ADC_Start+0x220>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	f003 031f 	and.w	r3, r3, #31
 8000f02:	2b05      	cmp	r3, #5
 8000f04:	d027      	beq.n	8000f56 <HAL_ADC_Start+0x1f2>
 8000f06:	e005      	b.n	8000f14 <HAL_ADC_Start+0x1b0>
 8000f08:	4b1f      	ldr	r3, [pc, #124]	@ (8000f88 <HAL_ADC_Start+0x224>)
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f003 031f 	and.w	r3, r3, #31
 8000f10:	2b05      	cmp	r3, #5
 8000f12:	d020      	beq.n	8000f56 <HAL_ADC_Start+0x1f2>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f1c:	d004      	beq.n	8000f28 <HAL_ADC_Start+0x1c4>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a17      	ldr	r2, [pc, #92]	@ (8000f80 <HAL_ADC_Start+0x21c>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d106      	bne.n	8000f36 <HAL_ADC_Start+0x1d2>
 8000f28:	4b16      	ldr	r3, [pc, #88]	@ (8000f84 <HAL_ADC_Start+0x220>)
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	f003 031f 	and.w	r3, r3, #31
 8000f30:	2b09      	cmp	r3, #9
 8000f32:	d010      	beq.n	8000f56 <HAL_ADC_Start+0x1f2>
 8000f34:	e005      	b.n	8000f42 <HAL_ADC_Start+0x1de>
 8000f36:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <HAL_ADC_Start+0x224>)
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	f003 031f 	and.w	r3, r3, #31
 8000f3e:	2b09      	cmp	r3, #9
 8000f40:	d009      	beq.n	8000f56 <HAL_ADC_Start+0x1f2>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f4a:	d004      	beq.n	8000f56 <HAL_ADC_Start+0x1f2>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0e      	ldr	r2, [pc, #56]	@ (8000f8c <HAL_ADC_Start+0x228>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d10f      	bne.n	8000f76 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f042 0204 	orr.w	r2, r2, #4
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	e006      	b.n	8000f76 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8000f70:	e001      	b.n	8000f76 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f72:	2302      	movs	r3, #2
 8000f74:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	50000100 	.word	0x50000100
 8000f84:	50000300 	.word	0x50000300
 8000f88:	50000700 	.word	0x50000700
 8000f8c:	50000400 	.word	0x50000400

08000f90 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	2b08      	cmp	r3, #8
 8000fa4:	d102      	bne.n	8000fac <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000fa6:	2308      	movs	r3, #8
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	e03a      	b.n	8001022 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000fb4:	d004      	beq.n	8000fc0 <HAL_ADC_PollForConversion+0x30>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a72      	ldr	r2, [pc, #456]	@ (8001184 <HAL_ADC_PollForConversion+0x1f4>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d101      	bne.n	8000fc4 <HAL_ADC_PollForConversion+0x34>
 8000fc0:	4b71      	ldr	r3, [pc, #452]	@ (8001188 <HAL_ADC_PollForConversion+0x1f8>)
 8000fc2:	e000      	b.n	8000fc6 <HAL_ADC_PollForConversion+0x36>
 8000fc4:	4b71      	ldr	r3, [pc, #452]	@ (800118c <HAL_ADC_PollForConversion+0x1fc>)
 8000fc6:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f003 031f 	and.w	r3, r3, #31
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d112      	bne.n	8000ffa <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d11d      	bne.n	800101e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe6:	f043 0220 	orr.w	r2, r3, #32
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e0bf      	b.n	800117a <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d00b      	beq.n	800101e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100a:	f043 0220 	orr.w	r2, r3, #32
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e0ad      	b.n	800117a <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800101e:	230c      	movs	r3, #12
 8001020:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800102a:	d004      	beq.n	8001036 <HAL_ADC_PollForConversion+0xa6>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a54      	ldr	r2, [pc, #336]	@ (8001184 <HAL_ADC_PollForConversion+0x1f4>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d106      	bne.n	8001044 <HAL_ADC_PollForConversion+0xb4>
 8001036:	4b54      	ldr	r3, [pc, #336]	@ (8001188 <HAL_ADC_PollForConversion+0x1f8>)
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	f003 031f 	and.w	r3, r3, #31
 800103e:	2b00      	cmp	r3, #0
 8001040:	d010      	beq.n	8001064 <HAL_ADC_PollForConversion+0xd4>
 8001042:	e005      	b.n	8001050 <HAL_ADC_PollForConversion+0xc0>
 8001044:	4b51      	ldr	r3, [pc, #324]	@ (800118c <HAL_ADC_PollForConversion+0x1fc>)
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f003 031f 	and.w	r3, r3, #31
 800104c:	2b00      	cmp	r3, #0
 800104e:	d009      	beq.n	8001064 <HAL_ADC_PollForConversion+0xd4>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001058:	d004      	beq.n	8001064 <HAL_ADC_PollForConversion+0xd4>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a4c      	ldr	r2, [pc, #304]	@ (8001190 <HAL_ADC_PollForConversion+0x200>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d104      	bne.n	800106e <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	e00f      	b.n	800108e <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001076:	d004      	beq.n	8001082 <HAL_ADC_PollForConversion+0xf2>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a41      	ldr	r2, [pc, #260]	@ (8001184 <HAL_ADC_PollForConversion+0x1f4>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d102      	bne.n	8001088 <HAL_ADC_PollForConversion+0xf8>
 8001082:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001086:	e000      	b.n	800108a <HAL_ADC_PollForConversion+0xfa>
 8001088:	4b41      	ldr	r3, [pc, #260]	@ (8001190 <HAL_ADC_PollForConversion+0x200>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800108e:	f7ff fc3f 	bl	8000910 <HAL_GetTick>
 8001092:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001094:	e021      	b.n	80010da <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800109c:	d01d      	beq.n	80010da <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d007      	beq.n	80010b4 <HAL_ADC_PollForConversion+0x124>
 80010a4:	f7ff fc34 	bl	8000910 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d212      	bcs.n	80010da <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	4013      	ands	r3, r2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10b      	bne.n	80010da <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c6:	f043 0204 	orr.w	r2, r3, #4
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e04f      	b.n	800117a <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	4013      	ands	r3, r2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d0d6      	beq.n	8001096 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d131      	bne.n	8001166 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001108:	2b00      	cmp	r3, #0
 800110a:	d12c      	bne.n	8001166 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0308 	and.w	r3, r3, #8
 8001116:	2b08      	cmp	r3, #8
 8001118:	d125      	bne.n	8001166 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	2b00      	cmp	r3, #0
 8001126:	d112      	bne.n	800114e <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001138:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d112      	bne.n	8001166 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001144:	f043 0201 	orr.w	r2, r3, #1
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	641a      	str	r2, [r3, #64]	@ 0x40
 800114c:	e00b      	b.n	8001166 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001152:	f043 0220 	orr.w	r2, r3, #32
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115e:	f043 0201 	orr.w	r2, r3, #1
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d103      	bne.n	8001178 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3718      	adds	r7, #24
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	50000100 	.word	0x50000100
 8001188:	50000300 	.word	0x50000300
 800118c:	50000700 	.word	0x50000700
 8001190:	50000400 	.word	0x50000400

08001194 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
	...

080011b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b09b      	sub	sp, #108	@ 0x6c
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ba:	2300      	movs	r3, #0
 80011bc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d101      	bne.n	80011d2 <HAL_ADC_ConfigChannel+0x22>
 80011ce:	2302      	movs	r3, #2
 80011d0:	e2c8      	b.n	8001764 <HAL_ADC_ConfigChannel+0x5b4>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2201      	movs	r2, #1
 80011d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f040 82ac 	bne.w	8001742 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	d81c      	bhi.n	800122c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	4613      	mov	r3, r2
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	4413      	add	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	461a      	mov	r2, r3
 8001206:	231f      	movs	r3, #31
 8001208:	4093      	lsls	r3, r2
 800120a:	43db      	mvns	r3, r3
 800120c:	4019      	ands	r1, r3
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	6818      	ldr	r0, [r3, #0]
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	4413      	add	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	fa00 f203 	lsl.w	r2, r0, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	430a      	orrs	r2, r1
 8001228:	631a      	str	r2, [r3, #48]	@ 0x30
 800122a:	e063      	b.n	80012f4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b09      	cmp	r3, #9
 8001232:	d81e      	bhi.n	8001272 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	3b1e      	subs	r3, #30
 8001248:	221f      	movs	r2, #31
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	4019      	ands	r1, r3
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	6818      	ldr	r0, [r3, #0]
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	4613      	mov	r3, r2
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	4413      	add	r3, r2
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	3b1e      	subs	r3, #30
 8001264:	fa00 f203 	lsl.w	r2, r0, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	430a      	orrs	r2, r1
 800126e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001270:	e040      	b.n	80012f4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b0e      	cmp	r3, #14
 8001278:	d81e      	bhi.n	80012b8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	4613      	mov	r3, r2
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	4413      	add	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	3b3c      	subs	r3, #60	@ 0x3c
 800128e:	221f      	movs	r2, #31
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	4019      	ands	r1, r3
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	6818      	ldr	r0, [r3, #0]
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	4613      	mov	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	3b3c      	subs	r3, #60	@ 0x3c
 80012aa:	fa00 f203 	lsl.w	r2, r0, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	430a      	orrs	r2, r1
 80012b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80012b6:	e01d      	b.n	80012f4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	4613      	mov	r3, r2
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	4413      	add	r3, r2
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	3b5a      	subs	r3, #90	@ 0x5a
 80012cc:	221f      	movs	r2, #31
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	4019      	ands	r1, r3
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	6818      	ldr	r0, [r3, #0]
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	4613      	mov	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4413      	add	r3, r2
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	3b5a      	subs	r3, #90	@ 0x5a
 80012e8:	fa00 f203 	lsl.w	r2, r0, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	430a      	orrs	r2, r1
 80012f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 030c 	and.w	r3, r3, #12
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f040 80e5 	bne.w	80014ce <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b09      	cmp	r3, #9
 800130a:	d91c      	bls.n	8001346 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6999      	ldr	r1, [r3, #24]
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	3b1e      	subs	r3, #30
 800131e:	2207      	movs	r2, #7
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	4019      	ands	r1, r3
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	6898      	ldr	r0, [r3, #8]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4613      	mov	r3, r2
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	4413      	add	r3, r2
 8001336:	3b1e      	subs	r3, #30
 8001338:	fa00 f203 	lsl.w	r2, r0, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	430a      	orrs	r2, r1
 8001342:	619a      	str	r2, [r3, #24]
 8001344:	e019      	b.n	800137a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6959      	ldr	r1, [r3, #20]
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4613      	mov	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	2207      	movs	r2, #7
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	4019      	ands	r1, r3
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	6898      	ldr	r0, [r3, #8]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4613      	mov	r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	4413      	add	r3, r2
 800136e:	fa00 f203 	lsl.w	r2, r0, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	430a      	orrs	r2, r1
 8001378:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	695a      	ldr	r2, [r3, #20]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	08db      	lsrs	r3, r3, #3
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	3b01      	subs	r3, #1
 8001398:	2b03      	cmp	r3, #3
 800139a:	d84f      	bhi.n	800143c <HAL_ADC_ConfigChannel+0x28c>
 800139c:	a201      	add	r2, pc, #4	@ (adr r2, 80013a4 <HAL_ADC_ConfigChannel+0x1f4>)
 800139e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a2:	bf00      	nop
 80013a4:	080013b5 	.word	0x080013b5
 80013a8:	080013d7 	.word	0x080013d7
 80013ac:	080013f9 	.word	0x080013f9
 80013b0:	0800141b 	.word	0x0800141b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013ba:	4b99      	ldr	r3, [pc, #612]	@ (8001620 <HAL_ADC_ConfigChannel+0x470>)
 80013bc:	4013      	ands	r3, r2
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	0691      	lsls	r1, r2, #26
 80013c4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80013c6:	430a      	orrs	r2, r1
 80013c8:	431a      	orrs	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80013d2:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80013d4:	e07b      	b.n	80014ce <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80013dc:	4b90      	ldr	r3, [pc, #576]	@ (8001620 <HAL_ADC_ConfigChannel+0x470>)
 80013de:	4013      	ands	r3, r2
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	6812      	ldr	r2, [r2, #0]
 80013e4:	0691      	lsls	r1, r2, #26
 80013e6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80013e8:	430a      	orrs	r2, r1
 80013ea:	431a      	orrs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80013f4:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80013f6:	e06a      	b.n	80014ce <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80013fe:	4b88      	ldr	r3, [pc, #544]	@ (8001620 <HAL_ADC_ConfigChannel+0x470>)
 8001400:	4013      	ands	r3, r2
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	6812      	ldr	r2, [r2, #0]
 8001406:	0691      	lsls	r1, r2, #26
 8001408:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800140a:	430a      	orrs	r2, r1
 800140c:	431a      	orrs	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001416:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001418:	e059      	b.n	80014ce <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001420:	4b7f      	ldr	r3, [pc, #508]	@ (8001620 <HAL_ADC_ConfigChannel+0x470>)
 8001422:	4013      	ands	r3, r2
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	6812      	ldr	r2, [r2, #0]
 8001428:	0691      	lsls	r1, r2, #26
 800142a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800142c:	430a      	orrs	r2, r1
 800142e:	431a      	orrs	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001438:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800143a:	e048      	b.n	80014ce <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001442:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	069b      	lsls	r3, r3, #26
 800144c:	429a      	cmp	r2, r3
 800144e:	d107      	bne.n	8001460 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800145e:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001466:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	069b      	lsls	r3, r3, #26
 8001470:	429a      	cmp	r2, r3
 8001472:	d107      	bne.n	8001484 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001482:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800148a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	069b      	lsls	r3, r3, #26
 8001494:	429a      	cmp	r2, r3
 8001496:	d107      	bne.n	80014a8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80014a6:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80014ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	069b      	lsls	r3, r3, #26
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d107      	bne.n	80014cc <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80014ca:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80014cc:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d108      	bne.n	80014ee <HAL_ADC_ConfigChannel+0x33e>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d101      	bne.n	80014ee <HAL_ADC_ConfigChannel+0x33e>
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <HAL_ADC_ConfigChannel+0x340>
 80014ee:	2300      	movs	r3, #0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f040 8131 	bne.w	8001758 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d00f      	beq.n	800151e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2201      	movs	r2, #1
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43da      	mvns	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	400a      	ands	r2, r1
 8001518:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800151c:	e049      	b.n	80015b2 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2201      	movs	r2, #1
 800152c:	409a      	lsls	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b09      	cmp	r3, #9
 800153e:	d91c      	bls.n	800157a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6999      	ldr	r1, [r3, #24]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	4613      	mov	r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4413      	add	r3, r2
 8001550:	3b1b      	subs	r3, #27
 8001552:	2207      	movs	r2, #7
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	4019      	ands	r1, r3
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	6898      	ldr	r0, [r3, #8]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4613      	mov	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4413      	add	r3, r2
 800156a:	3b1b      	subs	r3, #27
 800156c:	fa00 f203 	lsl.w	r2, r0, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	430a      	orrs	r2, r1
 8001576:	619a      	str	r2, [r3, #24]
 8001578:	e01b      	b.n	80015b2 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6959      	ldr	r1, [r3, #20]
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	1c5a      	adds	r2, r3, #1
 8001586:	4613      	mov	r3, r2
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	4413      	add	r3, r2
 800158c:	2207      	movs	r2, #7
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	4019      	ands	r1, r3
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	6898      	ldr	r0, [r3, #8]
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	4613      	mov	r3, r2
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	4413      	add	r3, r2
 80015a6:	fa00 f203 	lsl.w	r2, r0, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015ba:	d004      	beq.n	80015c6 <HAL_ADC_ConfigChannel+0x416>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a18      	ldr	r2, [pc, #96]	@ (8001624 <HAL_ADC_ConfigChannel+0x474>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d101      	bne.n	80015ca <HAL_ADC_ConfigChannel+0x41a>
 80015c6:	4b18      	ldr	r3, [pc, #96]	@ (8001628 <HAL_ADC_ConfigChannel+0x478>)
 80015c8:	e000      	b.n	80015cc <HAL_ADC_ConfigChannel+0x41c>
 80015ca:	4b18      	ldr	r3, [pc, #96]	@ (800162c <HAL_ADC_ConfigChannel+0x47c>)
 80015cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b10      	cmp	r3, #16
 80015d4:	d105      	bne.n	80015e2 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80015d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d015      	beq.n	800160e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80015e6:	2b11      	cmp	r3, #17
 80015e8:	d105      	bne.n	80015f6 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80015ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00b      	beq.n	800160e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80015fa:	2b12      	cmp	r3, #18
 80015fc:	f040 80ac 	bne.w	8001758 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001600:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001608:	2b00      	cmp	r3, #0
 800160a:	f040 80a5 	bne.w	8001758 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001616:	d10b      	bne.n	8001630 <HAL_ADC_ConfigChannel+0x480>
 8001618:	4b02      	ldr	r3, [pc, #8]	@ (8001624 <HAL_ADC_ConfigChannel+0x474>)
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	e023      	b.n	8001666 <HAL_ADC_ConfigChannel+0x4b6>
 800161e:	bf00      	nop
 8001620:	83fff000 	.word	0x83fff000
 8001624:	50000100 	.word	0x50000100
 8001628:	50000300 	.word	0x50000300
 800162c:	50000700 	.word	0x50000700
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a4e      	ldr	r2, [pc, #312]	@ (8001770 <HAL_ADC_ConfigChannel+0x5c0>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d103      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x492>
 800163a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	e011      	b.n	8001666 <HAL_ADC_ConfigChannel+0x4b6>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a4b      	ldr	r2, [pc, #300]	@ (8001774 <HAL_ADC_ConfigChannel+0x5c4>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d102      	bne.n	8001652 <HAL_ADC_ConfigChannel+0x4a2>
 800164c:	4b4a      	ldr	r3, [pc, #296]	@ (8001778 <HAL_ADC_ConfigChannel+0x5c8>)
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	e009      	b.n	8001666 <HAL_ADC_ConfigChannel+0x4b6>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a48      	ldr	r2, [pc, #288]	@ (8001778 <HAL_ADC_ConfigChannel+0x5c8>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d102      	bne.n	8001662 <HAL_ADC_ConfigChannel+0x4b2>
 800165c:	4b45      	ldr	r3, [pc, #276]	@ (8001774 <HAL_ADC_ConfigChannel+0x5c4>)
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	e001      	b.n	8001666 <HAL_ADC_ConfigChannel+0x4b6>
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	2b01      	cmp	r3, #1
 8001672:	d108      	bne.n	8001686 <HAL_ADC_ConfigChannel+0x4d6>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b01      	cmp	r3, #1
 8001680:	d101      	bne.n	8001686 <HAL_ADC_ConfigChannel+0x4d6>
 8001682:	2301      	movs	r3, #1
 8001684:	e000      	b.n	8001688 <HAL_ADC_ConfigChannel+0x4d8>
 8001686:	2300      	movs	r3, #0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d150      	bne.n	800172e <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800168c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800168e:	2b00      	cmp	r3, #0
 8001690:	d010      	beq.n	80016b4 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	2b01      	cmp	r3, #1
 800169c:	d107      	bne.n	80016ae <HAL_ADC_ConfigChannel+0x4fe>
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d101      	bne.n	80016ae <HAL_ADC_ConfigChannel+0x4fe>
 80016aa:	2301      	movs	r3, #1
 80016ac:	e000      	b.n	80016b0 <HAL_ADC_ConfigChannel+0x500>
 80016ae:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d13c      	bne.n	800172e <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b10      	cmp	r3, #16
 80016ba:	d11d      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x548>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016c4:	d118      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80016c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80016ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016d0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016d2:	4b2a      	ldr	r3, [pc, #168]	@ (800177c <HAL_ADC_ConfigChannel+0x5cc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a2a      	ldr	r2, [pc, #168]	@ (8001780 <HAL_ADC_ConfigChannel+0x5d0>)
 80016d8:	fba2 2303 	umull	r2, r3, r2, r3
 80016dc:	0c9a      	lsrs	r2, r3, #18
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016e8:	e002      	b.n	80016f0 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f9      	bne.n	80016ea <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80016f6:	e02e      	b.n	8001756 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b11      	cmp	r3, #17
 80016fe:	d10b      	bne.n	8001718 <HAL_ADC_ConfigChannel+0x568>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001708:	d106      	bne.n	8001718 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800170a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001712:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001714:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001716:	e01e      	b.n	8001756 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b12      	cmp	r3, #18
 800171e:	d11a      	bne.n	8001756 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001720:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001728:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800172a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800172c:	e013      	b.n	8001756 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001732:	f043 0220 	orr.w	r2, r3, #32
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001740:	e00a      	b.n	8001758 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001746:	f043 0220 	orr.w	r2, r3, #32
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001754:	e000      	b.n	8001758 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001756:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001760:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001764:	4618      	mov	r0, r3
 8001766:	376c      	adds	r7, #108	@ 0x6c
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	50000100 	.word	0x50000100
 8001774:	50000400 	.word	0x50000400
 8001778:	50000500 	.word	0x50000500
 800177c:	20000000 	.word	0x20000000
 8001780:	431bde83 	.word	0x431bde83

08001784 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	2b01      	cmp	r3, #1
 800179c:	d108      	bne.n	80017b0 <ADC_Enable+0x2c>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d101      	bne.n	80017b0 <ADC_Enable+0x2c>
 80017ac:	2301      	movs	r3, #1
 80017ae:	e000      	b.n	80017b2 <ADC_Enable+0x2e>
 80017b0:	2300      	movs	r3, #0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d143      	bne.n	800183e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	4b22      	ldr	r3, [pc, #136]	@ (8001848 <ADC_Enable+0xc4>)
 80017be:	4013      	ands	r3, r2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d00d      	beq.n	80017e0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c8:	f043 0210 	orr.w	r2, r3, #16
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d4:	f043 0201 	orr.w	r2, r3, #1
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e02f      	b.n	8001840 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 0201 	orr.w	r2, r2, #1
 80017ee:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80017f0:	f7ff f88e 	bl	8000910 <HAL_GetTick>
 80017f4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017f6:	e01b      	b.n	8001830 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017f8:	f7ff f88a 	bl	8000910 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d914      	bls.n	8001830 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	2b01      	cmp	r3, #1
 8001812:	d00d      	beq.n	8001830 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001818:	f043 0210 	orr.w	r2, r3, #16
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001824:	f043 0201 	orr.w	r2, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e007      	b.n	8001840 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b01      	cmp	r3, #1
 800183c:	d1dc      	bne.n	80017f8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	8000003f 	.word	0x8000003f

0800184c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	2b01      	cmp	r3, #1
 8001864:	d108      	bne.n	8001878 <ADC_Disable+0x2c>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	2b01      	cmp	r3, #1
 8001872:	d101      	bne.n	8001878 <ADC_Disable+0x2c>
 8001874:	2301      	movs	r3, #1
 8001876:	e000      	b.n	800187a <ADC_Disable+0x2e>
 8001878:	2300      	movs	r3, #0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d047      	beq.n	800190e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 030d 	and.w	r3, r3, #13
 8001888:	2b01      	cmp	r3, #1
 800188a:	d10f      	bne.n	80018ac <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 0202 	orr.w	r2, r2, #2
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2203      	movs	r2, #3
 80018a2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80018a4:	f7ff f834 	bl	8000910 <HAL_GetTick>
 80018a8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80018aa:	e029      	b.n	8001900 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b0:	f043 0210 	orr.w	r2, r3, #16
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018bc:	f043 0201 	orr.w	r2, r3, #1
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e023      	b.n	8001910 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018c8:	f7ff f822 	bl	8000910 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d914      	bls.n	8001900 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d10d      	bne.n	8001900 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e8:	f043 0210 	orr.w	r2, r3, #16
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f4:	f043 0201 	orr.w	r2, r3, #1
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e007      	b.n	8001910 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b01      	cmp	r3, #1
 800190c:	d0dc      	beq.n	80018c8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001928:	4b0c      	ldr	r3, [pc, #48]	@ (800195c <__NVIC_SetPriorityGrouping+0x44>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001934:	4013      	ands	r3, r2
 8001936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001940:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001944:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800194a:	4a04      	ldr	r2, [pc, #16]	@ (800195c <__NVIC_SetPriorityGrouping+0x44>)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	60d3      	str	r3, [r2, #12]
}
 8001950:	bf00      	nop
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001964:	4b04      	ldr	r3, [pc, #16]	@ (8001978 <__NVIC_GetPriorityGrouping+0x18>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	0a1b      	lsrs	r3, r3, #8
 800196a:	f003 0307 	and.w	r3, r3, #7
}
 800196e:	4618      	mov	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	6039      	str	r1, [r7, #0]
 8001986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	2b00      	cmp	r3, #0
 800198e:	db0a      	blt.n	80019a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	b2da      	uxtb	r2, r3
 8001994:	490c      	ldr	r1, [pc, #48]	@ (80019c8 <__NVIC_SetPriority+0x4c>)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	0112      	lsls	r2, r2, #4
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	440b      	add	r3, r1
 80019a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a4:	e00a      	b.n	80019bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4908      	ldr	r1, [pc, #32]	@ (80019cc <__NVIC_SetPriority+0x50>)
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	3b04      	subs	r3, #4
 80019b4:	0112      	lsls	r2, r2, #4
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	440b      	add	r3, r1
 80019ba:	761a      	strb	r2, [r3, #24]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000e100 	.word	0xe000e100
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	@ 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f1c3 0307 	rsb	r3, r3, #7
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	bf28      	it	cs
 80019ee:	2304      	movcs	r3, #4
 80019f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3304      	adds	r3, #4
 80019f6:	2b06      	cmp	r3, #6
 80019f8:	d902      	bls.n	8001a00 <NVIC_EncodePriority+0x30>
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3b03      	subs	r3, #3
 80019fe:	e000      	b.n	8001a02 <NVIC_EncodePriority+0x32>
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	f04f 32ff 	mov.w	r2, #4294967295
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	401a      	ands	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a22:	43d9      	mvns	r1, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	4313      	orrs	r3, r2
         );
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3724      	adds	r7, #36	@ 0x24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a48:	d301      	bcc.n	8001a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e00f      	b.n	8001a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a78 <SysTick_Config+0x40>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a56:	210f      	movs	r1, #15
 8001a58:	f04f 30ff 	mov.w	r0, #4294967295
 8001a5c:	f7ff ff8e 	bl	800197c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a60:	4b05      	ldr	r3, [pc, #20]	@ (8001a78 <SysTick_Config+0x40>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a66:	4b04      	ldr	r3, [pc, #16]	@ (8001a78 <SysTick_Config+0x40>)
 8001a68:	2207      	movs	r2, #7
 8001a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	e000e010 	.word	0xe000e010

08001a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ff47 	bl	8001918 <__NVIC_SetPriorityGrouping>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa4:	f7ff ff5c 	bl	8001960 <__NVIC_GetPriorityGrouping>
 8001aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	6978      	ldr	r0, [r7, #20]
 8001ab0:	f7ff ff8e 	bl	80019d0 <NVIC_EncodePriority>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aba:	4611      	mov	r1, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff5d 	bl	800197c <__NVIC_SetPriority>
}
 8001ac2:	bf00      	nop
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ffb0 	bl	8001a38 <SysTick_Config>
 8001ad8:	4603      	mov	r3, r0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b087      	sub	sp, #28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001af2:	e160      	b.n	8001db6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	2101      	movs	r1, #1
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	fa01 f303 	lsl.w	r3, r1, r3
 8001b00:	4013      	ands	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 8152 	beq.w	8001db0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d005      	beq.n	8001b24 <HAL_GPIO_Init+0x40>
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d130      	bne.n	8001b86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	2203      	movs	r2, #3
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	68da      	ldr	r2, [r3, #12]
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	091b      	lsrs	r3, r3, #4
 8001b70:	f003 0201 	and.w	r2, r3, #1
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	2b03      	cmp	r3, #3
 8001b90:	d017      	beq.n	8001bc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d123      	bne.n	8001c16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	08da      	lsrs	r2, r3, #3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3208      	adds	r2, #8
 8001bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	220f      	movs	r2, #15
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43db      	mvns	r3, r3
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	691a      	ldr	r2, [r3, #16]
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	08da      	lsrs	r2, r3, #3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3208      	adds	r2, #8
 8001c10:	6939      	ldr	r1, [r7, #16]
 8001c12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	2203      	movs	r2, #3
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 0203 	and.w	r2, r3, #3
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 80ac 	beq.w	8001db0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c58:	4b5e      	ldr	r3, [pc, #376]	@ (8001dd4 <HAL_GPIO_Init+0x2f0>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	4a5d      	ldr	r2, [pc, #372]	@ (8001dd4 <HAL_GPIO_Init+0x2f0>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	6193      	str	r3, [r2, #24]
 8001c64:	4b5b      	ldr	r3, [pc, #364]	@ (8001dd4 <HAL_GPIO_Init+0x2f0>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c70:	4a59      	ldr	r2, [pc, #356]	@ (8001dd8 <HAL_GPIO_Init+0x2f4>)
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	089b      	lsrs	r3, r3, #2
 8001c76:	3302      	adds	r3, #2
 8001c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	220f      	movs	r2, #15
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4013      	ands	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c9a:	d025      	beq.n	8001ce8 <HAL_GPIO_Init+0x204>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a4f      	ldr	r2, [pc, #316]	@ (8001ddc <HAL_GPIO_Init+0x2f8>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d01f      	beq.n	8001ce4 <HAL_GPIO_Init+0x200>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a4e      	ldr	r2, [pc, #312]	@ (8001de0 <HAL_GPIO_Init+0x2fc>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d019      	beq.n	8001ce0 <HAL_GPIO_Init+0x1fc>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a4d      	ldr	r2, [pc, #308]	@ (8001de4 <HAL_GPIO_Init+0x300>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d013      	beq.n	8001cdc <HAL_GPIO_Init+0x1f8>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a4c      	ldr	r2, [pc, #304]	@ (8001de8 <HAL_GPIO_Init+0x304>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d00d      	beq.n	8001cd8 <HAL_GPIO_Init+0x1f4>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a4b      	ldr	r2, [pc, #300]	@ (8001dec <HAL_GPIO_Init+0x308>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d007      	beq.n	8001cd4 <HAL_GPIO_Init+0x1f0>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a4a      	ldr	r2, [pc, #296]	@ (8001df0 <HAL_GPIO_Init+0x30c>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d101      	bne.n	8001cd0 <HAL_GPIO_Init+0x1ec>
 8001ccc:	2306      	movs	r3, #6
 8001cce:	e00c      	b.n	8001cea <HAL_GPIO_Init+0x206>
 8001cd0:	2307      	movs	r3, #7
 8001cd2:	e00a      	b.n	8001cea <HAL_GPIO_Init+0x206>
 8001cd4:	2305      	movs	r3, #5
 8001cd6:	e008      	b.n	8001cea <HAL_GPIO_Init+0x206>
 8001cd8:	2304      	movs	r3, #4
 8001cda:	e006      	b.n	8001cea <HAL_GPIO_Init+0x206>
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e004      	b.n	8001cea <HAL_GPIO_Init+0x206>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e002      	b.n	8001cea <HAL_GPIO_Init+0x206>
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e000      	b.n	8001cea <HAL_GPIO_Init+0x206>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	f002 0203 	and.w	r2, r2, #3
 8001cf0:	0092      	lsls	r2, r2, #2
 8001cf2:	4093      	lsls	r3, r2
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cfa:	4937      	ldr	r1, [pc, #220]	@ (8001dd8 <HAL_GPIO_Init+0x2f4>)
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	089b      	lsrs	r3, r3, #2
 8001d00:	3302      	adds	r3, #2
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d08:	4b3a      	ldr	r3, [pc, #232]	@ (8001df4 <HAL_GPIO_Init+0x310>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	4013      	ands	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d003      	beq.n	8001d2c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d2c:	4a31      	ldr	r2, [pc, #196]	@ (8001df4 <HAL_GPIO_Init+0x310>)
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d32:	4b30      	ldr	r3, [pc, #192]	@ (8001df4 <HAL_GPIO_Init+0x310>)
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d56:	4a27      	ldr	r2, [pc, #156]	@ (8001df4 <HAL_GPIO_Init+0x310>)
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d5c:	4b25      	ldr	r3, [pc, #148]	@ (8001df4 <HAL_GPIO_Init+0x310>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d80:	4a1c      	ldr	r2, [pc, #112]	@ (8001df4 <HAL_GPIO_Init+0x310>)
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d86:	4b1b      	ldr	r3, [pc, #108]	@ (8001df4 <HAL_GPIO_Init+0x310>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	4013      	ands	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001daa:	4a12      	ldr	r2, [pc, #72]	@ (8001df4 <HAL_GPIO_Init+0x310>)
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	3301      	adds	r3, #1
 8001db4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f47f ae97 	bne.w	8001af4 <HAL_GPIO_Init+0x10>
  }
}
 8001dc6:	bf00      	nop
 8001dc8:	bf00      	nop
 8001dca:	371c      	adds	r7, #28
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40010000 	.word	0x40010000
 8001ddc:	48000400 	.word	0x48000400
 8001de0:	48000800 	.word	0x48000800
 8001de4:	48000c00 	.word	0x48000c00
 8001de8:	48001000 	.word	0x48001000
 8001dec:	48001400 	.word	0x48001400
 8001df0:	48001800 	.word	0x48001800
 8001df4:	40010400 	.word	0x40010400

08001df8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	807b      	strh	r3, [r7, #2]
 8001e04:	4613      	mov	r3, r2
 8001e06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e08:	787b      	ldrb	r3, [r7, #1]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e0e:	887a      	ldrh	r2, [r7, #2]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e14:	e002      	b.n	8001e1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e16:	887a      	ldrh	r2, [r7, #2]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e34:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e38:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e3e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d102      	bne.n	8001e4e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	f001 b83a 	b.w	8002ec2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e52:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 816f 	beq.w	8002142 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e64:	4bb5      	ldr	r3, [pc, #724]	@ (800213c <HAL_RCC_OscConfig+0x314>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 030c 	and.w	r3, r3, #12
 8001e6c:	2b04      	cmp	r3, #4
 8001e6e:	d00c      	beq.n	8001e8a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e70:	4bb2      	ldr	r3, [pc, #712]	@ (800213c <HAL_RCC_OscConfig+0x314>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 030c 	and.w	r3, r3, #12
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d15c      	bne.n	8001f36 <HAL_RCC_OscConfig+0x10e>
 8001e7c:	4baf      	ldr	r3, [pc, #700]	@ (800213c <HAL_RCC_OscConfig+0x314>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e88:	d155      	bne.n	8001f36 <HAL_RCC_OscConfig+0x10e>
 8001e8a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e8e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001e96:	fa93 f3a3 	rbit	r3, r3
 8001e9a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e9e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea2:	fab3 f383 	clz	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	095b      	lsrs	r3, r3, #5
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d102      	bne.n	8001ebc <HAL_RCC_OscConfig+0x94>
 8001eb6:	4ba1      	ldr	r3, [pc, #644]	@ (800213c <HAL_RCC_OscConfig+0x314>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	e015      	b.n	8001ee8 <HAL_RCC_OscConfig+0xc0>
 8001ebc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ec0:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001ec8:	fa93 f3a3 	rbit	r3, r3
 8001ecc:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001ed0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ed4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001ed8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001edc:	fa93 f3a3 	rbit	r3, r3
 8001ee0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001ee4:	4b95      	ldr	r3, [pc, #596]	@ (800213c <HAL_RCC_OscConfig+0x314>)
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001eec:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001ef0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001ef4:	fa92 f2a2 	rbit	r2, r2
 8001ef8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001efc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001f00:	fab2 f282 	clz	r2, r2
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	f042 0220 	orr.w	r2, r2, #32
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	f002 021f 	and.w	r2, r2, #31
 8001f10:	2101      	movs	r1, #1
 8001f12:	fa01 f202 	lsl.w	r2, r1, r2
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 8111 	beq.w	8002140 <HAL_RCC_OscConfig+0x318>
 8001f1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f22:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f040 8108 	bne.w	8002140 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	f000 bfc6 	b.w	8002ec2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f3a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f46:	d106      	bne.n	8001f56 <HAL_RCC_OscConfig+0x12e>
 8001f48:	4b7c      	ldr	r3, [pc, #496]	@ (800213c <HAL_RCC_OscConfig+0x314>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a7b      	ldr	r2, [pc, #492]	@ (800213c <HAL_RCC_OscConfig+0x314>)
 8001f4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	e036      	b.n	8001fc4 <HAL_RCC_OscConfig+0x19c>
 8001f56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f5a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10c      	bne.n	8001f80 <HAL_RCC_OscConfig+0x158>
 8001f66:	4b75      	ldr	r3, [pc, #468]	@ (800213c <HAL_RCC_OscConfig+0x314>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a74      	ldr	r2, [pc, #464]	@ (800213c <HAL_RCC_OscConfig+0x314>)
 8001f6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	4b72      	ldr	r3, [pc, #456]	@ (800213c <HAL_RCC_OscConfig+0x314>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a71      	ldr	r2, [pc, #452]	@ (800213c <HAL_RCC_OscConfig+0x314>)
 8001f78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	e021      	b.n	8001fc4 <HAL_RCC_OscConfig+0x19c>
 8001f80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f84:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f90:	d10c      	bne.n	8001fac <HAL_RCC_OscConfig+0x184>
 8001f92:	4b6a      	ldr	r3, [pc, #424]	@ (800213c <HAL_RCC_OscConfig+0x314>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a69      	ldr	r2, [pc, #420]	@ (800213c <HAL_RCC_OscConfig+0x314>)
 8001f98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	4b67      	ldr	r3, [pc, #412]	@ (800213c <HAL_RCC_OscConfig+0x314>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a66      	ldr	r2, [pc, #408]	@ (800213c <HAL_RCC_OscConfig+0x314>)
 8001fa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	e00b      	b.n	8001fc4 <HAL_RCC_OscConfig+0x19c>
 8001fac:	4b63      	ldr	r3, [pc, #396]	@ (800213c <HAL_RCC_OscConfig+0x314>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a62      	ldr	r2, [pc, #392]	@ (800213c <HAL_RCC_OscConfig+0x314>)
 8001fb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	4b60      	ldr	r3, [pc, #384]	@ (800213c <HAL_RCC_OscConfig+0x314>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a5f      	ldr	r2, [pc, #380]	@ (800213c <HAL_RCC_OscConfig+0x314>)
 8001fbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fc2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fc8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d059      	beq.n	8002088 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7fe fc9c 	bl	8000910 <HAL_GetTick>
 8001fd8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fdc:	e00a      	b.n	8001ff4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fde:	f7fe fc97 	bl	8000910 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b64      	cmp	r3, #100	@ 0x64
 8001fec:	d902      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	f000 bf67 	b.w	8002ec2 <HAL_RCC_OscConfig+0x109a>
 8001ff4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ff8:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8002000:	fa93 f3a3 	rbit	r3, r3
 8002004:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002008:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200c:	fab3 f383 	clz	r3, r3
 8002010:	b2db      	uxtb	r3, r3
 8002012:	095b      	lsrs	r3, r3, #5
 8002014:	b2db      	uxtb	r3, r3
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b01      	cmp	r3, #1
 800201e:	d102      	bne.n	8002026 <HAL_RCC_OscConfig+0x1fe>
 8002020:	4b46      	ldr	r3, [pc, #280]	@ (800213c <HAL_RCC_OscConfig+0x314>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	e015      	b.n	8002052 <HAL_RCC_OscConfig+0x22a>
 8002026:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800202a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8002032:	fa93 f3a3 	rbit	r3, r3
 8002036:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800203a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800203e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002042:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8002046:	fa93 f3a3 	rbit	r3, r3
 800204a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800204e:	4b3b      	ldr	r3, [pc, #236]	@ (800213c <HAL_RCC_OscConfig+0x314>)
 8002050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002052:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002056:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800205a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800205e:	fa92 f2a2 	rbit	r2, r2
 8002062:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8002066:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800206a:	fab2 f282 	clz	r2, r2
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	f042 0220 	orr.w	r2, r2, #32
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	f002 021f 	and.w	r2, r2, #31
 800207a:	2101      	movs	r1, #1
 800207c:	fa01 f202 	lsl.w	r2, r1, r2
 8002080:	4013      	ands	r3, r2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0ab      	beq.n	8001fde <HAL_RCC_OscConfig+0x1b6>
 8002086:	e05c      	b.n	8002142 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002088:	f7fe fc42 	bl	8000910 <HAL_GetTick>
 800208c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002090:	e00a      	b.n	80020a8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002092:	f7fe fc3d 	bl	8000910 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b64      	cmp	r3, #100	@ 0x64
 80020a0:	d902      	bls.n	80020a8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	f000 bf0d 	b.w	8002ec2 <HAL_RCC_OscConfig+0x109a>
 80020a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020ac:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80020b4:	fa93 f3a3 	rbit	r3, r3
 80020b8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80020bc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020c0:	fab3 f383 	clz	r3, r3
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	095b      	lsrs	r3, r3, #5
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d102      	bne.n	80020da <HAL_RCC_OscConfig+0x2b2>
 80020d4:	4b19      	ldr	r3, [pc, #100]	@ (800213c <HAL_RCC_OscConfig+0x314>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	e015      	b.n	8002106 <HAL_RCC_OscConfig+0x2de>
 80020da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020de:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80020e6:	fa93 f3a3 	rbit	r3, r3
 80020ea:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80020ee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020f2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80020f6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80020fa:	fa93 f3a3 	rbit	r3, r3
 80020fe:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002102:	4b0e      	ldr	r3, [pc, #56]	@ (800213c <HAL_RCC_OscConfig+0x314>)
 8002104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002106:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800210a:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800210e:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002112:	fa92 f2a2 	rbit	r2, r2
 8002116:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 800211a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800211e:	fab2 f282 	clz	r2, r2
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	f042 0220 	orr.w	r2, r2, #32
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	f002 021f 	and.w	r2, r2, #31
 800212e:	2101      	movs	r1, #1
 8002130:	fa01 f202 	lsl.w	r2, r1, r2
 8002134:	4013      	ands	r3, r2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1ab      	bne.n	8002092 <HAL_RCC_OscConfig+0x26a>
 800213a:	e002      	b.n	8002142 <HAL_RCC_OscConfig+0x31a>
 800213c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002142:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002146:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 817f 	beq.w	8002456 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002158:	4ba7      	ldr	r3, [pc, #668]	@ (80023f8 <HAL_RCC_OscConfig+0x5d0>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 030c 	and.w	r3, r3, #12
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00c      	beq.n	800217e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002164:	4ba4      	ldr	r3, [pc, #656]	@ (80023f8 <HAL_RCC_OscConfig+0x5d0>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 030c 	and.w	r3, r3, #12
 800216c:	2b08      	cmp	r3, #8
 800216e:	d173      	bne.n	8002258 <HAL_RCC_OscConfig+0x430>
 8002170:	4ba1      	ldr	r3, [pc, #644]	@ (80023f8 <HAL_RCC_OscConfig+0x5d0>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002178:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800217c:	d16c      	bne.n	8002258 <HAL_RCC_OscConfig+0x430>
 800217e:	2302      	movs	r3, #2
 8002180:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002184:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002188:	fa93 f3a3 	rbit	r3, r3
 800218c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002190:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002194:	fab3 f383 	clz	r3, r3
 8002198:	b2db      	uxtb	r3, r3
 800219a:	095b      	lsrs	r3, r3, #5
 800219c:	b2db      	uxtb	r3, r3
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d102      	bne.n	80021ae <HAL_RCC_OscConfig+0x386>
 80021a8:	4b93      	ldr	r3, [pc, #588]	@ (80023f8 <HAL_RCC_OscConfig+0x5d0>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	e013      	b.n	80021d6 <HAL_RCC_OscConfig+0x3ae>
 80021ae:	2302      	movs	r3, #2
 80021b0:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b4:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80021b8:	fa93 f3a3 	rbit	r3, r3
 80021bc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80021c0:	2302      	movs	r3, #2
 80021c2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80021c6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80021ca:	fa93 f3a3 	rbit	r3, r3
 80021ce:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80021d2:	4b89      	ldr	r3, [pc, #548]	@ (80023f8 <HAL_RCC_OscConfig+0x5d0>)
 80021d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d6:	2202      	movs	r2, #2
 80021d8:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80021dc:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80021e0:	fa92 f2a2 	rbit	r2, r2
 80021e4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80021e8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80021ec:	fab2 f282 	clz	r2, r2
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	f042 0220 	orr.w	r2, r2, #32
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	f002 021f 	and.w	r2, r2, #31
 80021fc:	2101      	movs	r1, #1
 80021fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002202:	4013      	ands	r3, r2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00a      	beq.n	800221e <HAL_RCC_OscConfig+0x3f6>
 8002208:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800220c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d002      	beq.n	800221e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	f000 be52 	b.w	8002ec2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221e:	4b76      	ldr	r3, [pc, #472]	@ (80023f8 <HAL_RCC_OscConfig+0x5d0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002226:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800222a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	21f8      	movs	r1, #248	@ 0xf8
 8002234:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002238:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 800223c:	fa91 f1a1 	rbit	r1, r1
 8002240:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8002244:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002248:	fab1 f181 	clz	r1, r1
 800224c:	b2c9      	uxtb	r1, r1
 800224e:	408b      	lsls	r3, r1
 8002250:	4969      	ldr	r1, [pc, #420]	@ (80023f8 <HAL_RCC_OscConfig+0x5d0>)
 8002252:	4313      	orrs	r3, r2
 8002254:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002256:	e0fe      	b.n	8002456 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002258:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800225c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 8088 	beq.w	800237a <HAL_RCC_OscConfig+0x552>
 800226a:	2301      	movs	r3, #1
 800226c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002270:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002274:	fa93 f3a3 	rbit	r3, r3
 8002278:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 800227c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002280:	fab3 f383 	clz	r3, r3
 8002284:	b2db      	uxtb	r3, r3
 8002286:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800228a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	461a      	mov	r2, r3
 8002292:	2301      	movs	r3, #1
 8002294:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002296:	f7fe fb3b 	bl	8000910 <HAL_GetTick>
 800229a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229e:	e00a      	b.n	80022b6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022a0:	f7fe fb36 	bl	8000910 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d902      	bls.n	80022b6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	f000 be06 	b.w	8002ec2 <HAL_RCC_OscConfig+0x109a>
 80022b6:	2302      	movs	r3, #2
 80022b8:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022bc:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80022c0:	fa93 f3a3 	rbit	r3, r3
 80022c4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80022c8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022cc:	fab3 f383 	clz	r3, r3
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	095b      	lsrs	r3, r3, #5
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d102      	bne.n	80022e6 <HAL_RCC_OscConfig+0x4be>
 80022e0:	4b45      	ldr	r3, [pc, #276]	@ (80023f8 <HAL_RCC_OscConfig+0x5d0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	e013      	b.n	800230e <HAL_RCC_OscConfig+0x4e6>
 80022e6:	2302      	movs	r3, #2
 80022e8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ec:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80022f0:	fa93 f3a3 	rbit	r3, r3
 80022f4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80022f8:	2302      	movs	r3, #2
 80022fa:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80022fe:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002302:	fa93 f3a3 	rbit	r3, r3
 8002306:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800230a:	4b3b      	ldr	r3, [pc, #236]	@ (80023f8 <HAL_RCC_OscConfig+0x5d0>)
 800230c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230e:	2202      	movs	r2, #2
 8002310:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002314:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002318:	fa92 f2a2 	rbit	r2, r2
 800231c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002320:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002324:	fab2 f282 	clz	r2, r2
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	f042 0220 	orr.w	r2, r2, #32
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	f002 021f 	and.w	r2, r2, #31
 8002334:	2101      	movs	r1, #1
 8002336:	fa01 f202 	lsl.w	r2, r1, r2
 800233a:	4013      	ands	r3, r2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0af      	beq.n	80022a0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002340:	4b2d      	ldr	r3, [pc, #180]	@ (80023f8 <HAL_RCC_OscConfig+0x5d0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002348:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800234c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	21f8      	movs	r1, #248	@ 0xf8
 8002356:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800235e:	fa91 f1a1 	rbit	r1, r1
 8002362:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8002366:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800236a:	fab1 f181 	clz	r1, r1
 800236e:	b2c9      	uxtb	r1, r1
 8002370:	408b      	lsls	r3, r1
 8002372:	4921      	ldr	r1, [pc, #132]	@ (80023f8 <HAL_RCC_OscConfig+0x5d0>)
 8002374:	4313      	orrs	r3, r2
 8002376:	600b      	str	r3, [r1, #0]
 8002378:	e06d      	b.n	8002456 <HAL_RCC_OscConfig+0x62e>
 800237a:	2301      	movs	r3, #1
 800237c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002380:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002384:	fa93 f3a3 	rbit	r3, r3
 8002388:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 800238c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002390:	fab3 f383 	clz	r3, r3
 8002394:	b2db      	uxtb	r3, r3
 8002396:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800239a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	461a      	mov	r2, r3
 80023a2:	2300      	movs	r3, #0
 80023a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a6:	f7fe fab3 	bl	8000910 <HAL_GetTick>
 80023aa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ae:	e00a      	b.n	80023c6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023b0:	f7fe faae 	bl	8000910 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d902      	bls.n	80023c6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	f000 bd7e 	b.w	8002ec2 <HAL_RCC_OscConfig+0x109a>
 80023c6:	2302      	movs	r3, #2
 80023c8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80023d0:	fa93 f3a3 	rbit	r3, r3
 80023d4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80023d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023dc:	fab3 f383 	clz	r3, r3
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	095b      	lsrs	r3, r3, #5
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d105      	bne.n	80023fc <HAL_RCC_OscConfig+0x5d4>
 80023f0:	4b01      	ldr	r3, [pc, #4]	@ (80023f8 <HAL_RCC_OscConfig+0x5d0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	e016      	b.n	8002424 <HAL_RCC_OscConfig+0x5fc>
 80023f6:	bf00      	nop
 80023f8:	40021000 	.word	0x40021000
 80023fc:	2302      	movs	r3, #2
 80023fe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002406:	fa93 f3a3 	rbit	r3, r3
 800240a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800240e:	2302      	movs	r3, #2
 8002410:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002414:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002418:	fa93 f3a3 	rbit	r3, r3
 800241c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002420:	4bbf      	ldr	r3, [pc, #764]	@ (8002720 <HAL_RCC_OscConfig+0x8f8>)
 8002422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002424:	2202      	movs	r2, #2
 8002426:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800242a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800242e:	fa92 f2a2 	rbit	r2, r2
 8002432:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8002436:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800243a:	fab2 f282 	clz	r2, r2
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	f042 0220 	orr.w	r2, r2, #32
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	f002 021f 	and.w	r2, r2, #31
 800244a:	2101      	movs	r1, #1
 800244c:	fa01 f202 	lsl.w	r2, r1, r2
 8002450:	4013      	ands	r3, r2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1ac      	bne.n	80023b0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002456:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800245a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	f000 8113 	beq.w	8002692 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800246c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002470:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d07c      	beq.n	8002576 <HAL_RCC_OscConfig+0x74e>
 800247c:	2301      	movs	r3, #1
 800247e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002486:	fa93 f3a3 	rbit	r3, r3
 800248a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 800248e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002492:	fab3 f383 	clz	r3, r3
 8002496:	b2db      	uxtb	r3, r3
 8002498:	461a      	mov	r2, r3
 800249a:	4ba2      	ldr	r3, [pc, #648]	@ (8002724 <HAL_RCC_OscConfig+0x8fc>)
 800249c:	4413      	add	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	461a      	mov	r2, r3
 80024a2:	2301      	movs	r3, #1
 80024a4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a6:	f7fe fa33 	bl	8000910 <HAL_GetTick>
 80024aa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ae:	e00a      	b.n	80024c6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024b0:	f7fe fa2e 	bl	8000910 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d902      	bls.n	80024c6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	f000 bcfe 	b.w	8002ec2 <HAL_RCC_OscConfig+0x109a>
 80024c6:	2302      	movs	r3, #2
 80024c8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80024d0:	fa93 f2a3 	rbit	r2, r3
 80024d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024d8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024e6:	2202      	movs	r2, #2
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	fa93 f2a3 	rbit	r2, r3
 80024f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002506:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800250a:	2202      	movs	r2, #2
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002512:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	fa93 f2a3 	rbit	r2, r3
 800251c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002520:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002524:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002526:	4b7e      	ldr	r3, [pc, #504]	@ (8002720 <HAL_RCC_OscConfig+0x8f8>)
 8002528:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800252a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800252e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002532:	2102      	movs	r1, #2
 8002534:	6019      	str	r1, [r3, #0]
 8002536:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800253a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	fa93 f1a3 	rbit	r1, r3
 8002544:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002548:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800254c:	6019      	str	r1, [r3, #0]
  return result;
 800254e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002552:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	fab3 f383 	clz	r3, r3
 800255c:	b2db      	uxtb	r3, r3
 800255e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002562:	b2db      	uxtb	r3, r3
 8002564:	f003 031f 	and.w	r3, r3, #31
 8002568:	2101      	movs	r1, #1
 800256a:	fa01 f303 	lsl.w	r3, r1, r3
 800256e:	4013      	ands	r3, r2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d09d      	beq.n	80024b0 <HAL_RCC_OscConfig+0x688>
 8002574:	e08d      	b.n	8002692 <HAL_RCC_OscConfig+0x86a>
 8002576:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800257a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800257e:	2201      	movs	r2, #1
 8002580:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002582:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002586:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	fa93 f2a3 	rbit	r2, r3
 8002590:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002594:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002598:	601a      	str	r2, [r3, #0]
  return result;
 800259a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800259e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80025a2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025a4:	fab3 f383 	clz	r3, r3
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	461a      	mov	r2, r3
 80025ac:	4b5d      	ldr	r3, [pc, #372]	@ (8002724 <HAL_RCC_OscConfig+0x8fc>)
 80025ae:	4413      	add	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	461a      	mov	r2, r3
 80025b4:	2300      	movs	r3, #0
 80025b6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b8:	f7fe f9aa 	bl	8000910 <HAL_GetTick>
 80025bc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c0:	e00a      	b.n	80025d8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025c2:	f7fe f9a5 	bl	8000910 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d902      	bls.n	80025d8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	f000 bc75 	b.w	8002ec2 <HAL_RCC_OscConfig+0x109a>
 80025d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025dc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80025e0:	2202      	movs	r2, #2
 80025e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025e8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	fa93 f2a3 	rbit	r2, r3
 80025f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025f6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002600:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002604:	2202      	movs	r2, #2
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800260c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	fa93 f2a3 	rbit	r2, r3
 8002616:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800261a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002624:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002628:	2202      	movs	r2, #2
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002630:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	fa93 f2a3 	rbit	r2, r3
 800263a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800263e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002642:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002644:	4b36      	ldr	r3, [pc, #216]	@ (8002720 <HAL_RCC_OscConfig+0x8f8>)
 8002646:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002648:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800264c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002650:	2102      	movs	r1, #2
 8002652:	6019      	str	r1, [r3, #0]
 8002654:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002658:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	fa93 f1a3 	rbit	r1, r3
 8002662:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002666:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800266a:	6019      	str	r1, [r3, #0]
  return result;
 800266c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002670:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	fab3 f383 	clz	r3, r3
 800267a:	b2db      	uxtb	r3, r3
 800267c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002680:	b2db      	uxtb	r3, r3
 8002682:	f003 031f 	and.w	r3, r3, #31
 8002686:	2101      	movs	r1, #1
 8002688:	fa01 f303 	lsl.w	r3, r1, r3
 800268c:	4013      	ands	r3, r2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d197      	bne.n	80025c2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002692:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002696:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 81a5 	beq.w	80029f2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026a8:	2300      	movs	r3, #0
 80026aa:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002720 <HAL_RCC_OscConfig+0x8f8>)
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d116      	bne.n	80026e8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ba:	4b19      	ldr	r3, [pc, #100]	@ (8002720 <HAL_RCC_OscConfig+0x8f8>)
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	4a18      	ldr	r2, [pc, #96]	@ (8002720 <HAL_RCC_OscConfig+0x8f8>)
 80026c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026c4:	61d3      	str	r3, [r2, #28]
 80026c6:	4b16      	ldr	r3, [pc, #88]	@ (8002720 <HAL_RCC_OscConfig+0x8f8>)
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80026ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026e0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80026e2:	2301      	movs	r3, #1
 80026e4:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002728 <HAL_RCC_OscConfig+0x900>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d121      	bne.n	8002738 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002728 <HAL_RCC_OscConfig+0x900>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002728 <HAL_RCC_OscConfig+0x900>)
 80026fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026fe:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002700:	f7fe f906 	bl	8000910 <HAL_GetTick>
 8002704:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002708:	e010      	b.n	800272c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800270a:	f7fe f901 	bl	8000910 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b64      	cmp	r3, #100	@ 0x64
 8002718:	d908      	bls.n	800272c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e3d1      	b.n	8002ec2 <HAL_RCC_OscConfig+0x109a>
 800271e:	bf00      	nop
 8002720:	40021000 	.word	0x40021000
 8002724:	10908120 	.word	0x10908120
 8002728:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272c:	4b8d      	ldr	r3, [pc, #564]	@ (8002964 <HAL_RCC_OscConfig+0xb3c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0e8      	beq.n	800270a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002738:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800273c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d106      	bne.n	8002756 <HAL_RCC_OscConfig+0x92e>
 8002748:	4b87      	ldr	r3, [pc, #540]	@ (8002968 <HAL_RCC_OscConfig+0xb40>)
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	4a86      	ldr	r2, [pc, #536]	@ (8002968 <HAL_RCC_OscConfig+0xb40>)
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	6213      	str	r3, [r2, #32]
 8002754:	e035      	b.n	80027c2 <HAL_RCC_OscConfig+0x99a>
 8002756:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800275a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10c      	bne.n	8002780 <HAL_RCC_OscConfig+0x958>
 8002766:	4b80      	ldr	r3, [pc, #512]	@ (8002968 <HAL_RCC_OscConfig+0xb40>)
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	4a7f      	ldr	r2, [pc, #508]	@ (8002968 <HAL_RCC_OscConfig+0xb40>)
 800276c:	f023 0301 	bic.w	r3, r3, #1
 8002770:	6213      	str	r3, [r2, #32]
 8002772:	4b7d      	ldr	r3, [pc, #500]	@ (8002968 <HAL_RCC_OscConfig+0xb40>)
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	4a7c      	ldr	r2, [pc, #496]	@ (8002968 <HAL_RCC_OscConfig+0xb40>)
 8002778:	f023 0304 	bic.w	r3, r3, #4
 800277c:	6213      	str	r3, [r2, #32]
 800277e:	e020      	b.n	80027c2 <HAL_RCC_OscConfig+0x99a>
 8002780:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002784:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2b05      	cmp	r3, #5
 800278e:	d10c      	bne.n	80027aa <HAL_RCC_OscConfig+0x982>
 8002790:	4b75      	ldr	r3, [pc, #468]	@ (8002968 <HAL_RCC_OscConfig+0xb40>)
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	4a74      	ldr	r2, [pc, #464]	@ (8002968 <HAL_RCC_OscConfig+0xb40>)
 8002796:	f043 0304 	orr.w	r3, r3, #4
 800279a:	6213      	str	r3, [r2, #32]
 800279c:	4b72      	ldr	r3, [pc, #456]	@ (8002968 <HAL_RCC_OscConfig+0xb40>)
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	4a71      	ldr	r2, [pc, #452]	@ (8002968 <HAL_RCC_OscConfig+0xb40>)
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	6213      	str	r3, [r2, #32]
 80027a8:	e00b      	b.n	80027c2 <HAL_RCC_OscConfig+0x99a>
 80027aa:	4b6f      	ldr	r3, [pc, #444]	@ (8002968 <HAL_RCC_OscConfig+0xb40>)
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	4a6e      	ldr	r2, [pc, #440]	@ (8002968 <HAL_RCC_OscConfig+0xb40>)
 80027b0:	f023 0301 	bic.w	r3, r3, #1
 80027b4:	6213      	str	r3, [r2, #32]
 80027b6:	4b6c      	ldr	r3, [pc, #432]	@ (8002968 <HAL_RCC_OscConfig+0xb40>)
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	4a6b      	ldr	r2, [pc, #428]	@ (8002968 <HAL_RCC_OscConfig+0xb40>)
 80027bc:	f023 0304 	bic.w	r3, r3, #4
 80027c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027c6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 8081 	beq.w	80028d6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d4:	f7fe f89c 	bl	8000910 <HAL_GetTick>
 80027d8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027dc:	e00b      	b.n	80027f6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027de:	f7fe f897 	bl	8000910 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e365      	b.n	8002ec2 <HAL_RCC_OscConfig+0x109a>
 80027f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027fa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80027fe:	2202      	movs	r2, #2
 8002800:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002802:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002806:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	fa93 f2a3 	rbit	r2, r3
 8002810:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002814:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800281e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002822:	2202      	movs	r2, #2
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800282a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	fa93 f2a3 	rbit	r2, r3
 8002834:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002838:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800283c:	601a      	str	r2, [r3, #0]
  return result;
 800283e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002842:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002846:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002848:	fab3 f383 	clz	r3, r3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	b2db      	uxtb	r3, r3
 8002852:	f043 0302 	orr.w	r3, r3, #2
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d102      	bne.n	8002862 <HAL_RCC_OscConfig+0xa3a>
 800285c:	4b42      	ldr	r3, [pc, #264]	@ (8002968 <HAL_RCC_OscConfig+0xb40>)
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	e013      	b.n	800288a <HAL_RCC_OscConfig+0xa62>
 8002862:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002866:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800286a:	2202      	movs	r2, #2
 800286c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002872:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	fa93 f2a3 	rbit	r2, r3
 800287c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002880:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	4b38      	ldr	r3, [pc, #224]	@ (8002968 <HAL_RCC_OscConfig+0xb40>)
 8002888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800288e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002892:	2102      	movs	r1, #2
 8002894:	6011      	str	r1, [r2, #0]
 8002896:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800289a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	fa92 f1a2 	rbit	r1, r2
 80028a4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80028a8:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80028ac:	6011      	str	r1, [r2, #0]
  return result;
 80028ae:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80028b2:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	fab2 f282 	clz	r2, r2
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	f002 021f 	and.w	r2, r2, #31
 80028c8:	2101      	movs	r1, #1
 80028ca:	fa01 f202 	lsl.w	r2, r1, r2
 80028ce:	4013      	ands	r3, r2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d084      	beq.n	80027de <HAL_RCC_OscConfig+0x9b6>
 80028d4:	e083      	b.n	80029de <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d6:	f7fe f81b 	bl	8000910 <HAL_GetTick>
 80028da:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028de:	e00b      	b.n	80028f8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028e0:	f7fe f816 	bl	8000910 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e2e4      	b.n	8002ec2 <HAL_RCC_OscConfig+0x109a>
 80028f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028fc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002900:	2202      	movs	r2, #2
 8002902:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002904:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002908:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	fa93 f2a3 	rbit	r2, r3
 8002912:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002916:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002920:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002924:	2202      	movs	r2, #2
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800292c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	fa93 f2a3 	rbit	r2, r3
 8002936:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800293a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800293e:	601a      	str	r2, [r3, #0]
  return result;
 8002940:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002944:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002948:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800294a:	fab3 f383 	clz	r3, r3
 800294e:	b2db      	uxtb	r3, r3
 8002950:	095b      	lsrs	r3, r3, #5
 8002952:	b2db      	uxtb	r3, r3
 8002954:	f043 0302 	orr.w	r3, r3, #2
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d106      	bne.n	800296c <HAL_RCC_OscConfig+0xb44>
 800295e:	4b02      	ldr	r3, [pc, #8]	@ (8002968 <HAL_RCC_OscConfig+0xb40>)
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	e017      	b.n	8002994 <HAL_RCC_OscConfig+0xb6c>
 8002964:	40007000 	.word	0x40007000
 8002968:	40021000 	.word	0x40021000
 800296c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002970:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002974:	2202      	movs	r2, #2
 8002976:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002978:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800297c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	fa93 f2a3 	rbit	r2, r3
 8002986:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800298a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	4bb3      	ldr	r3, [pc, #716]	@ (8002c60 <HAL_RCC_OscConfig+0xe38>)
 8002992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002994:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002998:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800299c:	2102      	movs	r1, #2
 800299e:	6011      	str	r1, [r2, #0]
 80029a0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029a4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80029a8:	6812      	ldr	r2, [r2, #0]
 80029aa:	fa92 f1a2 	rbit	r1, r2
 80029ae:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029b2:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80029b6:	6011      	str	r1, [r2, #0]
  return result;
 80029b8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029bc:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80029c0:	6812      	ldr	r2, [r2, #0]
 80029c2:	fab2 f282 	clz	r2, r2
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	f002 021f 	and.w	r2, r2, #31
 80029d2:	2101      	movs	r1, #1
 80029d4:	fa01 f202 	lsl.w	r2, r1, r2
 80029d8:	4013      	ands	r3, r2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d180      	bne.n	80028e0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029de:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d105      	bne.n	80029f2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e6:	4b9e      	ldr	r3, [pc, #632]	@ (8002c60 <HAL_RCC_OscConfig+0xe38>)
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	4a9d      	ldr	r2, [pc, #628]	@ (8002c60 <HAL_RCC_OscConfig+0xe38>)
 80029ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029f0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029f6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 825e 	beq.w	8002ec0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a04:	4b96      	ldr	r3, [pc, #600]	@ (8002c60 <HAL_RCC_OscConfig+0xe38>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f003 030c 	and.w	r3, r3, #12
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	f000 821f 	beq.w	8002e50 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a16:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	f040 8170 	bne.w	8002d04 <HAL_RCC_OscConfig+0xedc>
 8002a24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a28:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002a2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a36:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	fa93 f2a3 	rbit	r2, r3
 8002a40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a44:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002a48:	601a      	str	r2, [r3, #0]
  return result;
 8002a4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a4e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002a52:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a54:	fab3 f383 	clz	r3, r3
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a5e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	461a      	mov	r2, r3
 8002a66:	2300      	movs	r3, #0
 8002a68:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6a:	f7fd ff51 	bl	8000910 <HAL_GetTick>
 8002a6e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a72:	e009      	b.n	8002a88 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a74:	f7fd ff4c 	bl	8000910 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e21c      	b.n	8002ec2 <HAL_RCC_OscConfig+0x109a>
 8002a88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a8c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002a90:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a9a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	fa93 f2a3 	rbit	r2, r3
 8002aa4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aa8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002aac:	601a      	str	r2, [r3, #0]
  return result;
 8002aae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ab2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002ab6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ab8:	fab3 f383 	clz	r3, r3
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	f043 0301 	orr.w	r3, r3, #1
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d102      	bne.n	8002ad2 <HAL_RCC_OscConfig+0xcaa>
 8002acc:	4b64      	ldr	r3, [pc, #400]	@ (8002c60 <HAL_RCC_OscConfig+0xe38>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	e027      	b.n	8002b22 <HAL_RCC_OscConfig+0xcfa>
 8002ad2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ad6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002ada:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ade:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ae4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	fa93 f2a3 	rbit	r2, r3
 8002aee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002af2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002afc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002b00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b0a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	fa93 f2a3 	rbit	r2, r3
 8002b14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b18:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	4b50      	ldr	r3, [pc, #320]	@ (8002c60 <HAL_RCC_OscConfig+0xe38>)
 8002b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b22:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b26:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002b2a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002b2e:	6011      	str	r1, [r2, #0]
 8002b30:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b34:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	fa92 f1a2 	rbit	r1, r2
 8002b3e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b42:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002b46:	6011      	str	r1, [r2, #0]
  return result;
 8002b48:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b4c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002b50:	6812      	ldr	r2, [r2, #0]
 8002b52:	fab2 f282 	clz	r2, r2
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	f042 0220 	orr.w	r2, r2, #32
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	f002 021f 	and.w	r2, r2, #31
 8002b62:	2101      	movs	r1, #1
 8002b64:	fa01 f202 	lsl.w	r2, r1, r2
 8002b68:	4013      	ands	r3, r2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d182      	bne.n	8002a74 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b6e:	4b3c      	ldr	r3, [pc, #240]	@ (8002c60 <HAL_RCC_OscConfig+0xe38>)
 8002b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b72:	f023 020f 	bic.w	r2, r3, #15
 8002b76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b7a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b82:	4937      	ldr	r1, [pc, #220]	@ (8002c60 <HAL_RCC_OscConfig+0xe38>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002b88:	4b35      	ldr	r3, [pc, #212]	@ (8002c60 <HAL_RCC_OscConfig+0xe38>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002b90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b94:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6a19      	ldr	r1, [r3, #32]
 8002b9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ba0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	430b      	orrs	r3, r1
 8002baa:	492d      	ldr	r1, [pc, #180]	@ (8002c60 <HAL_RCC_OscConfig+0xe38>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	604b      	str	r3, [r1, #4]
 8002bb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bb4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002bb8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002bbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bc2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	fa93 f2a3 	rbit	r2, r3
 8002bcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bd0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002bd4:	601a      	str	r2, [r3, #0]
  return result;
 8002bd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bda:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002bde:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002be0:	fab3 f383 	clz	r3, r3
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002bea:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf6:	f7fd fe8b 	bl	8000910 <HAL_GetTick>
 8002bfa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bfe:	e009      	b.n	8002c14 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c00:	f7fd fe86 	bl	8000910 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e156      	b.n	8002ec2 <HAL_RCC_OscConfig+0x109a>
 8002c14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c18:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002c1c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c26:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	fa93 f2a3 	rbit	r2, r3
 8002c30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c34:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002c38:	601a      	str	r2, [r3, #0]
  return result;
 8002c3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c3e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002c42:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c44:	fab3 f383 	clz	r3, r3
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	095b      	lsrs	r3, r3, #5
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d105      	bne.n	8002c64 <HAL_RCC_OscConfig+0xe3c>
 8002c58:	4b01      	ldr	r3, [pc, #4]	@ (8002c60 <HAL_RCC_OscConfig+0xe38>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	e02a      	b.n	8002cb4 <HAL_RCC_OscConfig+0xe8c>
 8002c5e:	bf00      	nop
 8002c60:	40021000 	.word	0x40021000
 8002c64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c68:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c6c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c76:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	fa93 f2a3 	rbit	r2, r3
 8002c80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c84:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c8e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002c92:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c9c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	fa93 f2a3 	rbit	r2, r3
 8002ca6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002caa:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	4b86      	ldr	r3, [pc, #536]	@ (8002ecc <HAL_RCC_OscConfig+0x10a4>)
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002cb8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002cbc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002cc0:	6011      	str	r1, [r2, #0]
 8002cc2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002cc6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002cca:	6812      	ldr	r2, [r2, #0]
 8002ccc:	fa92 f1a2 	rbit	r1, r2
 8002cd0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002cd4:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002cd8:	6011      	str	r1, [r2, #0]
  return result;
 8002cda:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002cde:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002ce2:	6812      	ldr	r2, [r2, #0]
 8002ce4:	fab2 f282 	clz	r2, r2
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	f042 0220 	orr.w	r2, r2, #32
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	f002 021f 	and.w	r2, r2, #31
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f43f af7f 	beq.w	8002c00 <HAL_RCC_OscConfig+0xdd8>
 8002d02:	e0dd      	b.n	8002ec0 <HAL_RCC_OscConfig+0x1098>
 8002d04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d08:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002d0c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d16:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	fa93 f2a3 	rbit	r2, r3
 8002d20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d24:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002d28:	601a      	str	r2, [r3, #0]
  return result;
 8002d2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d2e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002d32:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d34:	fab3 f383 	clz	r3, r3
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d3e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	461a      	mov	r2, r3
 8002d46:	2300      	movs	r3, #0
 8002d48:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4a:	f7fd fde1 	bl	8000910 <HAL_GetTick>
 8002d4e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d52:	e009      	b.n	8002d68 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d54:	f7fd fddc 	bl	8000910 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e0ac      	b.n	8002ec2 <HAL_RCC_OscConfig+0x109a>
 8002d68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d6c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002d70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d7a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	fa93 f2a3 	rbit	r2, r3
 8002d84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d88:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002d8c:	601a      	str	r2, [r3, #0]
  return result;
 8002d8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d92:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002d96:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d98:	fab3 f383 	clz	r3, r3
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	095b      	lsrs	r3, r3, #5
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d102      	bne.n	8002db2 <HAL_RCC_OscConfig+0xf8a>
 8002dac:	4b47      	ldr	r3, [pc, #284]	@ (8002ecc <HAL_RCC_OscConfig+0x10a4>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	e027      	b.n	8002e02 <HAL_RCC_OscConfig+0xfda>
 8002db2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002db6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002dba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002dbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dc4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	fa93 f2a3 	rbit	r2, r3
 8002dce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dd2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ddc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002de0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dea:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	fa93 f2a3 	rbit	r2, r3
 8002df4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002df8:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	4b33      	ldr	r3, [pc, #204]	@ (8002ecc <HAL_RCC_OscConfig+0x10a4>)
 8002e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e02:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e06:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002e0a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002e0e:	6011      	str	r1, [r2, #0]
 8002e10:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e14:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002e18:	6812      	ldr	r2, [r2, #0]
 8002e1a:	fa92 f1a2 	rbit	r1, r2
 8002e1e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e22:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002e26:	6011      	str	r1, [r2, #0]
  return result;
 8002e28:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e2c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002e30:	6812      	ldr	r2, [r2, #0]
 8002e32:	fab2 f282 	clz	r2, r2
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	f042 0220 	orr.w	r2, r2, #32
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	f002 021f 	and.w	r2, r2, #31
 8002e42:	2101      	movs	r1, #1
 8002e44:	fa01 f202 	lsl.w	r2, r1, r2
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d182      	bne.n	8002d54 <HAL_RCC_OscConfig+0xf2c>
 8002e4e:	e037      	b.n	8002ec0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e54:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d101      	bne.n	8002e64 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e02e      	b.n	8002ec2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e64:	4b19      	ldr	r3, [pc, #100]	@ (8002ecc <HAL_RCC_OscConfig+0x10a4>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002e6c:	4b17      	ldr	r3, [pc, #92]	@ (8002ecc <HAL_RCC_OscConfig+0x10a4>)
 8002e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e70:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e74:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002e78:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002e7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e80:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d117      	bne.n	8002ebc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002e8c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002e90:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e98:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d10b      	bne.n	8002ebc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002ea4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ea8:	f003 020f 	and.w	r2, r3, #15
 8002eac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eb0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d001      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e000      	b.n	8002ec2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40021000 	.word	0x40021000

08002ed0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b09e      	sub	sp, #120	@ 0x78
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e162      	b.n	80031ae <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee8:	4b90      	ldr	r3, [pc, #576]	@ (800312c <HAL_RCC_ClockConfig+0x25c>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d910      	bls.n	8002f18 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef6:	4b8d      	ldr	r3, [pc, #564]	@ (800312c <HAL_RCC_ClockConfig+0x25c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f023 0207 	bic.w	r2, r3, #7
 8002efe:	498b      	ldr	r1, [pc, #556]	@ (800312c <HAL_RCC_ClockConfig+0x25c>)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f06:	4b89      	ldr	r3, [pc, #548]	@ (800312c <HAL_RCC_ClockConfig+0x25c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d001      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e14a      	b.n	80031ae <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d008      	beq.n	8002f36 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f24:	4b82      	ldr	r3, [pc, #520]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	497f      	ldr	r1, [pc, #508]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 80dc 	beq.w	80030fc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d13c      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xf6>
 8002f4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f50:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f54:	fa93 f3a3 	rbit	r3, r3
 8002f58:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002f5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5c:	fab3 f383 	clz	r3, r3
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	095b      	lsrs	r3, r3, #5
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d102      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xa6>
 8002f70:	4b6f      	ldr	r3, [pc, #444]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	e00f      	b.n	8002f96 <HAL_RCC_ClockConfig+0xc6>
 8002f76:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f7a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f7e:	fa93 f3a3 	rbit	r3, r3
 8002f82:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f88:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f8c:	fa93 f3a3 	rbit	r3, r3
 8002f90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f92:	4b67      	ldr	r3, [pc, #412]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 8002f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f96:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002f9a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002f9c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f9e:	fa92 f2a2 	rbit	r2, r2
 8002fa2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002fa4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002fa6:	fab2 f282 	clz	r2, r2
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	f042 0220 	orr.w	r2, r2, #32
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	f002 021f 	and.w	r2, r2, #31
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d17b      	bne.n	80030ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e0f3      	b.n	80031ae <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d13c      	bne.n	8003048 <HAL_RCC_ClockConfig+0x178>
 8002fce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fd2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fd6:	fa93 f3a3 	rbit	r3, r3
 8002fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002fdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fde:	fab3 f383 	clz	r3, r3
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	095b      	lsrs	r3, r3, #5
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d102      	bne.n	8002ff8 <HAL_RCC_ClockConfig+0x128>
 8002ff2:	4b4f      	ldr	r3, [pc, #316]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	e00f      	b.n	8003018 <HAL_RCC_ClockConfig+0x148>
 8002ff8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ffc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003000:	fa93 f3a3 	rbit	r3, r3
 8003004:	647b      	str	r3, [r7, #68]	@ 0x44
 8003006:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800300a:	643b      	str	r3, [r7, #64]	@ 0x40
 800300c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800300e:	fa93 f3a3 	rbit	r3, r3
 8003012:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003014:	4b46      	ldr	r3, [pc, #280]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 8003016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003018:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800301c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800301e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003020:	fa92 f2a2 	rbit	r2, r2
 8003024:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003026:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003028:	fab2 f282 	clz	r2, r2
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	f042 0220 	orr.w	r2, r2, #32
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	f002 021f 	and.w	r2, r2, #31
 8003038:	2101      	movs	r1, #1
 800303a:	fa01 f202 	lsl.w	r2, r1, r2
 800303e:	4013      	ands	r3, r2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d13a      	bne.n	80030ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e0b2      	b.n	80031ae <HAL_RCC_ClockConfig+0x2de>
 8003048:	2302      	movs	r3, #2
 800304a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800304e:	fa93 f3a3 	rbit	r3, r3
 8003052:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003056:	fab3 f383 	clz	r3, r3
 800305a:	b2db      	uxtb	r3, r3
 800305c:	095b      	lsrs	r3, r3, #5
 800305e:	b2db      	uxtb	r3, r3
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b01      	cmp	r3, #1
 8003068:	d102      	bne.n	8003070 <HAL_RCC_ClockConfig+0x1a0>
 800306a:	4b31      	ldr	r3, [pc, #196]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	e00d      	b.n	800308c <HAL_RCC_ClockConfig+0x1bc>
 8003070:	2302      	movs	r3, #2
 8003072:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003076:	fa93 f3a3 	rbit	r3, r3
 800307a:	627b      	str	r3, [r7, #36]	@ 0x24
 800307c:	2302      	movs	r3, #2
 800307e:	623b      	str	r3, [r7, #32]
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	fa93 f3a3 	rbit	r3, r3
 8003086:	61fb      	str	r3, [r7, #28]
 8003088:	4b29      	ldr	r3, [pc, #164]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 800308a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308c:	2202      	movs	r2, #2
 800308e:	61ba      	str	r2, [r7, #24]
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	fa92 f2a2 	rbit	r2, r2
 8003096:	617a      	str	r2, [r7, #20]
  return result;
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	fab2 f282 	clz	r2, r2
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	f042 0220 	orr.w	r2, r2, #32
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	f002 021f 	and.w	r2, r2, #31
 80030aa:	2101      	movs	r1, #1
 80030ac:	fa01 f202 	lsl.w	r2, r1, r2
 80030b0:	4013      	ands	r3, r2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e079      	b.n	80031ae <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f023 0203 	bic.w	r2, r3, #3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	491a      	ldr	r1, [pc, #104]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030cc:	f7fd fc20 	bl	8000910 <HAL_GetTick>
 80030d0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d2:	e00a      	b.n	80030ea <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030d4:	f7fd fc1c 	bl	8000910 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e061      	b.n	80031ae <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ea:	4b11      	ldr	r3, [pc, #68]	@ (8003130 <HAL_RCC_ClockConfig+0x260>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f003 020c 	and.w	r2, r3, #12
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d1eb      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030fc:	4b0b      	ldr	r3, [pc, #44]	@ (800312c <HAL_RCC_ClockConfig+0x25c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	429a      	cmp	r2, r3
 8003108:	d214      	bcs.n	8003134 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310a:	4b08      	ldr	r3, [pc, #32]	@ (800312c <HAL_RCC_ClockConfig+0x25c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f023 0207 	bic.w	r2, r3, #7
 8003112:	4906      	ldr	r1, [pc, #24]	@ (800312c <HAL_RCC_ClockConfig+0x25c>)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	4313      	orrs	r3, r2
 8003118:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800311a:	4b04      	ldr	r3, [pc, #16]	@ (800312c <HAL_RCC_ClockConfig+0x25c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d005      	beq.n	8003134 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e040      	b.n	80031ae <HAL_RCC_ClockConfig+0x2de>
 800312c:	40022000 	.word	0x40022000
 8003130:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b00      	cmp	r3, #0
 800313e:	d008      	beq.n	8003152 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003140:	4b1d      	ldr	r3, [pc, #116]	@ (80031b8 <HAL_RCC_ClockConfig+0x2e8>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	491a      	ldr	r1, [pc, #104]	@ (80031b8 <HAL_RCC_ClockConfig+0x2e8>)
 800314e:	4313      	orrs	r3, r2
 8003150:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0308 	and.w	r3, r3, #8
 800315a:	2b00      	cmp	r3, #0
 800315c:	d009      	beq.n	8003172 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800315e:	4b16      	ldr	r3, [pc, #88]	@ (80031b8 <HAL_RCC_ClockConfig+0x2e8>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	4912      	ldr	r1, [pc, #72]	@ (80031b8 <HAL_RCC_ClockConfig+0x2e8>)
 800316e:	4313      	orrs	r3, r2
 8003170:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003172:	f000 f829 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 8003176:	4601      	mov	r1, r0
 8003178:	4b0f      	ldr	r3, [pc, #60]	@ (80031b8 <HAL_RCC_ClockConfig+0x2e8>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003180:	22f0      	movs	r2, #240	@ 0xf0
 8003182:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	fa92 f2a2 	rbit	r2, r2
 800318a:	60fa      	str	r2, [r7, #12]
  return result;
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	fab2 f282 	clz	r2, r2
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	40d3      	lsrs	r3, r2
 8003196:	4a09      	ldr	r2, [pc, #36]	@ (80031bc <HAL_RCC_ClockConfig+0x2ec>)
 8003198:	5cd3      	ldrb	r3, [r2, r3]
 800319a:	fa21 f303 	lsr.w	r3, r1, r3
 800319e:	4a08      	ldr	r2, [pc, #32]	@ (80031c0 <HAL_RCC_ClockConfig+0x2f0>)
 80031a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80031a2:	4b08      	ldr	r3, [pc, #32]	@ (80031c4 <HAL_RCC_ClockConfig+0x2f4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fd fb6e 	bl	8000888 <HAL_InitTick>
  
  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3778      	adds	r7, #120	@ 0x78
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40021000 	.word	0x40021000
 80031bc:	08004a44 	.word	0x08004a44
 80031c0:	20000000 	.word	0x20000000
 80031c4:	20000004 	.word	0x20000004

080031c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	2300      	movs	r3, #0
 80031d4:	60bb      	str	r3, [r7, #8]
 80031d6:	2300      	movs	r3, #0
 80031d8:	617b      	str	r3, [r7, #20]
 80031da:	2300      	movs	r3, #0
 80031dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80031de:	2300      	movs	r3, #0
 80031e0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80031e2:	4b1f      	ldr	r3, [pc, #124]	@ (8003260 <HAL_RCC_GetSysClockFreq+0x98>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f003 030c 	and.w	r3, r3, #12
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d002      	beq.n	80031f8 <HAL_RCC_GetSysClockFreq+0x30>
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d003      	beq.n	80031fe <HAL_RCC_GetSysClockFreq+0x36>
 80031f6:	e029      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x9c>)
 80031fa:	613b      	str	r3, [r7, #16]
      break;
 80031fc:	e029      	b.n	8003252 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	0c9b      	lsrs	r3, r3, #18
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	4a18      	ldr	r2, [pc, #96]	@ (8003268 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003208:	5cd3      	ldrb	r3, [r2, r3]
 800320a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800320c:	4b14      	ldr	r3, [pc, #80]	@ (8003260 <HAL_RCC_GetSysClockFreq+0x98>)
 800320e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003210:	f003 030f 	and.w	r3, r3, #15
 8003214:	4a15      	ldr	r2, [pc, #84]	@ (800326c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003216:	5cd3      	ldrb	r3, [r2, r3]
 8003218:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d008      	beq.n	8003236 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003224:	4a0f      	ldr	r2, [pc, #60]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	fbb2 f2f3 	udiv	r2, r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	fb02 f303 	mul.w	r3, r2, r3
 8003232:	617b      	str	r3, [r7, #20]
 8003234:	e007      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003236:	4a0b      	ldr	r2, [pc, #44]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	fbb2 f2f3 	udiv	r2, r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	fb02 f303 	mul.w	r3, r2, r3
 8003244:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	613b      	str	r3, [r7, #16]
      break;
 800324a:	e002      	b.n	8003252 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800324c:	4b05      	ldr	r3, [pc, #20]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x9c>)
 800324e:	613b      	str	r3, [r7, #16]
      break;
 8003250:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003252:	693b      	ldr	r3, [r7, #16]
}
 8003254:	4618      	mov	r0, r3
 8003256:	371c      	adds	r7, #28
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	40021000 	.word	0x40021000
 8003264:	007a1200 	.word	0x007a1200
 8003268:	08004a5c 	.word	0x08004a5c
 800326c:	08004a6c 	.word	0x08004a6c

08003270 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003274:	4b03      	ldr	r3, [pc, #12]	@ (8003284 <HAL_RCC_GetHCLKFreq+0x14>)
 8003276:	681b      	ldr	r3, [r3, #0]
}
 8003278:	4618      	mov	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	20000000 	.word	0x20000000

08003288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800328e:	f7ff ffef 	bl	8003270 <HAL_RCC_GetHCLKFreq>
 8003292:	4601      	mov	r1, r0
 8003294:	4b0b      	ldr	r3, [pc, #44]	@ (80032c4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800329c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80032a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	fa92 f2a2 	rbit	r2, r2
 80032a8:	603a      	str	r2, [r7, #0]
  return result;
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	fab2 f282 	clz	r2, r2
 80032b0:	b2d2      	uxtb	r2, r2
 80032b2:	40d3      	lsrs	r3, r2
 80032b4:	4a04      	ldr	r2, [pc, #16]	@ (80032c8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80032b6:	5cd3      	ldrb	r3, [r2, r3]
 80032b8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80032bc:	4618      	mov	r0, r3
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40021000 	.word	0x40021000
 80032c8:	08004a54 	.word	0x08004a54

080032cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80032d2:	f7ff ffcd 	bl	8003270 <HAL_RCC_GetHCLKFreq>
 80032d6:	4601      	mov	r1, r0
 80032d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003308 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80032e0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80032e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	fa92 f2a2 	rbit	r2, r2
 80032ec:	603a      	str	r2, [r7, #0]
  return result;
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	fab2 f282 	clz	r2, r2
 80032f4:	b2d2      	uxtb	r2, r2
 80032f6:	40d3      	lsrs	r3, r2
 80032f8:	4a04      	ldr	r2, [pc, #16]	@ (800330c <HAL_RCC_GetPCLK2Freq+0x40>)
 80032fa:	5cd3      	ldrb	r3, [r2, r3]
 80032fc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40021000 	.word	0x40021000
 800330c:	08004a54 	.word	0x08004a54

08003310 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b092      	sub	sp, #72	@ 0x48
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003318:	2300      	movs	r3, #0
 800331a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003320:	2300      	movs	r3, #0
 8003322:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 80d4 	beq.w	80034dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003334:	4b4e      	ldr	r3, [pc, #312]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10e      	bne.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003340:	4b4b      	ldr	r3, [pc, #300]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	4a4a      	ldr	r2, [pc, #296]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003346:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800334a:	61d3      	str	r3, [r2, #28]
 800334c:	4b48      	ldr	r3, [pc, #288]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003358:	2301      	movs	r3, #1
 800335a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335e:	4b45      	ldr	r3, [pc, #276]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003366:	2b00      	cmp	r3, #0
 8003368:	d118      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800336a:	4b42      	ldr	r3, [pc, #264]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a41      	ldr	r2, [pc, #260]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003374:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003376:	f7fd facb 	bl	8000910 <HAL_GetTick>
 800337a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337c:	e008      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800337e:	f7fd fac7 	bl	8000910 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b64      	cmp	r3, #100	@ 0x64
 800338a:	d901      	bls.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e1d6      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003390:	4b38      	ldr	r3, [pc, #224]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0f0      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800339c:	4b34      	ldr	r3, [pc, #208]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 8084 	beq.w	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d07c      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033bc:	4b2c      	ldr	r3, [pc, #176]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80033ca:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ce:	fa93 f3a3 	rbit	r3, r3
 80033d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80033d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033d6:	fab3 f383 	clz	r3, r3
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	461a      	mov	r2, r3
 80033de:	4b26      	ldr	r3, [pc, #152]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033e0:	4413      	add	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	461a      	mov	r2, r3
 80033e6:	2301      	movs	r3, #1
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80033ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033f2:	fa93 f3a3 	rbit	r3, r3
 80033f6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80033f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033fa:	fab3 f383 	clz	r3, r3
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	461a      	mov	r2, r3
 8003402:	4b1d      	ldr	r3, [pc, #116]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	461a      	mov	r2, r3
 800340a:	2300      	movs	r3, #0
 800340c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800340e:	4a18      	ldr	r2, [pc, #96]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003410:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003412:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d04b      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341e:	f7fd fa77 	bl	8000910 <HAL_GetTick>
 8003422:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003424:	e00a      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003426:	f7fd fa73 	bl	8000910 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003434:	4293      	cmp	r3, r2
 8003436:	d901      	bls.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e180      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800343c:	2302      	movs	r3, #2
 800343e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003442:	fa93 f3a3 	rbit	r3, r3
 8003446:	627b      	str	r3, [r7, #36]	@ 0x24
 8003448:	2302      	movs	r3, #2
 800344a:	623b      	str	r3, [r7, #32]
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	fa93 f3a3 	rbit	r3, r3
 8003452:	61fb      	str	r3, [r7, #28]
  return result;
 8003454:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003456:	fab3 f383 	clz	r3, r3
 800345a:	b2db      	uxtb	r3, r3
 800345c:	095b      	lsrs	r3, r3, #5
 800345e:	b2db      	uxtb	r3, r3
 8003460:	f043 0302 	orr.w	r3, r3, #2
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d108      	bne.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800346a:	4b01      	ldr	r3, [pc, #4]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	e00d      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003470:	40021000 	.word	0x40021000
 8003474:	40007000 	.word	0x40007000
 8003478:	10908100 	.word	0x10908100
 800347c:	2302      	movs	r3, #2
 800347e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	fa93 f3a3 	rbit	r3, r3
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	4b9a      	ldr	r3, [pc, #616]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800348a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348c:	2202      	movs	r2, #2
 800348e:	613a      	str	r2, [r7, #16]
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	fa92 f2a2 	rbit	r2, r2
 8003496:	60fa      	str	r2, [r7, #12]
  return result;
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	fab2 f282 	clz	r2, r2
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	f002 021f 	and.w	r2, r2, #31
 80034aa:	2101      	movs	r1, #1
 80034ac:	fa01 f202 	lsl.w	r2, r1, r2
 80034b0:	4013      	ands	r3, r2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0b7      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80034b6:	4b8f      	ldr	r3, [pc, #572]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	498c      	ldr	r1, [pc, #560]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034c8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d105      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d0:	4b88      	ldr	r3, [pc, #544]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	4a87      	ldr	r2, [pc, #540]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d008      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034e8:	4b82      	ldr	r3, [pc, #520]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ec:	f023 0203 	bic.w	r2, r3, #3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	497f      	ldr	r1, [pc, #508]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d008      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003506:	4b7b      	ldr	r3, [pc, #492]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	4978      	ldr	r1, [pc, #480]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003514:	4313      	orrs	r3, r2
 8003516:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d008      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003524:	4b73      	ldr	r3, [pc, #460]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003528:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	4970      	ldr	r1, [pc, #448]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003532:	4313      	orrs	r3, r2
 8003534:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0320 	and.w	r3, r3, #32
 800353e:	2b00      	cmp	r3, #0
 8003540:	d008      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003542:	4b6c      	ldr	r3, [pc, #432]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003546:	f023 0210 	bic.w	r2, r3, #16
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	4969      	ldr	r1, [pc, #420]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003550:	4313      	orrs	r3, r2
 8003552:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d008      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003560:	4b64      	ldr	r3, [pc, #400]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800356c:	4961      	ldr	r1, [pc, #388]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800356e:	4313      	orrs	r3, r2
 8003570:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800357a:	2b00      	cmp	r3, #0
 800357c:	d008      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800357e:	4b5d      	ldr	r3, [pc, #372]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003582:	f023 0220 	bic.w	r2, r3, #32
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	495a      	ldr	r1, [pc, #360]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800358c:	4313      	orrs	r3, r2
 800358e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d008      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800359c:	4b55      	ldr	r3, [pc, #340]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800359e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a8:	4952      	ldr	r1, [pc, #328]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d008      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035ba:	4b4e      	ldr	r3, [pc, #312]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	494b      	ldr	r1, [pc, #300]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0310 	and.w	r3, r3, #16
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035d8:	4b46      	ldr	r3, [pc, #280]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035dc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	4943      	ldr	r1, [pc, #268]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d008      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80035f6:	4b3f      	ldr	r3, [pc, #252]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003602:	493c      	ldr	r1, [pc, #240]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003604:	4313      	orrs	r3, r2
 8003606:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003610:	2b00      	cmp	r3, #0
 8003612:	d008      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003614:	4b37      	ldr	r3, [pc, #220]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003618:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003620:	4934      	ldr	r1, [pc, #208]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003622:	4313      	orrs	r3, r2
 8003624:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800362e:	2b00      	cmp	r3, #0
 8003630:	d008      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003632:	4b30      	ldr	r3, [pc, #192]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003636:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363e:	492d      	ldr	r1, [pc, #180]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003640:	4313      	orrs	r3, r2
 8003642:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d008      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003650:	4b28      	ldr	r3, [pc, #160]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003654:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800365c:	4925      	ldr	r1, [pc, #148]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800365e:	4313      	orrs	r3, r2
 8003660:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d008      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800366e:	4b21      	ldr	r3, [pc, #132]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003672:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367a:	491e      	ldr	r1, [pc, #120]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800367c:	4313      	orrs	r3, r2
 800367e:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d008      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800368c:	4b19      	ldr	r3, [pc, #100]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800368e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003690:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003698:	4916      	ldr	r1, [pc, #88]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800369a:	4313      	orrs	r3, r2
 800369c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d008      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80036aa:	4b12      	ldr	r3, [pc, #72]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b6:	490f      	ldr	r1, [pc, #60]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d008      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80036c8:	4b0a      	ldr	r3, [pc, #40]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036cc:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d4:	4907      	ldr	r1, [pc, #28]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00c      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80036e6:	4b03      	ldr	r3, [pc, #12]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ea:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	e002      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80036f2:	bf00      	nop
 80036f4:	40021000 	.word	0x40021000
 80036f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036fa:	4913      	ldr	r1, [pc, #76]	@ (8003748 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800370c:	4b0e      	ldr	r3, [pc, #56]	@ (8003748 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800370e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003710:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003718:	490b      	ldr	r1, [pc, #44]	@ (8003748 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800371a:	4313      	orrs	r3, r2
 800371c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d008      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800372a:	4b07      	ldr	r3, [pc, #28]	@ (8003748 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003736:	4904      	ldr	r1, [pc, #16]	@ (8003748 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003738:	4313      	orrs	r3, r2
 800373a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3748      	adds	r7, #72	@ 0x48
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40021000 	.word	0x40021000

0800374c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e040      	b.n	80037e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003762:	2b00      	cmp	r3, #0
 8003764:	d106      	bne.n	8003774 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7fc ff90 	bl	8000694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2224      	movs	r2, #36	@ 0x24
 8003778:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0201 	bic.w	r2, r2, #1
 8003788:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 fa86 	bl	8003ca4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f8af 	bl	80038fc <UART_SetConfig>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e01b      	b.n	80037e0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80037c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0201 	orr.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 fb05 	bl	8003de8 <UART_CheckIdleState>
 80037de:	4603      	mov	r3, r0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08a      	sub	sp, #40	@ 0x28
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	603b      	str	r3, [r7, #0]
 80037f4:	4613      	mov	r3, r2
 80037f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037fc:	2b20      	cmp	r3, #32
 80037fe:	d177      	bne.n	80038f0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <HAL_UART_Transmit+0x24>
 8003806:	88fb      	ldrh	r3, [r7, #6]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e070      	b.n	80038f2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2221      	movs	r2, #33	@ 0x21
 800381c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800381e:	f7fd f877 	bl	8000910 <HAL_GetTick>
 8003822:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	88fa      	ldrh	r2, [r7, #6]
 8003828:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	88fa      	ldrh	r2, [r7, #6]
 8003830:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800383c:	d108      	bne.n	8003850 <HAL_UART_Transmit+0x68>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d104      	bne.n	8003850 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003846:	2300      	movs	r3, #0
 8003848:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	61bb      	str	r3, [r7, #24]
 800384e:	e003      	b.n	8003858 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003854:	2300      	movs	r3, #0
 8003856:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003858:	e02f      	b.n	80038ba <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	2200      	movs	r2, #0
 8003862:	2180      	movs	r1, #128	@ 0x80
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 fb67 	bl	8003f38 <UART_WaitOnFlagUntilTimeout>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d004      	beq.n	800387a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2220      	movs	r2, #32
 8003874:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e03b      	b.n	80038f2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10b      	bne.n	8003898 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	881a      	ldrh	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800388c:	b292      	uxth	r2, r2
 800388e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	3302      	adds	r3, #2
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	e007      	b.n	80038a8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	781a      	ldrb	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	3301      	adds	r3, #1
 80038a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1c9      	bne.n	800385a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2200      	movs	r2, #0
 80038ce:	2140      	movs	r1, #64	@ 0x40
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 fb31 	bl	8003f38 <UART_WaitOnFlagUntilTimeout>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d004      	beq.n	80038e6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2220      	movs	r2, #32
 80038e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e005      	b.n	80038f2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2220      	movs	r2, #32
 80038ea:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80038ec:	2300      	movs	r3, #0
 80038ee:	e000      	b.n	80038f2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80038f0:	2302      	movs	r3, #2
  }
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3720      	adds	r7, #32
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
	...

080038fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b088      	sub	sp, #32
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003904:	2300      	movs	r3, #0
 8003906:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	4313      	orrs	r3, r2
 800391e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	4b92      	ldr	r3, [pc, #584]	@ (8003b70 <UART_SetConfig+0x274>)
 8003928:	4013      	ands	r3, r2
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6812      	ldr	r2, [r2, #0]
 800392e:	6979      	ldr	r1, [r7, #20]
 8003930:	430b      	orrs	r3, r1
 8003932:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	4313      	orrs	r3, r2
 8003958:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	430a      	orrs	r2, r1
 800396c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a80      	ldr	r2, [pc, #512]	@ (8003b74 <UART_SetConfig+0x278>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d120      	bne.n	80039ba <UART_SetConfig+0xbe>
 8003978:	4b7f      	ldr	r3, [pc, #508]	@ (8003b78 <UART_SetConfig+0x27c>)
 800397a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800397c:	f003 0303 	and.w	r3, r3, #3
 8003980:	2b03      	cmp	r3, #3
 8003982:	d817      	bhi.n	80039b4 <UART_SetConfig+0xb8>
 8003984:	a201      	add	r2, pc, #4	@ (adr r2, 800398c <UART_SetConfig+0x90>)
 8003986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398a:	bf00      	nop
 800398c:	0800399d 	.word	0x0800399d
 8003990:	080039a9 	.word	0x080039a9
 8003994:	080039af 	.word	0x080039af
 8003998:	080039a3 	.word	0x080039a3
 800399c:	2301      	movs	r3, #1
 800399e:	77fb      	strb	r3, [r7, #31]
 80039a0:	e0b5      	b.n	8003b0e <UART_SetConfig+0x212>
 80039a2:	2302      	movs	r3, #2
 80039a4:	77fb      	strb	r3, [r7, #31]
 80039a6:	e0b2      	b.n	8003b0e <UART_SetConfig+0x212>
 80039a8:	2304      	movs	r3, #4
 80039aa:	77fb      	strb	r3, [r7, #31]
 80039ac:	e0af      	b.n	8003b0e <UART_SetConfig+0x212>
 80039ae:	2308      	movs	r3, #8
 80039b0:	77fb      	strb	r3, [r7, #31]
 80039b2:	e0ac      	b.n	8003b0e <UART_SetConfig+0x212>
 80039b4:	2310      	movs	r3, #16
 80039b6:	77fb      	strb	r3, [r7, #31]
 80039b8:	e0a9      	b.n	8003b0e <UART_SetConfig+0x212>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a6f      	ldr	r2, [pc, #444]	@ (8003b7c <UART_SetConfig+0x280>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d124      	bne.n	8003a0e <UART_SetConfig+0x112>
 80039c4:	4b6c      	ldr	r3, [pc, #432]	@ (8003b78 <UART_SetConfig+0x27c>)
 80039c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80039d0:	d011      	beq.n	80039f6 <UART_SetConfig+0xfa>
 80039d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80039d6:	d817      	bhi.n	8003a08 <UART_SetConfig+0x10c>
 80039d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039dc:	d011      	beq.n	8003a02 <UART_SetConfig+0x106>
 80039de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039e2:	d811      	bhi.n	8003a08 <UART_SetConfig+0x10c>
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <UART_SetConfig+0xf4>
 80039e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039ec:	d006      	beq.n	80039fc <UART_SetConfig+0x100>
 80039ee:	e00b      	b.n	8003a08 <UART_SetConfig+0x10c>
 80039f0:	2300      	movs	r3, #0
 80039f2:	77fb      	strb	r3, [r7, #31]
 80039f4:	e08b      	b.n	8003b0e <UART_SetConfig+0x212>
 80039f6:	2302      	movs	r3, #2
 80039f8:	77fb      	strb	r3, [r7, #31]
 80039fa:	e088      	b.n	8003b0e <UART_SetConfig+0x212>
 80039fc:	2304      	movs	r3, #4
 80039fe:	77fb      	strb	r3, [r7, #31]
 8003a00:	e085      	b.n	8003b0e <UART_SetConfig+0x212>
 8003a02:	2308      	movs	r3, #8
 8003a04:	77fb      	strb	r3, [r7, #31]
 8003a06:	e082      	b.n	8003b0e <UART_SetConfig+0x212>
 8003a08:	2310      	movs	r3, #16
 8003a0a:	77fb      	strb	r3, [r7, #31]
 8003a0c:	e07f      	b.n	8003b0e <UART_SetConfig+0x212>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a5b      	ldr	r2, [pc, #364]	@ (8003b80 <UART_SetConfig+0x284>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d124      	bne.n	8003a62 <UART_SetConfig+0x166>
 8003a18:	4b57      	ldr	r3, [pc, #348]	@ (8003b78 <UART_SetConfig+0x27c>)
 8003a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003a20:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003a24:	d011      	beq.n	8003a4a <UART_SetConfig+0x14e>
 8003a26:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003a2a:	d817      	bhi.n	8003a5c <UART_SetConfig+0x160>
 8003a2c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a30:	d011      	beq.n	8003a56 <UART_SetConfig+0x15a>
 8003a32:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a36:	d811      	bhi.n	8003a5c <UART_SetConfig+0x160>
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <UART_SetConfig+0x148>
 8003a3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a40:	d006      	beq.n	8003a50 <UART_SetConfig+0x154>
 8003a42:	e00b      	b.n	8003a5c <UART_SetConfig+0x160>
 8003a44:	2300      	movs	r3, #0
 8003a46:	77fb      	strb	r3, [r7, #31]
 8003a48:	e061      	b.n	8003b0e <UART_SetConfig+0x212>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	77fb      	strb	r3, [r7, #31]
 8003a4e:	e05e      	b.n	8003b0e <UART_SetConfig+0x212>
 8003a50:	2304      	movs	r3, #4
 8003a52:	77fb      	strb	r3, [r7, #31]
 8003a54:	e05b      	b.n	8003b0e <UART_SetConfig+0x212>
 8003a56:	2308      	movs	r3, #8
 8003a58:	77fb      	strb	r3, [r7, #31]
 8003a5a:	e058      	b.n	8003b0e <UART_SetConfig+0x212>
 8003a5c:	2310      	movs	r3, #16
 8003a5e:	77fb      	strb	r3, [r7, #31]
 8003a60:	e055      	b.n	8003b0e <UART_SetConfig+0x212>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a47      	ldr	r2, [pc, #284]	@ (8003b84 <UART_SetConfig+0x288>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d124      	bne.n	8003ab6 <UART_SetConfig+0x1ba>
 8003a6c:	4b42      	ldr	r3, [pc, #264]	@ (8003b78 <UART_SetConfig+0x27c>)
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a70:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003a74:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a78:	d011      	beq.n	8003a9e <UART_SetConfig+0x1a2>
 8003a7a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a7e:	d817      	bhi.n	8003ab0 <UART_SetConfig+0x1b4>
 8003a80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a84:	d011      	beq.n	8003aaa <UART_SetConfig+0x1ae>
 8003a86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a8a:	d811      	bhi.n	8003ab0 <UART_SetConfig+0x1b4>
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <UART_SetConfig+0x19c>
 8003a90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a94:	d006      	beq.n	8003aa4 <UART_SetConfig+0x1a8>
 8003a96:	e00b      	b.n	8003ab0 <UART_SetConfig+0x1b4>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	77fb      	strb	r3, [r7, #31]
 8003a9c:	e037      	b.n	8003b0e <UART_SetConfig+0x212>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	77fb      	strb	r3, [r7, #31]
 8003aa2:	e034      	b.n	8003b0e <UART_SetConfig+0x212>
 8003aa4:	2304      	movs	r3, #4
 8003aa6:	77fb      	strb	r3, [r7, #31]
 8003aa8:	e031      	b.n	8003b0e <UART_SetConfig+0x212>
 8003aaa:	2308      	movs	r3, #8
 8003aac:	77fb      	strb	r3, [r7, #31]
 8003aae:	e02e      	b.n	8003b0e <UART_SetConfig+0x212>
 8003ab0:	2310      	movs	r3, #16
 8003ab2:	77fb      	strb	r3, [r7, #31]
 8003ab4:	e02b      	b.n	8003b0e <UART_SetConfig+0x212>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a33      	ldr	r2, [pc, #204]	@ (8003b88 <UART_SetConfig+0x28c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d124      	bne.n	8003b0a <UART_SetConfig+0x20e>
 8003ac0:	4b2d      	ldr	r3, [pc, #180]	@ (8003b78 <UART_SetConfig+0x27c>)
 8003ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003ac8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003acc:	d011      	beq.n	8003af2 <UART_SetConfig+0x1f6>
 8003ace:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ad2:	d817      	bhi.n	8003b04 <UART_SetConfig+0x208>
 8003ad4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ad8:	d011      	beq.n	8003afe <UART_SetConfig+0x202>
 8003ada:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ade:	d811      	bhi.n	8003b04 <UART_SetConfig+0x208>
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <UART_SetConfig+0x1f0>
 8003ae4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ae8:	d006      	beq.n	8003af8 <UART_SetConfig+0x1fc>
 8003aea:	e00b      	b.n	8003b04 <UART_SetConfig+0x208>
 8003aec:	2300      	movs	r3, #0
 8003aee:	77fb      	strb	r3, [r7, #31]
 8003af0:	e00d      	b.n	8003b0e <UART_SetConfig+0x212>
 8003af2:	2302      	movs	r3, #2
 8003af4:	77fb      	strb	r3, [r7, #31]
 8003af6:	e00a      	b.n	8003b0e <UART_SetConfig+0x212>
 8003af8:	2304      	movs	r3, #4
 8003afa:	77fb      	strb	r3, [r7, #31]
 8003afc:	e007      	b.n	8003b0e <UART_SetConfig+0x212>
 8003afe:	2308      	movs	r3, #8
 8003b00:	77fb      	strb	r3, [r7, #31]
 8003b02:	e004      	b.n	8003b0e <UART_SetConfig+0x212>
 8003b04:	2310      	movs	r3, #16
 8003b06:	77fb      	strb	r3, [r7, #31]
 8003b08:	e001      	b.n	8003b0e <UART_SetConfig+0x212>
 8003b0a:	2310      	movs	r3, #16
 8003b0c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b16:	d16b      	bne.n	8003bf0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003b18:	7ffb      	ldrb	r3, [r7, #31]
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d838      	bhi.n	8003b90 <UART_SetConfig+0x294>
 8003b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b24 <UART_SetConfig+0x228>)
 8003b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b24:	08003b49 	.word	0x08003b49
 8003b28:	08003b51 	.word	0x08003b51
 8003b2c:	08003b59 	.word	0x08003b59
 8003b30:	08003b91 	.word	0x08003b91
 8003b34:	08003b5f 	.word	0x08003b5f
 8003b38:	08003b91 	.word	0x08003b91
 8003b3c:	08003b91 	.word	0x08003b91
 8003b40:	08003b91 	.word	0x08003b91
 8003b44:	08003b67 	.word	0x08003b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b48:	f7ff fb9e 	bl	8003288 <HAL_RCC_GetPCLK1Freq>
 8003b4c:	61b8      	str	r0, [r7, #24]
        break;
 8003b4e:	e024      	b.n	8003b9a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b50:	f7ff fbbc 	bl	80032cc <HAL_RCC_GetPCLK2Freq>
 8003b54:	61b8      	str	r0, [r7, #24]
        break;
 8003b56:	e020      	b.n	8003b9a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b58:	4b0c      	ldr	r3, [pc, #48]	@ (8003b8c <UART_SetConfig+0x290>)
 8003b5a:	61bb      	str	r3, [r7, #24]
        break;
 8003b5c:	e01d      	b.n	8003b9a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b5e:	f7ff fb33 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 8003b62:	61b8      	str	r0, [r7, #24]
        break;
 8003b64:	e019      	b.n	8003b9a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b6a:	61bb      	str	r3, [r7, #24]
        break;
 8003b6c:	e015      	b.n	8003b9a <UART_SetConfig+0x29e>
 8003b6e:	bf00      	nop
 8003b70:	efff69f3 	.word	0xefff69f3
 8003b74:	40013800 	.word	0x40013800
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	40004400 	.word	0x40004400
 8003b80:	40004800 	.word	0x40004800
 8003b84:	40004c00 	.word	0x40004c00
 8003b88:	40005000 	.word	0x40005000
 8003b8c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	77bb      	strb	r3, [r7, #30]
        break;
 8003b98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d073      	beq.n	8003c88 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	005a      	lsls	r2, r3, #1
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	085b      	lsrs	r3, r3, #1
 8003baa:	441a      	add	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	2b0f      	cmp	r3, #15
 8003bba:	d916      	bls.n	8003bea <UART_SetConfig+0x2ee>
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bc2:	d212      	bcs.n	8003bea <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	f023 030f 	bic.w	r3, r3, #15
 8003bcc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	085b      	lsrs	r3, r3, #1
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	89fb      	ldrh	r3, [r7, #14]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	89fa      	ldrh	r2, [r7, #14]
 8003be6:	60da      	str	r2, [r3, #12]
 8003be8:	e04e      	b.n	8003c88 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	77bb      	strb	r3, [r7, #30]
 8003bee:	e04b      	b.n	8003c88 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bf0:	7ffb      	ldrb	r3, [r7, #31]
 8003bf2:	2b08      	cmp	r3, #8
 8003bf4:	d827      	bhi.n	8003c46 <UART_SetConfig+0x34a>
 8003bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8003bfc <UART_SetConfig+0x300>)
 8003bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfc:	08003c21 	.word	0x08003c21
 8003c00:	08003c29 	.word	0x08003c29
 8003c04:	08003c31 	.word	0x08003c31
 8003c08:	08003c47 	.word	0x08003c47
 8003c0c:	08003c37 	.word	0x08003c37
 8003c10:	08003c47 	.word	0x08003c47
 8003c14:	08003c47 	.word	0x08003c47
 8003c18:	08003c47 	.word	0x08003c47
 8003c1c:	08003c3f 	.word	0x08003c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c20:	f7ff fb32 	bl	8003288 <HAL_RCC_GetPCLK1Freq>
 8003c24:	61b8      	str	r0, [r7, #24]
        break;
 8003c26:	e013      	b.n	8003c50 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c28:	f7ff fb50 	bl	80032cc <HAL_RCC_GetPCLK2Freq>
 8003c2c:	61b8      	str	r0, [r7, #24]
        break;
 8003c2e:	e00f      	b.n	8003c50 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c30:	4b1b      	ldr	r3, [pc, #108]	@ (8003ca0 <UART_SetConfig+0x3a4>)
 8003c32:	61bb      	str	r3, [r7, #24]
        break;
 8003c34:	e00c      	b.n	8003c50 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c36:	f7ff fac7 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 8003c3a:	61b8      	str	r0, [r7, #24]
        break;
 8003c3c:	e008      	b.n	8003c50 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c42:	61bb      	str	r3, [r7, #24]
        break;
 8003c44:	e004      	b.n	8003c50 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	77bb      	strb	r3, [r7, #30]
        break;
 8003c4e:	bf00      	nop
    }

    if (pclk != 0U)
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d018      	beq.n	8003c88 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	085a      	lsrs	r2, r3, #1
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	441a      	add	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	2b0f      	cmp	r3, #15
 8003c6e:	d909      	bls.n	8003c84 <UART_SetConfig+0x388>
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c76:	d205      	bcs.n	8003c84 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	60da      	str	r2, [r3, #12]
 8003c82:	e001      	b.n	8003c88 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003c94:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3720      	adds	r7, #32
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	007a1200 	.word	0x007a1200

08003ca4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb0:	f003 0308 	and.w	r3, r3, #8
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00a      	beq.n	8003cce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00a      	beq.n	8003cf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00a      	beq.n	8003d12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d16:	f003 0304 	and.w	r3, r3, #4
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00a      	beq.n	8003d34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d38:	f003 0310 	and.w	r3, r3, #16
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00a      	beq.n	8003d56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5a:	f003 0320 	and.w	r3, r3, #32
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00a      	beq.n	8003d78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d01a      	beq.n	8003dba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003da2:	d10a      	bne.n	8003dba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	605a      	str	r2, [r3, #4]
  }
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b098      	sub	sp, #96	@ 0x60
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003df8:	f7fc fd8a 	bl	8000910 <HAL_GetTick>
 8003dfc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0308 	and.w	r3, r3, #8
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d12e      	bne.n	8003e6a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e14:	2200      	movs	r2, #0
 8003e16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f88c 	bl	8003f38 <UART_WaitOnFlagUntilTimeout>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d021      	beq.n	8003e6a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e2e:	e853 3f00 	ldrex	r3, [r3]
 8003e32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	461a      	mov	r2, r3
 8003e42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e44:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e46:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e4c:	e841 2300 	strex	r3, r2, [r1]
 8003e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1e6      	bne.n	8003e26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e062      	b.n	8003f30 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	d149      	bne.n	8003f0c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e80:	2200      	movs	r2, #0
 8003e82:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f856 	bl	8003f38 <UART_WaitOnFlagUntilTimeout>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d03c      	beq.n	8003f0c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9a:	e853 3f00 	ldrex	r3, [r3]
 8003e9e:	623b      	str	r3, [r7, #32]
   return(result);
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	461a      	mov	r2, r3
 8003eae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003eb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003eb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003eb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eb8:	e841 2300 	strex	r3, r2, [r1]
 8003ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1e6      	bne.n	8003e92 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3308      	adds	r3, #8
 8003eca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	e853 3f00 	ldrex	r3, [r3]
 8003ed2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 0301 	bic.w	r3, r3, #1
 8003eda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3308      	adds	r3, #8
 8003ee2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ee4:	61fa      	str	r2, [r7, #28]
 8003ee6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee8:	69b9      	ldr	r1, [r7, #24]
 8003eea:	69fa      	ldr	r2, [r7, #28]
 8003eec:	e841 2300 	strex	r3, r2, [r1]
 8003ef0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1e5      	bne.n	8003ec4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e011      	b.n	8003f30 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3758      	adds	r7, #88	@ 0x58
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	4613      	mov	r3, r2
 8003f46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f48:	e04f      	b.n	8003fea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f50:	d04b      	beq.n	8003fea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f52:	f7fc fcdd 	bl	8000910 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d302      	bcc.n	8003f68 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e04e      	b.n	800400a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d037      	beq.n	8003fea <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b80      	cmp	r3, #128	@ 0x80
 8003f7e:	d034      	beq.n	8003fea <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2b40      	cmp	r3, #64	@ 0x40
 8003f84:	d031      	beq.n	8003fea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	f003 0308 	and.w	r3, r3, #8
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d110      	bne.n	8003fb6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2208      	movs	r2, #8
 8003f9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 f838 	bl	8004012 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2208      	movs	r2, #8
 8003fa6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e029      	b.n	800400a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fc4:	d111      	bne.n	8003fea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003fce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 f81e 	bl	8004012 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e00f      	b.n	800400a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	69da      	ldr	r2, [r3, #28]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	bf0c      	ite	eq
 8003ffa:	2301      	moveq	r3, #1
 8003ffc:	2300      	movne	r3, #0
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	461a      	mov	r2, r3
 8004002:	79fb      	ldrb	r3, [r7, #7]
 8004004:	429a      	cmp	r2, r3
 8004006:	d0a0      	beq.n	8003f4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004012:	b480      	push	{r7}
 8004014:	b095      	sub	sp, #84	@ 0x54
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004022:	e853 3f00 	ldrex	r3, [r3]
 8004026:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800402a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800402e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	461a      	mov	r2, r3
 8004036:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004038:	643b      	str	r3, [r7, #64]	@ 0x40
 800403a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800403e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004040:	e841 2300 	strex	r3, r2, [r1]
 8004044:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1e6      	bne.n	800401a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3308      	adds	r3, #8
 8004052:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	e853 3f00 	ldrex	r3, [r3]
 800405a:	61fb      	str	r3, [r7, #28]
   return(result);
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	f023 0301 	bic.w	r3, r3, #1
 8004062:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	3308      	adds	r3, #8
 800406a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800406c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800406e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004070:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004072:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004074:	e841 2300 	strex	r3, r2, [r1]
 8004078:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800407a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1e5      	bne.n	800404c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004084:	2b01      	cmp	r3, #1
 8004086:	d118      	bne.n	80040ba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	60bb      	str	r3, [r7, #8]
   return(result);
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	f023 0310 	bic.w	r3, r3, #16
 800409c:	647b      	str	r3, [r7, #68]	@ 0x44
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	461a      	mov	r2, r3
 80040a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040a6:	61bb      	str	r3, [r7, #24]
 80040a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040aa:	6979      	ldr	r1, [r7, #20]
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	e841 2300 	strex	r3, r2, [r1]
 80040b2:	613b      	str	r3, [r7, #16]
   return(result);
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1e6      	bne.n	8004088 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2220      	movs	r2, #32
 80040be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80040ce:	bf00      	nop
 80040d0:	3754      	adds	r7, #84	@ 0x54
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
	...

080040dc <siprintf>:
 80040dc:	b40e      	push	{r1, r2, r3}
 80040de:	b500      	push	{lr}
 80040e0:	b09c      	sub	sp, #112	@ 0x70
 80040e2:	ab1d      	add	r3, sp, #116	@ 0x74
 80040e4:	9002      	str	r0, [sp, #8]
 80040e6:	9006      	str	r0, [sp, #24]
 80040e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80040ec:	4809      	ldr	r0, [pc, #36]	@ (8004114 <siprintf+0x38>)
 80040ee:	9107      	str	r1, [sp, #28]
 80040f0:	9104      	str	r1, [sp, #16]
 80040f2:	4909      	ldr	r1, [pc, #36]	@ (8004118 <siprintf+0x3c>)
 80040f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80040f8:	9105      	str	r1, [sp, #20]
 80040fa:	6800      	ldr	r0, [r0, #0]
 80040fc:	9301      	str	r3, [sp, #4]
 80040fe:	a902      	add	r1, sp, #8
 8004100:	f000 f994 	bl	800442c <_svfiprintf_r>
 8004104:	9b02      	ldr	r3, [sp, #8]
 8004106:	2200      	movs	r2, #0
 8004108:	701a      	strb	r2, [r3, #0]
 800410a:	b01c      	add	sp, #112	@ 0x70
 800410c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004110:	b003      	add	sp, #12
 8004112:	4770      	bx	lr
 8004114:	2000000c 	.word	0x2000000c
 8004118:	ffff0208 	.word	0xffff0208

0800411c <memset>:
 800411c:	4402      	add	r2, r0
 800411e:	4603      	mov	r3, r0
 8004120:	4293      	cmp	r3, r2
 8004122:	d100      	bne.n	8004126 <memset+0xa>
 8004124:	4770      	bx	lr
 8004126:	f803 1b01 	strb.w	r1, [r3], #1
 800412a:	e7f9      	b.n	8004120 <memset+0x4>

0800412c <__errno>:
 800412c:	4b01      	ldr	r3, [pc, #4]	@ (8004134 <__errno+0x8>)
 800412e:	6818      	ldr	r0, [r3, #0]
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	2000000c 	.word	0x2000000c

08004138 <__libc_init_array>:
 8004138:	b570      	push	{r4, r5, r6, lr}
 800413a:	4d0d      	ldr	r5, [pc, #52]	@ (8004170 <__libc_init_array+0x38>)
 800413c:	4c0d      	ldr	r4, [pc, #52]	@ (8004174 <__libc_init_array+0x3c>)
 800413e:	1b64      	subs	r4, r4, r5
 8004140:	10a4      	asrs	r4, r4, #2
 8004142:	2600      	movs	r6, #0
 8004144:	42a6      	cmp	r6, r4
 8004146:	d109      	bne.n	800415c <__libc_init_array+0x24>
 8004148:	4d0b      	ldr	r5, [pc, #44]	@ (8004178 <__libc_init_array+0x40>)
 800414a:	4c0c      	ldr	r4, [pc, #48]	@ (800417c <__libc_init_array+0x44>)
 800414c:	f000 fc66 	bl	8004a1c <_init>
 8004150:	1b64      	subs	r4, r4, r5
 8004152:	10a4      	asrs	r4, r4, #2
 8004154:	2600      	movs	r6, #0
 8004156:	42a6      	cmp	r6, r4
 8004158:	d105      	bne.n	8004166 <__libc_init_array+0x2e>
 800415a:	bd70      	pop	{r4, r5, r6, pc}
 800415c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004160:	4798      	blx	r3
 8004162:	3601      	adds	r6, #1
 8004164:	e7ee      	b.n	8004144 <__libc_init_array+0xc>
 8004166:	f855 3b04 	ldr.w	r3, [r5], #4
 800416a:	4798      	blx	r3
 800416c:	3601      	adds	r6, #1
 800416e:	e7f2      	b.n	8004156 <__libc_init_array+0x1e>
 8004170:	08004ab8 	.word	0x08004ab8
 8004174:	08004ab8 	.word	0x08004ab8
 8004178:	08004ab8 	.word	0x08004ab8
 800417c:	08004abc 	.word	0x08004abc

08004180 <__retarget_lock_acquire_recursive>:
 8004180:	4770      	bx	lr

08004182 <__retarget_lock_release_recursive>:
 8004182:	4770      	bx	lr

08004184 <_free_r>:
 8004184:	b538      	push	{r3, r4, r5, lr}
 8004186:	4605      	mov	r5, r0
 8004188:	2900      	cmp	r1, #0
 800418a:	d041      	beq.n	8004210 <_free_r+0x8c>
 800418c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004190:	1f0c      	subs	r4, r1, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	bfb8      	it	lt
 8004196:	18e4      	addlt	r4, r4, r3
 8004198:	f000 f8e0 	bl	800435c <__malloc_lock>
 800419c:	4a1d      	ldr	r2, [pc, #116]	@ (8004214 <_free_r+0x90>)
 800419e:	6813      	ldr	r3, [r2, #0]
 80041a0:	b933      	cbnz	r3, 80041b0 <_free_r+0x2c>
 80041a2:	6063      	str	r3, [r4, #4]
 80041a4:	6014      	str	r4, [r2, #0]
 80041a6:	4628      	mov	r0, r5
 80041a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041ac:	f000 b8dc 	b.w	8004368 <__malloc_unlock>
 80041b0:	42a3      	cmp	r3, r4
 80041b2:	d908      	bls.n	80041c6 <_free_r+0x42>
 80041b4:	6820      	ldr	r0, [r4, #0]
 80041b6:	1821      	adds	r1, r4, r0
 80041b8:	428b      	cmp	r3, r1
 80041ba:	bf01      	itttt	eq
 80041bc:	6819      	ldreq	r1, [r3, #0]
 80041be:	685b      	ldreq	r3, [r3, #4]
 80041c0:	1809      	addeq	r1, r1, r0
 80041c2:	6021      	streq	r1, [r4, #0]
 80041c4:	e7ed      	b.n	80041a2 <_free_r+0x1e>
 80041c6:	461a      	mov	r2, r3
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	b10b      	cbz	r3, 80041d0 <_free_r+0x4c>
 80041cc:	42a3      	cmp	r3, r4
 80041ce:	d9fa      	bls.n	80041c6 <_free_r+0x42>
 80041d0:	6811      	ldr	r1, [r2, #0]
 80041d2:	1850      	adds	r0, r2, r1
 80041d4:	42a0      	cmp	r0, r4
 80041d6:	d10b      	bne.n	80041f0 <_free_r+0x6c>
 80041d8:	6820      	ldr	r0, [r4, #0]
 80041da:	4401      	add	r1, r0
 80041dc:	1850      	adds	r0, r2, r1
 80041de:	4283      	cmp	r3, r0
 80041e0:	6011      	str	r1, [r2, #0]
 80041e2:	d1e0      	bne.n	80041a6 <_free_r+0x22>
 80041e4:	6818      	ldr	r0, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	6053      	str	r3, [r2, #4]
 80041ea:	4408      	add	r0, r1
 80041ec:	6010      	str	r0, [r2, #0]
 80041ee:	e7da      	b.n	80041a6 <_free_r+0x22>
 80041f0:	d902      	bls.n	80041f8 <_free_r+0x74>
 80041f2:	230c      	movs	r3, #12
 80041f4:	602b      	str	r3, [r5, #0]
 80041f6:	e7d6      	b.n	80041a6 <_free_r+0x22>
 80041f8:	6820      	ldr	r0, [r4, #0]
 80041fa:	1821      	adds	r1, r4, r0
 80041fc:	428b      	cmp	r3, r1
 80041fe:	bf04      	itt	eq
 8004200:	6819      	ldreq	r1, [r3, #0]
 8004202:	685b      	ldreq	r3, [r3, #4]
 8004204:	6063      	str	r3, [r4, #4]
 8004206:	bf04      	itt	eq
 8004208:	1809      	addeq	r1, r1, r0
 800420a:	6021      	streq	r1, [r4, #0]
 800420c:	6054      	str	r4, [r2, #4]
 800420e:	e7ca      	b.n	80041a6 <_free_r+0x22>
 8004210:	bd38      	pop	{r3, r4, r5, pc}
 8004212:	bf00      	nop
 8004214:	200002b0 	.word	0x200002b0

08004218 <sbrk_aligned>:
 8004218:	b570      	push	{r4, r5, r6, lr}
 800421a:	4e0f      	ldr	r6, [pc, #60]	@ (8004258 <sbrk_aligned+0x40>)
 800421c:	460c      	mov	r4, r1
 800421e:	6831      	ldr	r1, [r6, #0]
 8004220:	4605      	mov	r5, r0
 8004222:	b911      	cbnz	r1, 800422a <sbrk_aligned+0x12>
 8004224:	f000 fba6 	bl	8004974 <_sbrk_r>
 8004228:	6030      	str	r0, [r6, #0]
 800422a:	4621      	mov	r1, r4
 800422c:	4628      	mov	r0, r5
 800422e:	f000 fba1 	bl	8004974 <_sbrk_r>
 8004232:	1c43      	adds	r3, r0, #1
 8004234:	d103      	bne.n	800423e <sbrk_aligned+0x26>
 8004236:	f04f 34ff 	mov.w	r4, #4294967295
 800423a:	4620      	mov	r0, r4
 800423c:	bd70      	pop	{r4, r5, r6, pc}
 800423e:	1cc4      	adds	r4, r0, #3
 8004240:	f024 0403 	bic.w	r4, r4, #3
 8004244:	42a0      	cmp	r0, r4
 8004246:	d0f8      	beq.n	800423a <sbrk_aligned+0x22>
 8004248:	1a21      	subs	r1, r4, r0
 800424a:	4628      	mov	r0, r5
 800424c:	f000 fb92 	bl	8004974 <_sbrk_r>
 8004250:	3001      	adds	r0, #1
 8004252:	d1f2      	bne.n	800423a <sbrk_aligned+0x22>
 8004254:	e7ef      	b.n	8004236 <sbrk_aligned+0x1e>
 8004256:	bf00      	nop
 8004258:	200002ac 	.word	0x200002ac

0800425c <_malloc_r>:
 800425c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004260:	1ccd      	adds	r5, r1, #3
 8004262:	f025 0503 	bic.w	r5, r5, #3
 8004266:	3508      	adds	r5, #8
 8004268:	2d0c      	cmp	r5, #12
 800426a:	bf38      	it	cc
 800426c:	250c      	movcc	r5, #12
 800426e:	2d00      	cmp	r5, #0
 8004270:	4606      	mov	r6, r0
 8004272:	db01      	blt.n	8004278 <_malloc_r+0x1c>
 8004274:	42a9      	cmp	r1, r5
 8004276:	d904      	bls.n	8004282 <_malloc_r+0x26>
 8004278:	230c      	movs	r3, #12
 800427a:	6033      	str	r3, [r6, #0]
 800427c:	2000      	movs	r0, #0
 800427e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004282:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004358 <_malloc_r+0xfc>
 8004286:	f000 f869 	bl	800435c <__malloc_lock>
 800428a:	f8d8 3000 	ldr.w	r3, [r8]
 800428e:	461c      	mov	r4, r3
 8004290:	bb44      	cbnz	r4, 80042e4 <_malloc_r+0x88>
 8004292:	4629      	mov	r1, r5
 8004294:	4630      	mov	r0, r6
 8004296:	f7ff ffbf 	bl	8004218 <sbrk_aligned>
 800429a:	1c43      	adds	r3, r0, #1
 800429c:	4604      	mov	r4, r0
 800429e:	d158      	bne.n	8004352 <_malloc_r+0xf6>
 80042a0:	f8d8 4000 	ldr.w	r4, [r8]
 80042a4:	4627      	mov	r7, r4
 80042a6:	2f00      	cmp	r7, #0
 80042a8:	d143      	bne.n	8004332 <_malloc_r+0xd6>
 80042aa:	2c00      	cmp	r4, #0
 80042ac:	d04b      	beq.n	8004346 <_malloc_r+0xea>
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	4639      	mov	r1, r7
 80042b2:	4630      	mov	r0, r6
 80042b4:	eb04 0903 	add.w	r9, r4, r3
 80042b8:	f000 fb5c 	bl	8004974 <_sbrk_r>
 80042bc:	4581      	cmp	r9, r0
 80042be:	d142      	bne.n	8004346 <_malloc_r+0xea>
 80042c0:	6821      	ldr	r1, [r4, #0]
 80042c2:	1a6d      	subs	r5, r5, r1
 80042c4:	4629      	mov	r1, r5
 80042c6:	4630      	mov	r0, r6
 80042c8:	f7ff ffa6 	bl	8004218 <sbrk_aligned>
 80042cc:	3001      	adds	r0, #1
 80042ce:	d03a      	beq.n	8004346 <_malloc_r+0xea>
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	442b      	add	r3, r5
 80042d4:	6023      	str	r3, [r4, #0]
 80042d6:	f8d8 3000 	ldr.w	r3, [r8]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	bb62      	cbnz	r2, 8004338 <_malloc_r+0xdc>
 80042de:	f8c8 7000 	str.w	r7, [r8]
 80042e2:	e00f      	b.n	8004304 <_malloc_r+0xa8>
 80042e4:	6822      	ldr	r2, [r4, #0]
 80042e6:	1b52      	subs	r2, r2, r5
 80042e8:	d420      	bmi.n	800432c <_malloc_r+0xd0>
 80042ea:	2a0b      	cmp	r2, #11
 80042ec:	d917      	bls.n	800431e <_malloc_r+0xc2>
 80042ee:	1961      	adds	r1, r4, r5
 80042f0:	42a3      	cmp	r3, r4
 80042f2:	6025      	str	r5, [r4, #0]
 80042f4:	bf18      	it	ne
 80042f6:	6059      	strne	r1, [r3, #4]
 80042f8:	6863      	ldr	r3, [r4, #4]
 80042fa:	bf08      	it	eq
 80042fc:	f8c8 1000 	streq.w	r1, [r8]
 8004300:	5162      	str	r2, [r4, r5]
 8004302:	604b      	str	r3, [r1, #4]
 8004304:	4630      	mov	r0, r6
 8004306:	f000 f82f 	bl	8004368 <__malloc_unlock>
 800430a:	f104 000b 	add.w	r0, r4, #11
 800430e:	1d23      	adds	r3, r4, #4
 8004310:	f020 0007 	bic.w	r0, r0, #7
 8004314:	1ac2      	subs	r2, r0, r3
 8004316:	bf1c      	itt	ne
 8004318:	1a1b      	subne	r3, r3, r0
 800431a:	50a3      	strne	r3, [r4, r2]
 800431c:	e7af      	b.n	800427e <_malloc_r+0x22>
 800431e:	6862      	ldr	r2, [r4, #4]
 8004320:	42a3      	cmp	r3, r4
 8004322:	bf0c      	ite	eq
 8004324:	f8c8 2000 	streq.w	r2, [r8]
 8004328:	605a      	strne	r2, [r3, #4]
 800432a:	e7eb      	b.n	8004304 <_malloc_r+0xa8>
 800432c:	4623      	mov	r3, r4
 800432e:	6864      	ldr	r4, [r4, #4]
 8004330:	e7ae      	b.n	8004290 <_malloc_r+0x34>
 8004332:	463c      	mov	r4, r7
 8004334:	687f      	ldr	r7, [r7, #4]
 8004336:	e7b6      	b.n	80042a6 <_malloc_r+0x4a>
 8004338:	461a      	mov	r2, r3
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	42a3      	cmp	r3, r4
 800433e:	d1fb      	bne.n	8004338 <_malloc_r+0xdc>
 8004340:	2300      	movs	r3, #0
 8004342:	6053      	str	r3, [r2, #4]
 8004344:	e7de      	b.n	8004304 <_malloc_r+0xa8>
 8004346:	230c      	movs	r3, #12
 8004348:	6033      	str	r3, [r6, #0]
 800434a:	4630      	mov	r0, r6
 800434c:	f000 f80c 	bl	8004368 <__malloc_unlock>
 8004350:	e794      	b.n	800427c <_malloc_r+0x20>
 8004352:	6005      	str	r5, [r0, #0]
 8004354:	e7d6      	b.n	8004304 <_malloc_r+0xa8>
 8004356:	bf00      	nop
 8004358:	200002b0 	.word	0x200002b0

0800435c <__malloc_lock>:
 800435c:	4801      	ldr	r0, [pc, #4]	@ (8004364 <__malloc_lock+0x8>)
 800435e:	f7ff bf0f 	b.w	8004180 <__retarget_lock_acquire_recursive>
 8004362:	bf00      	nop
 8004364:	200002a8 	.word	0x200002a8

08004368 <__malloc_unlock>:
 8004368:	4801      	ldr	r0, [pc, #4]	@ (8004370 <__malloc_unlock+0x8>)
 800436a:	f7ff bf0a 	b.w	8004182 <__retarget_lock_release_recursive>
 800436e:	bf00      	nop
 8004370:	200002a8 	.word	0x200002a8

08004374 <__ssputs_r>:
 8004374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004378:	688e      	ldr	r6, [r1, #8]
 800437a:	461f      	mov	r7, r3
 800437c:	42be      	cmp	r6, r7
 800437e:	680b      	ldr	r3, [r1, #0]
 8004380:	4682      	mov	sl, r0
 8004382:	460c      	mov	r4, r1
 8004384:	4690      	mov	r8, r2
 8004386:	d82d      	bhi.n	80043e4 <__ssputs_r+0x70>
 8004388:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800438c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004390:	d026      	beq.n	80043e0 <__ssputs_r+0x6c>
 8004392:	6965      	ldr	r5, [r4, #20]
 8004394:	6909      	ldr	r1, [r1, #16]
 8004396:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800439a:	eba3 0901 	sub.w	r9, r3, r1
 800439e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043a2:	1c7b      	adds	r3, r7, #1
 80043a4:	444b      	add	r3, r9
 80043a6:	106d      	asrs	r5, r5, #1
 80043a8:	429d      	cmp	r5, r3
 80043aa:	bf38      	it	cc
 80043ac:	461d      	movcc	r5, r3
 80043ae:	0553      	lsls	r3, r2, #21
 80043b0:	d527      	bpl.n	8004402 <__ssputs_r+0x8e>
 80043b2:	4629      	mov	r1, r5
 80043b4:	f7ff ff52 	bl	800425c <_malloc_r>
 80043b8:	4606      	mov	r6, r0
 80043ba:	b360      	cbz	r0, 8004416 <__ssputs_r+0xa2>
 80043bc:	6921      	ldr	r1, [r4, #16]
 80043be:	464a      	mov	r2, r9
 80043c0:	f000 fae8 	bl	8004994 <memcpy>
 80043c4:	89a3      	ldrh	r3, [r4, #12]
 80043c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80043ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043ce:	81a3      	strh	r3, [r4, #12]
 80043d0:	6126      	str	r6, [r4, #16]
 80043d2:	6165      	str	r5, [r4, #20]
 80043d4:	444e      	add	r6, r9
 80043d6:	eba5 0509 	sub.w	r5, r5, r9
 80043da:	6026      	str	r6, [r4, #0]
 80043dc:	60a5      	str	r5, [r4, #8]
 80043de:	463e      	mov	r6, r7
 80043e0:	42be      	cmp	r6, r7
 80043e2:	d900      	bls.n	80043e6 <__ssputs_r+0x72>
 80043e4:	463e      	mov	r6, r7
 80043e6:	6820      	ldr	r0, [r4, #0]
 80043e8:	4632      	mov	r2, r6
 80043ea:	4641      	mov	r1, r8
 80043ec:	f000 faa8 	bl	8004940 <memmove>
 80043f0:	68a3      	ldr	r3, [r4, #8]
 80043f2:	1b9b      	subs	r3, r3, r6
 80043f4:	60a3      	str	r3, [r4, #8]
 80043f6:	6823      	ldr	r3, [r4, #0]
 80043f8:	4433      	add	r3, r6
 80043fa:	6023      	str	r3, [r4, #0]
 80043fc:	2000      	movs	r0, #0
 80043fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004402:	462a      	mov	r2, r5
 8004404:	f000 fad4 	bl	80049b0 <_realloc_r>
 8004408:	4606      	mov	r6, r0
 800440a:	2800      	cmp	r0, #0
 800440c:	d1e0      	bne.n	80043d0 <__ssputs_r+0x5c>
 800440e:	6921      	ldr	r1, [r4, #16]
 8004410:	4650      	mov	r0, sl
 8004412:	f7ff feb7 	bl	8004184 <_free_r>
 8004416:	230c      	movs	r3, #12
 8004418:	f8ca 3000 	str.w	r3, [sl]
 800441c:	89a3      	ldrh	r3, [r4, #12]
 800441e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004422:	81a3      	strh	r3, [r4, #12]
 8004424:	f04f 30ff 	mov.w	r0, #4294967295
 8004428:	e7e9      	b.n	80043fe <__ssputs_r+0x8a>
	...

0800442c <_svfiprintf_r>:
 800442c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004430:	4698      	mov	r8, r3
 8004432:	898b      	ldrh	r3, [r1, #12]
 8004434:	061b      	lsls	r3, r3, #24
 8004436:	b09d      	sub	sp, #116	@ 0x74
 8004438:	4607      	mov	r7, r0
 800443a:	460d      	mov	r5, r1
 800443c:	4614      	mov	r4, r2
 800443e:	d510      	bpl.n	8004462 <_svfiprintf_r+0x36>
 8004440:	690b      	ldr	r3, [r1, #16]
 8004442:	b973      	cbnz	r3, 8004462 <_svfiprintf_r+0x36>
 8004444:	2140      	movs	r1, #64	@ 0x40
 8004446:	f7ff ff09 	bl	800425c <_malloc_r>
 800444a:	6028      	str	r0, [r5, #0]
 800444c:	6128      	str	r0, [r5, #16]
 800444e:	b930      	cbnz	r0, 800445e <_svfiprintf_r+0x32>
 8004450:	230c      	movs	r3, #12
 8004452:	603b      	str	r3, [r7, #0]
 8004454:	f04f 30ff 	mov.w	r0, #4294967295
 8004458:	b01d      	add	sp, #116	@ 0x74
 800445a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800445e:	2340      	movs	r3, #64	@ 0x40
 8004460:	616b      	str	r3, [r5, #20]
 8004462:	2300      	movs	r3, #0
 8004464:	9309      	str	r3, [sp, #36]	@ 0x24
 8004466:	2320      	movs	r3, #32
 8004468:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800446c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004470:	2330      	movs	r3, #48	@ 0x30
 8004472:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004610 <_svfiprintf_r+0x1e4>
 8004476:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800447a:	f04f 0901 	mov.w	r9, #1
 800447e:	4623      	mov	r3, r4
 8004480:	469a      	mov	sl, r3
 8004482:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004486:	b10a      	cbz	r2, 800448c <_svfiprintf_r+0x60>
 8004488:	2a25      	cmp	r2, #37	@ 0x25
 800448a:	d1f9      	bne.n	8004480 <_svfiprintf_r+0x54>
 800448c:	ebba 0b04 	subs.w	fp, sl, r4
 8004490:	d00b      	beq.n	80044aa <_svfiprintf_r+0x7e>
 8004492:	465b      	mov	r3, fp
 8004494:	4622      	mov	r2, r4
 8004496:	4629      	mov	r1, r5
 8004498:	4638      	mov	r0, r7
 800449a:	f7ff ff6b 	bl	8004374 <__ssputs_r>
 800449e:	3001      	adds	r0, #1
 80044a0:	f000 80a7 	beq.w	80045f2 <_svfiprintf_r+0x1c6>
 80044a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80044a6:	445a      	add	r2, fp
 80044a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80044aa:	f89a 3000 	ldrb.w	r3, [sl]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 809f 	beq.w	80045f2 <_svfiprintf_r+0x1c6>
 80044b4:	2300      	movs	r3, #0
 80044b6:	f04f 32ff 	mov.w	r2, #4294967295
 80044ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044be:	f10a 0a01 	add.w	sl, sl, #1
 80044c2:	9304      	str	r3, [sp, #16]
 80044c4:	9307      	str	r3, [sp, #28]
 80044c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80044ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80044cc:	4654      	mov	r4, sl
 80044ce:	2205      	movs	r2, #5
 80044d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044d4:	484e      	ldr	r0, [pc, #312]	@ (8004610 <_svfiprintf_r+0x1e4>)
 80044d6:	f7fb fe8b 	bl	80001f0 <memchr>
 80044da:	9a04      	ldr	r2, [sp, #16]
 80044dc:	b9d8      	cbnz	r0, 8004516 <_svfiprintf_r+0xea>
 80044de:	06d0      	lsls	r0, r2, #27
 80044e0:	bf44      	itt	mi
 80044e2:	2320      	movmi	r3, #32
 80044e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044e8:	0711      	lsls	r1, r2, #28
 80044ea:	bf44      	itt	mi
 80044ec:	232b      	movmi	r3, #43	@ 0x2b
 80044ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044f2:	f89a 3000 	ldrb.w	r3, [sl]
 80044f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80044f8:	d015      	beq.n	8004526 <_svfiprintf_r+0xfa>
 80044fa:	9a07      	ldr	r2, [sp, #28]
 80044fc:	4654      	mov	r4, sl
 80044fe:	2000      	movs	r0, #0
 8004500:	f04f 0c0a 	mov.w	ip, #10
 8004504:	4621      	mov	r1, r4
 8004506:	f811 3b01 	ldrb.w	r3, [r1], #1
 800450a:	3b30      	subs	r3, #48	@ 0x30
 800450c:	2b09      	cmp	r3, #9
 800450e:	d94b      	bls.n	80045a8 <_svfiprintf_r+0x17c>
 8004510:	b1b0      	cbz	r0, 8004540 <_svfiprintf_r+0x114>
 8004512:	9207      	str	r2, [sp, #28]
 8004514:	e014      	b.n	8004540 <_svfiprintf_r+0x114>
 8004516:	eba0 0308 	sub.w	r3, r0, r8
 800451a:	fa09 f303 	lsl.w	r3, r9, r3
 800451e:	4313      	orrs	r3, r2
 8004520:	9304      	str	r3, [sp, #16]
 8004522:	46a2      	mov	sl, r4
 8004524:	e7d2      	b.n	80044cc <_svfiprintf_r+0xa0>
 8004526:	9b03      	ldr	r3, [sp, #12]
 8004528:	1d19      	adds	r1, r3, #4
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	9103      	str	r1, [sp, #12]
 800452e:	2b00      	cmp	r3, #0
 8004530:	bfbb      	ittet	lt
 8004532:	425b      	neglt	r3, r3
 8004534:	f042 0202 	orrlt.w	r2, r2, #2
 8004538:	9307      	strge	r3, [sp, #28]
 800453a:	9307      	strlt	r3, [sp, #28]
 800453c:	bfb8      	it	lt
 800453e:	9204      	strlt	r2, [sp, #16]
 8004540:	7823      	ldrb	r3, [r4, #0]
 8004542:	2b2e      	cmp	r3, #46	@ 0x2e
 8004544:	d10a      	bne.n	800455c <_svfiprintf_r+0x130>
 8004546:	7863      	ldrb	r3, [r4, #1]
 8004548:	2b2a      	cmp	r3, #42	@ 0x2a
 800454a:	d132      	bne.n	80045b2 <_svfiprintf_r+0x186>
 800454c:	9b03      	ldr	r3, [sp, #12]
 800454e:	1d1a      	adds	r2, r3, #4
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	9203      	str	r2, [sp, #12]
 8004554:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004558:	3402      	adds	r4, #2
 800455a:	9305      	str	r3, [sp, #20]
 800455c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004620 <_svfiprintf_r+0x1f4>
 8004560:	7821      	ldrb	r1, [r4, #0]
 8004562:	2203      	movs	r2, #3
 8004564:	4650      	mov	r0, sl
 8004566:	f7fb fe43 	bl	80001f0 <memchr>
 800456a:	b138      	cbz	r0, 800457c <_svfiprintf_r+0x150>
 800456c:	9b04      	ldr	r3, [sp, #16]
 800456e:	eba0 000a 	sub.w	r0, r0, sl
 8004572:	2240      	movs	r2, #64	@ 0x40
 8004574:	4082      	lsls	r2, r0
 8004576:	4313      	orrs	r3, r2
 8004578:	3401      	adds	r4, #1
 800457a:	9304      	str	r3, [sp, #16]
 800457c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004580:	4824      	ldr	r0, [pc, #144]	@ (8004614 <_svfiprintf_r+0x1e8>)
 8004582:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004586:	2206      	movs	r2, #6
 8004588:	f7fb fe32 	bl	80001f0 <memchr>
 800458c:	2800      	cmp	r0, #0
 800458e:	d036      	beq.n	80045fe <_svfiprintf_r+0x1d2>
 8004590:	4b21      	ldr	r3, [pc, #132]	@ (8004618 <_svfiprintf_r+0x1ec>)
 8004592:	bb1b      	cbnz	r3, 80045dc <_svfiprintf_r+0x1b0>
 8004594:	9b03      	ldr	r3, [sp, #12]
 8004596:	3307      	adds	r3, #7
 8004598:	f023 0307 	bic.w	r3, r3, #7
 800459c:	3308      	adds	r3, #8
 800459e:	9303      	str	r3, [sp, #12]
 80045a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045a2:	4433      	add	r3, r6
 80045a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80045a6:	e76a      	b.n	800447e <_svfiprintf_r+0x52>
 80045a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80045ac:	460c      	mov	r4, r1
 80045ae:	2001      	movs	r0, #1
 80045b0:	e7a8      	b.n	8004504 <_svfiprintf_r+0xd8>
 80045b2:	2300      	movs	r3, #0
 80045b4:	3401      	adds	r4, #1
 80045b6:	9305      	str	r3, [sp, #20]
 80045b8:	4619      	mov	r1, r3
 80045ba:	f04f 0c0a 	mov.w	ip, #10
 80045be:	4620      	mov	r0, r4
 80045c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045c4:	3a30      	subs	r2, #48	@ 0x30
 80045c6:	2a09      	cmp	r2, #9
 80045c8:	d903      	bls.n	80045d2 <_svfiprintf_r+0x1a6>
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0c6      	beq.n	800455c <_svfiprintf_r+0x130>
 80045ce:	9105      	str	r1, [sp, #20]
 80045d0:	e7c4      	b.n	800455c <_svfiprintf_r+0x130>
 80045d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80045d6:	4604      	mov	r4, r0
 80045d8:	2301      	movs	r3, #1
 80045da:	e7f0      	b.n	80045be <_svfiprintf_r+0x192>
 80045dc:	ab03      	add	r3, sp, #12
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	462a      	mov	r2, r5
 80045e2:	4b0e      	ldr	r3, [pc, #56]	@ (800461c <_svfiprintf_r+0x1f0>)
 80045e4:	a904      	add	r1, sp, #16
 80045e6:	4638      	mov	r0, r7
 80045e8:	f3af 8000 	nop.w
 80045ec:	1c42      	adds	r2, r0, #1
 80045ee:	4606      	mov	r6, r0
 80045f0:	d1d6      	bne.n	80045a0 <_svfiprintf_r+0x174>
 80045f2:	89ab      	ldrh	r3, [r5, #12]
 80045f4:	065b      	lsls	r3, r3, #25
 80045f6:	f53f af2d 	bmi.w	8004454 <_svfiprintf_r+0x28>
 80045fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80045fc:	e72c      	b.n	8004458 <_svfiprintf_r+0x2c>
 80045fe:	ab03      	add	r3, sp, #12
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	462a      	mov	r2, r5
 8004604:	4b05      	ldr	r3, [pc, #20]	@ (800461c <_svfiprintf_r+0x1f0>)
 8004606:	a904      	add	r1, sp, #16
 8004608:	4638      	mov	r0, r7
 800460a:	f000 f879 	bl	8004700 <_printf_i>
 800460e:	e7ed      	b.n	80045ec <_svfiprintf_r+0x1c0>
 8004610:	08004a7c 	.word	0x08004a7c
 8004614:	08004a86 	.word	0x08004a86
 8004618:	00000000 	.word	0x00000000
 800461c:	08004375 	.word	0x08004375
 8004620:	08004a82 	.word	0x08004a82

08004624 <_printf_common>:
 8004624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004628:	4616      	mov	r6, r2
 800462a:	4698      	mov	r8, r3
 800462c:	688a      	ldr	r2, [r1, #8]
 800462e:	690b      	ldr	r3, [r1, #16]
 8004630:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004634:	4293      	cmp	r3, r2
 8004636:	bfb8      	it	lt
 8004638:	4613      	movlt	r3, r2
 800463a:	6033      	str	r3, [r6, #0]
 800463c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004640:	4607      	mov	r7, r0
 8004642:	460c      	mov	r4, r1
 8004644:	b10a      	cbz	r2, 800464a <_printf_common+0x26>
 8004646:	3301      	adds	r3, #1
 8004648:	6033      	str	r3, [r6, #0]
 800464a:	6823      	ldr	r3, [r4, #0]
 800464c:	0699      	lsls	r1, r3, #26
 800464e:	bf42      	ittt	mi
 8004650:	6833      	ldrmi	r3, [r6, #0]
 8004652:	3302      	addmi	r3, #2
 8004654:	6033      	strmi	r3, [r6, #0]
 8004656:	6825      	ldr	r5, [r4, #0]
 8004658:	f015 0506 	ands.w	r5, r5, #6
 800465c:	d106      	bne.n	800466c <_printf_common+0x48>
 800465e:	f104 0a19 	add.w	sl, r4, #25
 8004662:	68e3      	ldr	r3, [r4, #12]
 8004664:	6832      	ldr	r2, [r6, #0]
 8004666:	1a9b      	subs	r3, r3, r2
 8004668:	42ab      	cmp	r3, r5
 800466a:	dc26      	bgt.n	80046ba <_printf_common+0x96>
 800466c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004670:	6822      	ldr	r2, [r4, #0]
 8004672:	3b00      	subs	r3, #0
 8004674:	bf18      	it	ne
 8004676:	2301      	movne	r3, #1
 8004678:	0692      	lsls	r2, r2, #26
 800467a:	d42b      	bmi.n	80046d4 <_printf_common+0xb0>
 800467c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004680:	4641      	mov	r1, r8
 8004682:	4638      	mov	r0, r7
 8004684:	47c8      	blx	r9
 8004686:	3001      	adds	r0, #1
 8004688:	d01e      	beq.n	80046c8 <_printf_common+0xa4>
 800468a:	6823      	ldr	r3, [r4, #0]
 800468c:	6922      	ldr	r2, [r4, #16]
 800468e:	f003 0306 	and.w	r3, r3, #6
 8004692:	2b04      	cmp	r3, #4
 8004694:	bf02      	ittt	eq
 8004696:	68e5      	ldreq	r5, [r4, #12]
 8004698:	6833      	ldreq	r3, [r6, #0]
 800469a:	1aed      	subeq	r5, r5, r3
 800469c:	68a3      	ldr	r3, [r4, #8]
 800469e:	bf0c      	ite	eq
 80046a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046a4:	2500      	movne	r5, #0
 80046a6:	4293      	cmp	r3, r2
 80046a8:	bfc4      	itt	gt
 80046aa:	1a9b      	subgt	r3, r3, r2
 80046ac:	18ed      	addgt	r5, r5, r3
 80046ae:	2600      	movs	r6, #0
 80046b0:	341a      	adds	r4, #26
 80046b2:	42b5      	cmp	r5, r6
 80046b4:	d11a      	bne.n	80046ec <_printf_common+0xc8>
 80046b6:	2000      	movs	r0, #0
 80046b8:	e008      	b.n	80046cc <_printf_common+0xa8>
 80046ba:	2301      	movs	r3, #1
 80046bc:	4652      	mov	r2, sl
 80046be:	4641      	mov	r1, r8
 80046c0:	4638      	mov	r0, r7
 80046c2:	47c8      	blx	r9
 80046c4:	3001      	adds	r0, #1
 80046c6:	d103      	bne.n	80046d0 <_printf_common+0xac>
 80046c8:	f04f 30ff 	mov.w	r0, #4294967295
 80046cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046d0:	3501      	adds	r5, #1
 80046d2:	e7c6      	b.n	8004662 <_printf_common+0x3e>
 80046d4:	18e1      	adds	r1, r4, r3
 80046d6:	1c5a      	adds	r2, r3, #1
 80046d8:	2030      	movs	r0, #48	@ 0x30
 80046da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80046de:	4422      	add	r2, r4
 80046e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80046e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80046e8:	3302      	adds	r3, #2
 80046ea:	e7c7      	b.n	800467c <_printf_common+0x58>
 80046ec:	2301      	movs	r3, #1
 80046ee:	4622      	mov	r2, r4
 80046f0:	4641      	mov	r1, r8
 80046f2:	4638      	mov	r0, r7
 80046f4:	47c8      	blx	r9
 80046f6:	3001      	adds	r0, #1
 80046f8:	d0e6      	beq.n	80046c8 <_printf_common+0xa4>
 80046fa:	3601      	adds	r6, #1
 80046fc:	e7d9      	b.n	80046b2 <_printf_common+0x8e>
	...

08004700 <_printf_i>:
 8004700:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004704:	7e0f      	ldrb	r7, [r1, #24]
 8004706:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004708:	2f78      	cmp	r7, #120	@ 0x78
 800470a:	4691      	mov	r9, r2
 800470c:	4680      	mov	r8, r0
 800470e:	460c      	mov	r4, r1
 8004710:	469a      	mov	sl, r3
 8004712:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004716:	d807      	bhi.n	8004728 <_printf_i+0x28>
 8004718:	2f62      	cmp	r7, #98	@ 0x62
 800471a:	d80a      	bhi.n	8004732 <_printf_i+0x32>
 800471c:	2f00      	cmp	r7, #0
 800471e:	f000 80d2 	beq.w	80048c6 <_printf_i+0x1c6>
 8004722:	2f58      	cmp	r7, #88	@ 0x58
 8004724:	f000 80b9 	beq.w	800489a <_printf_i+0x19a>
 8004728:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800472c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004730:	e03a      	b.n	80047a8 <_printf_i+0xa8>
 8004732:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004736:	2b15      	cmp	r3, #21
 8004738:	d8f6      	bhi.n	8004728 <_printf_i+0x28>
 800473a:	a101      	add	r1, pc, #4	@ (adr r1, 8004740 <_printf_i+0x40>)
 800473c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004740:	08004799 	.word	0x08004799
 8004744:	080047ad 	.word	0x080047ad
 8004748:	08004729 	.word	0x08004729
 800474c:	08004729 	.word	0x08004729
 8004750:	08004729 	.word	0x08004729
 8004754:	08004729 	.word	0x08004729
 8004758:	080047ad 	.word	0x080047ad
 800475c:	08004729 	.word	0x08004729
 8004760:	08004729 	.word	0x08004729
 8004764:	08004729 	.word	0x08004729
 8004768:	08004729 	.word	0x08004729
 800476c:	080048ad 	.word	0x080048ad
 8004770:	080047d7 	.word	0x080047d7
 8004774:	08004867 	.word	0x08004867
 8004778:	08004729 	.word	0x08004729
 800477c:	08004729 	.word	0x08004729
 8004780:	080048cf 	.word	0x080048cf
 8004784:	08004729 	.word	0x08004729
 8004788:	080047d7 	.word	0x080047d7
 800478c:	08004729 	.word	0x08004729
 8004790:	08004729 	.word	0x08004729
 8004794:	0800486f 	.word	0x0800486f
 8004798:	6833      	ldr	r3, [r6, #0]
 800479a:	1d1a      	adds	r2, r3, #4
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6032      	str	r2, [r6, #0]
 80047a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80047a8:	2301      	movs	r3, #1
 80047aa:	e09d      	b.n	80048e8 <_printf_i+0x1e8>
 80047ac:	6833      	ldr	r3, [r6, #0]
 80047ae:	6820      	ldr	r0, [r4, #0]
 80047b0:	1d19      	adds	r1, r3, #4
 80047b2:	6031      	str	r1, [r6, #0]
 80047b4:	0606      	lsls	r6, r0, #24
 80047b6:	d501      	bpl.n	80047bc <_printf_i+0xbc>
 80047b8:	681d      	ldr	r5, [r3, #0]
 80047ba:	e003      	b.n	80047c4 <_printf_i+0xc4>
 80047bc:	0645      	lsls	r5, r0, #25
 80047be:	d5fb      	bpl.n	80047b8 <_printf_i+0xb8>
 80047c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80047c4:	2d00      	cmp	r5, #0
 80047c6:	da03      	bge.n	80047d0 <_printf_i+0xd0>
 80047c8:	232d      	movs	r3, #45	@ 0x2d
 80047ca:	426d      	negs	r5, r5
 80047cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047d0:	4859      	ldr	r0, [pc, #356]	@ (8004938 <_printf_i+0x238>)
 80047d2:	230a      	movs	r3, #10
 80047d4:	e011      	b.n	80047fa <_printf_i+0xfa>
 80047d6:	6821      	ldr	r1, [r4, #0]
 80047d8:	6833      	ldr	r3, [r6, #0]
 80047da:	0608      	lsls	r0, r1, #24
 80047dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80047e0:	d402      	bmi.n	80047e8 <_printf_i+0xe8>
 80047e2:	0649      	lsls	r1, r1, #25
 80047e4:	bf48      	it	mi
 80047e6:	b2ad      	uxthmi	r5, r5
 80047e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80047ea:	4853      	ldr	r0, [pc, #332]	@ (8004938 <_printf_i+0x238>)
 80047ec:	6033      	str	r3, [r6, #0]
 80047ee:	bf14      	ite	ne
 80047f0:	230a      	movne	r3, #10
 80047f2:	2308      	moveq	r3, #8
 80047f4:	2100      	movs	r1, #0
 80047f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80047fa:	6866      	ldr	r6, [r4, #4]
 80047fc:	60a6      	str	r6, [r4, #8]
 80047fe:	2e00      	cmp	r6, #0
 8004800:	bfa2      	ittt	ge
 8004802:	6821      	ldrge	r1, [r4, #0]
 8004804:	f021 0104 	bicge.w	r1, r1, #4
 8004808:	6021      	strge	r1, [r4, #0]
 800480a:	b90d      	cbnz	r5, 8004810 <_printf_i+0x110>
 800480c:	2e00      	cmp	r6, #0
 800480e:	d04b      	beq.n	80048a8 <_printf_i+0x1a8>
 8004810:	4616      	mov	r6, r2
 8004812:	fbb5 f1f3 	udiv	r1, r5, r3
 8004816:	fb03 5711 	mls	r7, r3, r1, r5
 800481a:	5dc7      	ldrb	r7, [r0, r7]
 800481c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004820:	462f      	mov	r7, r5
 8004822:	42bb      	cmp	r3, r7
 8004824:	460d      	mov	r5, r1
 8004826:	d9f4      	bls.n	8004812 <_printf_i+0x112>
 8004828:	2b08      	cmp	r3, #8
 800482a:	d10b      	bne.n	8004844 <_printf_i+0x144>
 800482c:	6823      	ldr	r3, [r4, #0]
 800482e:	07df      	lsls	r7, r3, #31
 8004830:	d508      	bpl.n	8004844 <_printf_i+0x144>
 8004832:	6923      	ldr	r3, [r4, #16]
 8004834:	6861      	ldr	r1, [r4, #4]
 8004836:	4299      	cmp	r1, r3
 8004838:	bfde      	ittt	le
 800483a:	2330      	movle	r3, #48	@ 0x30
 800483c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004840:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004844:	1b92      	subs	r2, r2, r6
 8004846:	6122      	str	r2, [r4, #16]
 8004848:	f8cd a000 	str.w	sl, [sp]
 800484c:	464b      	mov	r3, r9
 800484e:	aa03      	add	r2, sp, #12
 8004850:	4621      	mov	r1, r4
 8004852:	4640      	mov	r0, r8
 8004854:	f7ff fee6 	bl	8004624 <_printf_common>
 8004858:	3001      	adds	r0, #1
 800485a:	d14a      	bne.n	80048f2 <_printf_i+0x1f2>
 800485c:	f04f 30ff 	mov.w	r0, #4294967295
 8004860:	b004      	add	sp, #16
 8004862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	f043 0320 	orr.w	r3, r3, #32
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	4833      	ldr	r0, [pc, #204]	@ (800493c <_printf_i+0x23c>)
 8004870:	2778      	movs	r7, #120	@ 0x78
 8004872:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	6831      	ldr	r1, [r6, #0]
 800487a:	061f      	lsls	r7, r3, #24
 800487c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004880:	d402      	bmi.n	8004888 <_printf_i+0x188>
 8004882:	065f      	lsls	r7, r3, #25
 8004884:	bf48      	it	mi
 8004886:	b2ad      	uxthmi	r5, r5
 8004888:	6031      	str	r1, [r6, #0]
 800488a:	07d9      	lsls	r1, r3, #31
 800488c:	bf44      	itt	mi
 800488e:	f043 0320 	orrmi.w	r3, r3, #32
 8004892:	6023      	strmi	r3, [r4, #0]
 8004894:	b11d      	cbz	r5, 800489e <_printf_i+0x19e>
 8004896:	2310      	movs	r3, #16
 8004898:	e7ac      	b.n	80047f4 <_printf_i+0xf4>
 800489a:	4827      	ldr	r0, [pc, #156]	@ (8004938 <_printf_i+0x238>)
 800489c:	e7e9      	b.n	8004872 <_printf_i+0x172>
 800489e:	6823      	ldr	r3, [r4, #0]
 80048a0:	f023 0320 	bic.w	r3, r3, #32
 80048a4:	6023      	str	r3, [r4, #0]
 80048a6:	e7f6      	b.n	8004896 <_printf_i+0x196>
 80048a8:	4616      	mov	r6, r2
 80048aa:	e7bd      	b.n	8004828 <_printf_i+0x128>
 80048ac:	6833      	ldr	r3, [r6, #0]
 80048ae:	6825      	ldr	r5, [r4, #0]
 80048b0:	6961      	ldr	r1, [r4, #20]
 80048b2:	1d18      	adds	r0, r3, #4
 80048b4:	6030      	str	r0, [r6, #0]
 80048b6:	062e      	lsls	r6, r5, #24
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	d501      	bpl.n	80048c0 <_printf_i+0x1c0>
 80048bc:	6019      	str	r1, [r3, #0]
 80048be:	e002      	b.n	80048c6 <_printf_i+0x1c6>
 80048c0:	0668      	lsls	r0, r5, #25
 80048c2:	d5fb      	bpl.n	80048bc <_printf_i+0x1bc>
 80048c4:	8019      	strh	r1, [r3, #0]
 80048c6:	2300      	movs	r3, #0
 80048c8:	6123      	str	r3, [r4, #16]
 80048ca:	4616      	mov	r6, r2
 80048cc:	e7bc      	b.n	8004848 <_printf_i+0x148>
 80048ce:	6833      	ldr	r3, [r6, #0]
 80048d0:	1d1a      	adds	r2, r3, #4
 80048d2:	6032      	str	r2, [r6, #0]
 80048d4:	681e      	ldr	r6, [r3, #0]
 80048d6:	6862      	ldr	r2, [r4, #4]
 80048d8:	2100      	movs	r1, #0
 80048da:	4630      	mov	r0, r6
 80048dc:	f7fb fc88 	bl	80001f0 <memchr>
 80048e0:	b108      	cbz	r0, 80048e6 <_printf_i+0x1e6>
 80048e2:	1b80      	subs	r0, r0, r6
 80048e4:	6060      	str	r0, [r4, #4]
 80048e6:	6863      	ldr	r3, [r4, #4]
 80048e8:	6123      	str	r3, [r4, #16]
 80048ea:	2300      	movs	r3, #0
 80048ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048f0:	e7aa      	b.n	8004848 <_printf_i+0x148>
 80048f2:	6923      	ldr	r3, [r4, #16]
 80048f4:	4632      	mov	r2, r6
 80048f6:	4649      	mov	r1, r9
 80048f8:	4640      	mov	r0, r8
 80048fa:	47d0      	blx	sl
 80048fc:	3001      	adds	r0, #1
 80048fe:	d0ad      	beq.n	800485c <_printf_i+0x15c>
 8004900:	6823      	ldr	r3, [r4, #0]
 8004902:	079b      	lsls	r3, r3, #30
 8004904:	d413      	bmi.n	800492e <_printf_i+0x22e>
 8004906:	68e0      	ldr	r0, [r4, #12]
 8004908:	9b03      	ldr	r3, [sp, #12]
 800490a:	4298      	cmp	r0, r3
 800490c:	bfb8      	it	lt
 800490e:	4618      	movlt	r0, r3
 8004910:	e7a6      	b.n	8004860 <_printf_i+0x160>
 8004912:	2301      	movs	r3, #1
 8004914:	4632      	mov	r2, r6
 8004916:	4649      	mov	r1, r9
 8004918:	4640      	mov	r0, r8
 800491a:	47d0      	blx	sl
 800491c:	3001      	adds	r0, #1
 800491e:	d09d      	beq.n	800485c <_printf_i+0x15c>
 8004920:	3501      	adds	r5, #1
 8004922:	68e3      	ldr	r3, [r4, #12]
 8004924:	9903      	ldr	r1, [sp, #12]
 8004926:	1a5b      	subs	r3, r3, r1
 8004928:	42ab      	cmp	r3, r5
 800492a:	dcf2      	bgt.n	8004912 <_printf_i+0x212>
 800492c:	e7eb      	b.n	8004906 <_printf_i+0x206>
 800492e:	2500      	movs	r5, #0
 8004930:	f104 0619 	add.w	r6, r4, #25
 8004934:	e7f5      	b.n	8004922 <_printf_i+0x222>
 8004936:	bf00      	nop
 8004938:	08004a8d 	.word	0x08004a8d
 800493c:	08004a9e 	.word	0x08004a9e

08004940 <memmove>:
 8004940:	4288      	cmp	r0, r1
 8004942:	b510      	push	{r4, lr}
 8004944:	eb01 0402 	add.w	r4, r1, r2
 8004948:	d902      	bls.n	8004950 <memmove+0x10>
 800494a:	4284      	cmp	r4, r0
 800494c:	4623      	mov	r3, r4
 800494e:	d807      	bhi.n	8004960 <memmove+0x20>
 8004950:	1e43      	subs	r3, r0, #1
 8004952:	42a1      	cmp	r1, r4
 8004954:	d008      	beq.n	8004968 <memmove+0x28>
 8004956:	f811 2b01 	ldrb.w	r2, [r1], #1
 800495a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800495e:	e7f8      	b.n	8004952 <memmove+0x12>
 8004960:	4402      	add	r2, r0
 8004962:	4601      	mov	r1, r0
 8004964:	428a      	cmp	r2, r1
 8004966:	d100      	bne.n	800496a <memmove+0x2a>
 8004968:	bd10      	pop	{r4, pc}
 800496a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800496e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004972:	e7f7      	b.n	8004964 <memmove+0x24>

08004974 <_sbrk_r>:
 8004974:	b538      	push	{r3, r4, r5, lr}
 8004976:	4d06      	ldr	r5, [pc, #24]	@ (8004990 <_sbrk_r+0x1c>)
 8004978:	2300      	movs	r3, #0
 800497a:	4604      	mov	r4, r0
 800497c:	4608      	mov	r0, r1
 800497e:	602b      	str	r3, [r5, #0]
 8004980:	f7fb fefa 	bl	8000778 <_sbrk>
 8004984:	1c43      	adds	r3, r0, #1
 8004986:	d102      	bne.n	800498e <_sbrk_r+0x1a>
 8004988:	682b      	ldr	r3, [r5, #0]
 800498a:	b103      	cbz	r3, 800498e <_sbrk_r+0x1a>
 800498c:	6023      	str	r3, [r4, #0]
 800498e:	bd38      	pop	{r3, r4, r5, pc}
 8004990:	200002a4 	.word	0x200002a4

08004994 <memcpy>:
 8004994:	440a      	add	r2, r1
 8004996:	4291      	cmp	r1, r2
 8004998:	f100 33ff 	add.w	r3, r0, #4294967295
 800499c:	d100      	bne.n	80049a0 <memcpy+0xc>
 800499e:	4770      	bx	lr
 80049a0:	b510      	push	{r4, lr}
 80049a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049aa:	4291      	cmp	r1, r2
 80049ac:	d1f9      	bne.n	80049a2 <memcpy+0xe>
 80049ae:	bd10      	pop	{r4, pc}

080049b0 <_realloc_r>:
 80049b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049b4:	4680      	mov	r8, r0
 80049b6:	4615      	mov	r5, r2
 80049b8:	460c      	mov	r4, r1
 80049ba:	b921      	cbnz	r1, 80049c6 <_realloc_r+0x16>
 80049bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049c0:	4611      	mov	r1, r2
 80049c2:	f7ff bc4b 	b.w	800425c <_malloc_r>
 80049c6:	b92a      	cbnz	r2, 80049d4 <_realloc_r+0x24>
 80049c8:	f7ff fbdc 	bl	8004184 <_free_r>
 80049cc:	2400      	movs	r4, #0
 80049ce:	4620      	mov	r0, r4
 80049d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049d4:	f000 f81a 	bl	8004a0c <_malloc_usable_size_r>
 80049d8:	4285      	cmp	r5, r0
 80049da:	4606      	mov	r6, r0
 80049dc:	d802      	bhi.n	80049e4 <_realloc_r+0x34>
 80049de:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80049e2:	d8f4      	bhi.n	80049ce <_realloc_r+0x1e>
 80049e4:	4629      	mov	r1, r5
 80049e6:	4640      	mov	r0, r8
 80049e8:	f7ff fc38 	bl	800425c <_malloc_r>
 80049ec:	4607      	mov	r7, r0
 80049ee:	2800      	cmp	r0, #0
 80049f0:	d0ec      	beq.n	80049cc <_realloc_r+0x1c>
 80049f2:	42b5      	cmp	r5, r6
 80049f4:	462a      	mov	r2, r5
 80049f6:	4621      	mov	r1, r4
 80049f8:	bf28      	it	cs
 80049fa:	4632      	movcs	r2, r6
 80049fc:	f7ff ffca 	bl	8004994 <memcpy>
 8004a00:	4621      	mov	r1, r4
 8004a02:	4640      	mov	r0, r8
 8004a04:	f7ff fbbe 	bl	8004184 <_free_r>
 8004a08:	463c      	mov	r4, r7
 8004a0a:	e7e0      	b.n	80049ce <_realloc_r+0x1e>

08004a0c <_malloc_usable_size_r>:
 8004a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a10:	1f18      	subs	r0, r3, #4
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	bfbc      	itt	lt
 8004a16:	580b      	ldrlt	r3, [r1, r0]
 8004a18:	18c0      	addlt	r0, r0, r3
 8004a1a:	4770      	bx	lr

08004a1c <_init>:
 8004a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1e:	bf00      	nop
 8004a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a22:	bc08      	pop	{r3}
 8004a24:	469e      	mov	lr, r3
 8004a26:	4770      	bx	lr

08004a28 <_fini>:
 8004a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2a:	bf00      	nop
 8004a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a2e:	bc08      	pop	{r3}
 8004a30:	469e      	mov	lr, r3
 8004a32:	4770      	bx	lr
