
Button_V0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038ac  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003a4c  08003a4c  00004a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ac0  08003ac0  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ac0  08003ac0  00004ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ac8  08003ac8  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ac8  08003ac8  00004ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003acc  08003acc  00004acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003ad0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000505c  2**0
                  CONTENTS
 10 .bss          00000200  2000005c  2000005c  0000505c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000025c  2000025c  0000505c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008d93  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001598  00000000  00000000  0000de1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000688  00000000  00000000  0000f3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004fc  00000000  00000000  0000fa40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fafe  00000000  00000000  0000ff3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009f6b  00000000  00000000  0002fa3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c006e  00000000  00000000  000399a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f9a13  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001e64  00000000  00000000  000f9a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  000fb8bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003a34 	.word	0x08003a34

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003a34 	.word	0x08003a34

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fad9 	bl	800083c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f8bb 	bl	8000404 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 f947 	bl	8000520 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000292:	f000 f915 	bl	80004c0 <MX_USART2_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	    switch (ms_counter) {
 8000296:	4b57      	ldr	r3, [pc, #348]	@ (80003f4 <main+0x174>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800029e:	4293      	cmp	r3, r2
 80002a0:	f000 8093 	beq.w	80003ca <main+0x14a>
 80002a4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80002a8:	4293      	cmp	r3, r2
 80002aa:	f200 8092 	bhi.w	80003d2 <main+0x152>
 80002ae:	f242 62b6 	movw	r2, #9910	@ 0x26b6
 80002b2:	4293      	cmp	r3, r2
 80002b4:	f000 8081 	beq.w	80003ba <main+0x13a>
 80002b8:	f242 62b6 	movw	r2, #9910	@ 0x26b6
 80002bc:	4293      	cmp	r3, r2
 80002be:	f200 8088 	bhi.w	80003d2 <main+0x152>
 80002c2:	f242 528a 	movw	r2, #9610	@ 0x258a
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d06f      	beq.n	80003aa <main+0x12a>
 80002ca:	f242 528a 	movw	r2, #9610	@ 0x258a
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d87f      	bhi.n	80003d2 <main+0x152>
 80002d2:	f242 12a2 	movw	r2, #8610	@ 0x21a2
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d05f      	beq.n	800039a <main+0x11a>
 80002da:	f242 12a2 	movw	r2, #8610	@ 0x21a2
 80002de:	4293      	cmp	r3, r2
 80002e0:	d877      	bhi.n	80003d2 <main+0x152>
 80002e2:	f242 0276 	movw	r2, #8310	@ 0x2076
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d04f      	beq.n	800038a <main+0x10a>
 80002ea:	f242 0276 	movw	r2, #8310	@ 0x2076
 80002ee:	4293      	cmp	r3, r2
 80002f0:	d86f      	bhi.n	80003d2 <main+0x152>
 80002f2:	f641 428e 	movw	r2, #7310	@ 0x1c8e
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d03f      	beq.n	800037a <main+0xfa>
 80002fa:	f641 428e 	movw	r2, #7310	@ 0x1c8e
 80002fe:	4293      	cmp	r3, r2
 8000300:	d867      	bhi.n	80003d2 <main+0x152>
 8000302:	f641 3262 	movw	r2, #7010	@ 0x1b62
 8000306:	4293      	cmp	r3, r2
 8000308:	d02f      	beq.n	800036a <main+0xea>
 800030a:	f641 3262 	movw	r2, #7010	@ 0x1b62
 800030e:	4293      	cmp	r3, r2
 8000310:	d85f      	bhi.n	80003d2 <main+0x152>
 8000312:	f240 72da 	movw	r2, #2010	@ 0x7da
 8000316:	4293      	cmp	r3, r2
 8000318:	d01f      	beq.n	800035a <main+0xda>
 800031a:	f240 72da 	movw	r2, #2010	@ 0x7da
 800031e:	4293      	cmp	r3, r2
 8000320:	d857      	bhi.n	80003d2 <main+0x152>
 8000322:	2b00      	cmp	r3, #0
 8000324:	d002      	beq.n	800032c <main+0xac>
 8000326:	2b0a      	cmp	r3, #10
 8000328:	d00f      	beq.n	800034a <main+0xca>
 800032a:	e052      	b.n	80003d2 <main+0x152>
	        case 0:
	            // At time 0, set pin 1 and pin 2 HIGH
	        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800032c:	2201      	movs	r2, #1
 800032e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000332:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000336:	f000 fd57 	bl	8000de8 <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800033a:	2201      	movs	r2, #1
 800033c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000340:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000344:	f000 fd50 	bl	8000de8 <HAL_GPIO_WritePin>
	            break;
 8000348:	e043      	b.n	80003d2 <main+0x152>

	        case 10:
	            // At time 1, pin 1 should go LOW
	        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000350:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000354:	f000 fd48 	bl	8000de8 <HAL_GPIO_WritePin>
	            break;
 8000358:	e03b      	b.n	80003d2 <main+0x152>

	        case 2010:
	            // At time 4, pin 2 should go LOW
	        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000360:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000364:	f000 fd40 	bl	8000de8 <HAL_GPIO_WritePin>
	            break;
 8000368:	e033      	b.n	80003d2 <main+0x152>

	        case 7010:
	            // At time 9, pin 2 should go HIGH
	        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800036a:	2201      	movs	r2, #1
 800036c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000370:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000374:	f000 fd38 	bl	8000de8 <HAL_GPIO_WritePin>
	            break;
 8000378:	e02b      	b.n	80003d2 <main+0x152>

	        case 7310:
	            // At time 12, pin 2 should go LOW
	        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800037a:	2200      	movs	r2, #0
 800037c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000380:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000384:	f000 fd30 	bl	8000de8 <HAL_GPIO_WritePin>
	            break;
 8000388:	e023      	b.n	80003d2 <main+0x152>

	        case 8310:
	            // At time 14, pin 2 should go HIGH
	        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800038a:	2201      	movs	r2, #1
 800038c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000390:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000394:	f000 fd28 	bl	8000de8 <HAL_GPIO_WritePin>
	            break;
 8000398:	e01b      	b.n	80003d2 <main+0x152>

	        case 8610:
	            // At time 17, pin 2 should go LOW
	        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800039a:	2200      	movs	r2, #0
 800039c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003a4:	f000 fd20 	bl	8000de8 <HAL_GPIO_WritePin>
	            break;
 80003a8:	e013      	b.n	80003d2 <main+0x152>

	        case 9610:
	            // At time 22, pin 1 should go HIGH
	        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80003aa:	2201      	movs	r2, #1
 80003ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003b4:	f000 fd18 	bl	8000de8 <HAL_GPIO_WritePin>
	            break;
 80003b8:	e00b      	b.n	80003d2 <main+0x152>

	        case 9910:
	            // At time 25, pin 1 should go LOW
	        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80003ba:	2200      	movs	r2, #0
 80003bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003c4:	f000 fd10 	bl	8000de8 <HAL_GPIO_WritePin>
	            break;
 80003c8:	e003      	b.n	80003d2 <main+0x152>

	        case 10000:
	            // At time 30, the sequence is complete. Turn off the timer.
	            // Set the timer_active flag to false
	            ms_counter = 0;
 80003ca:	4b0a      	ldr	r3, [pc, #40]	@ (80003f4 <main+0x174>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
	            break;
 80003d0:	bf00      	nop
//	            // No action for other times
//	        	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//	            break;
	    }

	    int size = snprintf((char *)str, sizeof(str), "%lu \r\n", ms_counter);
 80003d2:	4b08      	ldr	r3, [pc, #32]	@ (80003f4 <main+0x174>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4a08      	ldr	r2, [pc, #32]	@ (80003f8 <main+0x178>)
 80003d8:	2108      	movs	r1, #8
 80003da:	4808      	ldr	r0, [pc, #32]	@ (80003fc <main+0x17c>)
 80003dc:	f002 fe76 	bl	80030cc <sniprintf>
 80003e0:	6078      	str	r0, [r7, #4]


	    HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	b29a      	uxth	r2, r3
 80003e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003ea:	4904      	ldr	r1, [pc, #16]	@ (80003fc <main+0x17c>)
 80003ec:	4804      	ldr	r0, [pc, #16]	@ (8000400 <main+0x180>)
 80003ee:	f002 f9f3 	bl	80027d8 <HAL_UART_Transmit>
  {
 80003f2:	e750      	b.n	8000296 <main+0x16>
 80003f4:	20000078 	.word	0x20000078
 80003f8:	08003a4c 	.word	0x08003a4c
 80003fc:	20000104 	.word	0x20000104
 8000400:	2000007c 	.word	0x2000007c

08000404 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b0a6      	sub	sp, #152	@ 0x98
 8000408:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800040a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800040e:	2228      	movs	r2, #40	@ 0x28
 8000410:	2100      	movs	r1, #0
 8000412:	4618      	mov	r0, r3
 8000414:	f002 fe8e 	bl	8003134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000418:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800041c:	2200      	movs	r2, #0
 800041e:	601a      	str	r2, [r3, #0]
 8000420:	605a      	str	r2, [r3, #4]
 8000422:	609a      	str	r2, [r3, #8]
 8000424:	60da      	str	r2, [r3, #12]
 8000426:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	2258      	movs	r2, #88	@ 0x58
 800042c:	2100      	movs	r1, #0
 800042e:	4618      	mov	r0, r3
 8000430:	f002 fe80 	bl	8003134 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000434:	2302      	movs	r3, #2
 8000436:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000438:	2301      	movs	r3, #1
 800043a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800043c:	2310      	movs	r3, #16
 800043e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000442:	2302      	movs	r3, #2
 8000444:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000448:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800044c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000450:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000454:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800045e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000462:	4618      	mov	r0, r3
 8000464:	f000 fcd8 	bl	8000e18 <HAL_RCC_OscConfig>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800046e:	f000 f8cf 	bl	8000610 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000472:	230f      	movs	r3, #15
 8000474:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000476:	2302      	movs	r3, #2
 8000478:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800047a:	2300      	movs	r3, #0
 800047c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800047e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000482:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000484:	2300      	movs	r3, #0
 8000486:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000488:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800048c:	2102      	movs	r1, #2
 800048e:	4618      	mov	r0, r3
 8000490:	f001 fd16 	bl	8001ec0 <HAL_RCC_ClockConfig>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800049a:	f000 f8b9 	bl	8000610 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800049e:	2302      	movs	r3, #2
 80004a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004a2:	2300      	movs	r3, #0
 80004a4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	4618      	mov	r0, r3
 80004aa:	f001 ff29 	bl	8002300 <HAL_RCCEx_PeriphCLKConfig>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80004b4:	f000 f8ac 	bl	8000610 <Error_Handler>
  }
}
 80004b8:	bf00      	nop
 80004ba:	3798      	adds	r7, #152	@ 0x98
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}

080004c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004c4:	4b14      	ldr	r3, [pc, #80]	@ (8000518 <MX_USART2_UART_Init+0x58>)
 80004c6:	4a15      	ldr	r2, [pc, #84]	@ (800051c <MX_USART2_UART_Init+0x5c>)
 80004c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004ca:	4b13      	ldr	r3, [pc, #76]	@ (8000518 <MX_USART2_UART_Init+0x58>)
 80004cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004d2:	4b11      	ldr	r3, [pc, #68]	@ (8000518 <MX_USART2_UART_Init+0x58>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000518 <MX_USART2_UART_Init+0x58>)
 80004da:	2200      	movs	r2, #0
 80004dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004de:	4b0e      	ldr	r3, [pc, #56]	@ (8000518 <MX_USART2_UART_Init+0x58>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000518 <MX_USART2_UART_Init+0x58>)
 80004e6:	220c      	movs	r2, #12
 80004e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000518 <MX_USART2_UART_Init+0x58>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004f0:	4b09      	ldr	r3, [pc, #36]	@ (8000518 <MX_USART2_UART_Init+0x58>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004f6:	4b08      	ldr	r3, [pc, #32]	@ (8000518 <MX_USART2_UART_Init+0x58>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004fc:	4b06      	ldr	r3, [pc, #24]	@ (8000518 <MX_USART2_UART_Init+0x58>)
 80004fe:	2200      	movs	r2, #0
 8000500:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000502:	4805      	ldr	r0, [pc, #20]	@ (8000518 <MX_USART2_UART_Init+0x58>)
 8000504:	f002 f91a 	bl	800273c <HAL_UART_Init>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800050e:	f000 f87f 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	2000007c 	.word	0x2000007c
 800051c:	40004400 	.word	0x40004400

08000520 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b08a      	sub	sp, #40	@ 0x28
 8000524:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000526:	f107 0314 	add.w	r3, r7, #20
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]
 8000534:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000536:	4b34      	ldr	r3, [pc, #208]	@ (8000608 <MX_GPIO_Init+0xe8>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	4a33      	ldr	r2, [pc, #204]	@ (8000608 <MX_GPIO_Init+0xe8>)
 800053c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000540:	6153      	str	r3, [r2, #20]
 8000542:	4b31      	ldr	r3, [pc, #196]	@ (8000608 <MX_GPIO_Init+0xe8>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800054a:	613b      	str	r3, [r7, #16]
 800054c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800054e:	4b2e      	ldr	r3, [pc, #184]	@ (8000608 <MX_GPIO_Init+0xe8>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	4a2d      	ldr	r2, [pc, #180]	@ (8000608 <MX_GPIO_Init+0xe8>)
 8000554:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000558:	6153      	str	r3, [r2, #20]
 800055a:	4b2b      	ldr	r3, [pc, #172]	@ (8000608 <MX_GPIO_Init+0xe8>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	4b28      	ldr	r3, [pc, #160]	@ (8000608 <MX_GPIO_Init+0xe8>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	4a27      	ldr	r2, [pc, #156]	@ (8000608 <MX_GPIO_Init+0xe8>)
 800056c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000570:	6153      	str	r3, [r2, #20]
 8000572:	4b25      	ldr	r3, [pc, #148]	@ (8000608 <MX_GPIO_Init+0xe8>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057e:	4b22      	ldr	r3, [pc, #136]	@ (8000608 <MX_GPIO_Init+0xe8>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	4a21      	ldr	r2, [pc, #132]	@ (8000608 <MX_GPIO_Init+0xe8>)
 8000584:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000588:	6153      	str	r3, [r2, #20]
 800058a:	4b1f      	ldr	r3, [pc, #124]	@ (8000608 <MX_GPIO_Init+0xe8>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800059c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005a0:	f000 fc22 	bl	8000de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005aa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	4619      	mov	r1, r3
 80005ba:	4814      	ldr	r0, [pc, #80]	@ (800060c <MX_GPIO_Init+0xec>)
 80005bc:	f000 fa8a 	bl	8000ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005c0:	2320      	movs	r3, #32
 80005c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c4:	2301      	movs	r3, #1
 80005c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005cc:	2300      	movs	r3, #0
 80005ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	4619      	mov	r1, r3
 80005d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005da:	f000 fa7b 	bl	8000ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80005de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80005e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e4:	2301      	movs	r3, #1
 80005e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005e8:	2302      	movs	r3, #2
 80005ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ec:	2300      	movs	r3, #0
 80005ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	4619      	mov	r1, r3
 80005f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005fa:	f000 fa6b 	bl	8000ad4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005fe:	bf00      	nop
 8000600:	3728      	adds	r7, #40	@ 0x28
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40021000 	.word	0x40021000
 800060c:	48000800 	.word	0x48000800

08000610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000614:	b672      	cpsid	i
}
 8000616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <Error_Handler+0x8>

0800061c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000622:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <HAL_MspInit+0x44>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	4a0e      	ldr	r2, [pc, #56]	@ (8000660 <HAL_MspInit+0x44>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6193      	str	r3, [r2, #24]
 800062e:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <HAL_MspInit+0x44>)
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800063a:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <HAL_MspInit+0x44>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	4a08      	ldr	r2, [pc, #32]	@ (8000660 <HAL_MspInit+0x44>)
 8000640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000644:	61d3      	str	r3, [r2, #28]
 8000646:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <HAL_MspInit+0x44>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000652:	2007      	movs	r0, #7
 8000654:	f000 fa0a 	bl	8000a6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40021000 	.word	0x40021000

08000664 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08a      	sub	sp, #40	@ 0x28
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a17      	ldr	r2, [pc, #92]	@ (80006e0 <HAL_UART_MspInit+0x7c>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d128      	bne.n	80006d8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000686:	4b17      	ldr	r3, [pc, #92]	@ (80006e4 <HAL_UART_MspInit+0x80>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	4a16      	ldr	r2, [pc, #88]	@ (80006e4 <HAL_UART_MspInit+0x80>)
 800068c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000690:	61d3      	str	r3, [r2, #28]
 8000692:	4b14      	ldr	r3, [pc, #80]	@ (80006e4 <HAL_UART_MspInit+0x80>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <HAL_UART_MspInit+0x80>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	4a10      	ldr	r2, [pc, #64]	@ (80006e4 <HAL_UART_MspInit+0x80>)
 80006a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006a8:	6153      	str	r3, [r2, #20]
 80006aa:	4b0e      	ldr	r3, [pc, #56]	@ (80006e4 <HAL_UART_MspInit+0x80>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006b6:	230c      	movs	r3, #12
 80006b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ba:	2302      	movs	r3, #2
 80006bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	2300      	movs	r3, #0
 80006c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006c6:	2307      	movs	r3, #7
 80006c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	4619      	mov	r1, r3
 80006d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d4:	f000 f9fe 	bl	8000ad4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80006d8:	bf00      	nop
 80006da:	3728      	adds	r7, #40	@ 0x28
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40004400 	.word	0x40004400
 80006e4:	40021000 	.word	0x40021000

080006e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <NMI_Handler+0x4>

080006f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <HardFault_Handler+0x4>

080006f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <MemManage_Handler+0x4>

08000700 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <BusFault_Handler+0x4>

08000708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <UsageFault_Handler+0x4>

08000710 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
	...

0800073c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000740:	f000 f8c2 	bl	80008c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  ms_counter++;
 8000744:	4b03      	ldr	r3, [pc, #12]	@ (8000754 <SysTick_Handler+0x18>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	3301      	adds	r3, #1
 800074a:	4a02      	ldr	r2, [pc, #8]	@ (8000754 <SysTick_Handler+0x18>)
 800074c:	6013      	str	r3, [r2, #0]

  /* USER CODE END SysTick_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000078 	.word	0x20000078

08000758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000760:	4a14      	ldr	r2, [pc, #80]	@ (80007b4 <_sbrk+0x5c>)
 8000762:	4b15      	ldr	r3, [pc, #84]	@ (80007b8 <_sbrk+0x60>)
 8000764:	1ad3      	subs	r3, r2, r3
 8000766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800076c:	4b13      	ldr	r3, [pc, #76]	@ (80007bc <_sbrk+0x64>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d102      	bne.n	800077a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000774:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <_sbrk+0x64>)
 8000776:	4a12      	ldr	r2, [pc, #72]	@ (80007c0 <_sbrk+0x68>)
 8000778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800077a:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <_sbrk+0x64>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4413      	add	r3, r2
 8000782:	693a      	ldr	r2, [r7, #16]
 8000784:	429a      	cmp	r2, r3
 8000786:	d207      	bcs.n	8000798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000788:	f002 fcdc 	bl	8003144 <__errno>
 800078c:	4603      	mov	r3, r0
 800078e:	220c      	movs	r2, #12
 8000790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000792:	f04f 33ff 	mov.w	r3, #4294967295
 8000796:	e009      	b.n	80007ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000798:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <_sbrk+0x64>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800079e:	4b07      	ldr	r3, [pc, #28]	@ (80007bc <_sbrk+0x64>)
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4413      	add	r3, r2
 80007a6:	4a05      	ldr	r2, [pc, #20]	@ (80007bc <_sbrk+0x64>)
 80007a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007aa:	68fb      	ldr	r3, [r7, #12]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3718      	adds	r7, #24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20010000 	.word	0x20010000
 80007b8:	00000400 	.word	0x00000400
 80007bc:	2000010c 	.word	0x2000010c
 80007c0:	20000260 	.word	0x20000260

080007c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <SystemInit+0x20>)
 80007ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007ce:	4a05      	ldr	r2, [pc, #20]	@ (80007e4 <SystemInit+0x20>)
 80007d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000820 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80007ec:	f7ff ffea 	bl	80007c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f0:	480c      	ldr	r0, [pc, #48]	@ (8000824 <LoopForever+0x6>)
  ldr r1, =_edata
 80007f2:	490d      	ldr	r1, [pc, #52]	@ (8000828 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007f4:	4a0d      	ldr	r2, [pc, #52]	@ (800082c <LoopForever+0xe>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f8:	e002      	b.n	8000800 <LoopCopyDataInit>

080007fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fe:	3304      	adds	r3, #4

08000800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000804:	d3f9      	bcc.n	80007fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000806:	4a0a      	ldr	r2, [pc, #40]	@ (8000830 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000808:	4c0a      	ldr	r4, [pc, #40]	@ (8000834 <LoopForever+0x16>)
  movs r3, #0
 800080a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800080c:	e001      	b.n	8000812 <LoopFillZerobss>

0800080e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000810:	3204      	adds	r2, #4

08000812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000814:	d3fb      	bcc.n	800080e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000816:	f002 fc9b 	bl	8003150 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800081a:	f7ff fd31 	bl	8000280 <main>

0800081e <LoopForever>:

LoopForever:
    b LoopForever
 800081e:	e7fe      	b.n	800081e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000820:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000828:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800082c:	08003ad0 	.word	0x08003ad0
  ldr r2, =_sbss
 8000830:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000834:	2000025c 	.word	0x2000025c

08000838 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000838:	e7fe      	b.n	8000838 <ADC1_2_IRQHandler>
	...

0800083c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000840:	4b08      	ldr	r3, [pc, #32]	@ (8000864 <HAL_Init+0x28>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a07      	ldr	r2, [pc, #28]	@ (8000864 <HAL_Init+0x28>)
 8000846:	f043 0310 	orr.w	r3, r3, #16
 800084a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800084c:	2003      	movs	r0, #3
 800084e:	f000 f90d 	bl	8000a6c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000852:	2000      	movs	r0, #0
 8000854:	f000 f808 	bl	8000868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000858:	f7ff fee0 	bl	800061c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800085c:	2300      	movs	r3, #0
}
 800085e:	4618      	mov	r0, r3
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40022000 	.word	0x40022000

08000868 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000870:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <HAL_InitTick+0x54>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <HAL_InitTick+0x58>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	4619      	mov	r1, r3
 800087a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800087e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000882:	fbb2 f3f3 	udiv	r3, r2, r3
 8000886:	4618      	mov	r0, r3
 8000888:	f000 f917 	bl	8000aba <HAL_SYSTICK_Config>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000892:	2301      	movs	r3, #1
 8000894:	e00e      	b.n	80008b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2b0f      	cmp	r3, #15
 800089a:	d80a      	bhi.n	80008b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800089c:	2200      	movs	r2, #0
 800089e:	6879      	ldr	r1, [r7, #4]
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	f000 f8ed 	bl	8000a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008a8:	4a06      	ldr	r2, [pc, #24]	@ (80008c4 <HAL_InitTick+0x5c>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008ae:	2300      	movs	r3, #0
 80008b0:	e000      	b.n	80008b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000000 	.word	0x20000000
 80008c0:	20000008 	.word	0x20000008
 80008c4:	20000004 	.word	0x20000004

080008c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008cc:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <HAL_IncTick+0x20>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	461a      	mov	r2, r3
 80008d2:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <HAL_IncTick+0x24>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4413      	add	r3, r2
 80008d8:	4a04      	ldr	r2, [pc, #16]	@ (80008ec <HAL_IncTick+0x24>)
 80008da:	6013      	str	r3, [r2, #0]
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	20000008 	.word	0x20000008
 80008ec:	20000110 	.word	0x20000110

080008f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80008f4:	4b03      	ldr	r3, [pc, #12]	@ (8000904 <HAL_GetTick+0x14>)
 80008f6:	681b      	ldr	r3, [r3, #0]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	20000110 	.word	0x20000110

08000908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000918:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <__NVIC_SetPriorityGrouping+0x44>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800091e:	68ba      	ldr	r2, [r7, #8]
 8000920:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000924:	4013      	ands	r3, r2
 8000926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000930:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000934:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800093a:	4a04      	ldr	r2, [pc, #16]	@ (800094c <__NVIC_SetPriorityGrouping+0x44>)
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	60d3      	str	r3, [r2, #12]
}
 8000940:	bf00      	nop
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000954:	4b04      	ldr	r3, [pc, #16]	@ (8000968 <__NVIC_GetPriorityGrouping+0x18>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	f003 0307 	and.w	r3, r3, #7
}
 800095e:	4618      	mov	r0, r3
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	6039      	str	r1, [r7, #0]
 8000976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097c:	2b00      	cmp	r3, #0
 800097e:	db0a      	blt.n	8000996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	b2da      	uxtb	r2, r3
 8000984:	490c      	ldr	r1, [pc, #48]	@ (80009b8 <__NVIC_SetPriority+0x4c>)
 8000986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098a:	0112      	lsls	r2, r2, #4
 800098c:	b2d2      	uxtb	r2, r2
 800098e:	440b      	add	r3, r1
 8000990:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000994:	e00a      	b.n	80009ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4908      	ldr	r1, [pc, #32]	@ (80009bc <__NVIC_SetPriority+0x50>)
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	f003 030f 	and.w	r3, r3, #15
 80009a2:	3b04      	subs	r3, #4
 80009a4:	0112      	lsls	r2, r2, #4
 80009a6:	b2d2      	uxtb	r2, r2
 80009a8:	440b      	add	r3, r1
 80009aa:	761a      	strb	r2, [r3, #24]
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	e000e100 	.word	0xe000e100
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b089      	sub	sp, #36	@ 0x24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	f003 0307 	and.w	r3, r3, #7
 80009d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	f1c3 0307 	rsb	r3, r3, #7
 80009da:	2b04      	cmp	r3, #4
 80009dc:	bf28      	it	cs
 80009de:	2304      	movcs	r3, #4
 80009e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	3304      	adds	r3, #4
 80009e6:	2b06      	cmp	r3, #6
 80009e8:	d902      	bls.n	80009f0 <NVIC_EncodePriority+0x30>
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3b03      	subs	r3, #3
 80009ee:	e000      	b.n	80009f2 <NVIC_EncodePriority+0x32>
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f4:	f04f 32ff 	mov.w	r2, #4294967295
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	43da      	mvns	r2, r3
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	401a      	ands	r2, r3
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a08:	f04f 31ff 	mov.w	r1, #4294967295
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a12:	43d9      	mvns	r1, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a18:	4313      	orrs	r3, r2
         );
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3724      	adds	r7, #36	@ 0x24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
	...

08000a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a38:	d301      	bcc.n	8000a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e00f      	b.n	8000a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a68 <SysTick_Config+0x40>)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a46:	210f      	movs	r1, #15
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295
 8000a4c:	f7ff ff8e 	bl	800096c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a50:	4b05      	ldr	r3, [pc, #20]	@ (8000a68 <SysTick_Config+0x40>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a56:	4b04      	ldr	r3, [pc, #16]	@ (8000a68 <SysTick_Config+0x40>)
 8000a58:	2207      	movs	r2, #7
 8000a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	e000e010 	.word	0xe000e010

08000a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff ff47 	bl	8000908 <__NVIC_SetPriorityGrouping>
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b086      	sub	sp, #24
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	4603      	mov	r3, r0
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
 8000a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a94:	f7ff ff5c 	bl	8000950 <__NVIC_GetPriorityGrouping>
 8000a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	68b9      	ldr	r1, [r7, #8]
 8000a9e:	6978      	ldr	r0, [r7, #20]
 8000aa0:	f7ff ff8e 	bl	80009c0 <NVIC_EncodePriority>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aaa:	4611      	mov	r1, r2
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff5d 	bl	800096c <__NVIC_SetPriority>
}
 8000ab2:	bf00      	nop
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff ffb0 	bl	8000a28 <SysTick_Config>
 8000ac8:	4603      	mov	r3, r0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b087      	sub	sp, #28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ae2:	e160      	b.n	8000da6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	2101      	movs	r1, #1
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	fa01 f303 	lsl.w	r3, r1, r3
 8000af0:	4013      	ands	r3, r2
 8000af2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f000 8152 	beq.w	8000da0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f003 0303 	and.w	r3, r3, #3
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d005      	beq.n	8000b14 <HAL_GPIO_Init+0x40>
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f003 0303 	and.w	r3, r3, #3
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d130      	bne.n	8000b76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	2203      	movs	r2, #3
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	43db      	mvns	r3, r3
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	68da      	ldr	r2, [r3, #12]
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	fa02 f303 	lsl.w	r3, r2, r3
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43db      	mvns	r3, r3
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4013      	ands	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	091b      	lsrs	r3, r3, #4
 8000b60:	f003 0201 	and.w	r2, r3, #1
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f003 0303 	and.w	r3, r3, #3
 8000b7e:	2b03      	cmp	r3, #3
 8000b80:	d017      	beq.n	8000bb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43db      	mvns	r3, r3
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	4013      	ands	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	689a      	ldr	r2, [r3, #8]
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f003 0303 	and.w	r3, r3, #3
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	d123      	bne.n	8000c06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	08da      	lsrs	r2, r3, #3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3208      	adds	r2, #8
 8000bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	220f      	movs	r2, #15
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	4013      	ands	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	691a      	ldr	r2, [r3, #16]
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	f003 0307 	and.w	r3, r3, #7
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	08da      	lsrs	r2, r3, #3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3208      	adds	r2, #8
 8000c00:	6939      	ldr	r1, [r7, #16]
 8000c02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	2203      	movs	r2, #3
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43db      	mvns	r3, r3
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f003 0203 	and.w	r2, r3, #3
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f000 80ac 	beq.w	8000da0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c48:	4b5e      	ldr	r3, [pc, #376]	@ (8000dc4 <HAL_GPIO_Init+0x2f0>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	4a5d      	ldr	r2, [pc, #372]	@ (8000dc4 <HAL_GPIO_Init+0x2f0>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	6193      	str	r3, [r2, #24]
 8000c54:	4b5b      	ldr	r3, [pc, #364]	@ (8000dc4 <HAL_GPIO_Init+0x2f0>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c60:	4a59      	ldr	r2, [pc, #356]	@ (8000dc8 <HAL_GPIO_Init+0x2f4>)
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	089b      	lsrs	r3, r3, #2
 8000c66:	3302      	adds	r3, #2
 8000c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	f003 0303 	and.w	r3, r3, #3
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	220f      	movs	r2, #15
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4013      	ands	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c8a:	d025      	beq.n	8000cd8 <HAL_GPIO_Init+0x204>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a4f      	ldr	r2, [pc, #316]	@ (8000dcc <HAL_GPIO_Init+0x2f8>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d01f      	beq.n	8000cd4 <HAL_GPIO_Init+0x200>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a4e      	ldr	r2, [pc, #312]	@ (8000dd0 <HAL_GPIO_Init+0x2fc>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d019      	beq.n	8000cd0 <HAL_GPIO_Init+0x1fc>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a4d      	ldr	r2, [pc, #308]	@ (8000dd4 <HAL_GPIO_Init+0x300>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d013      	beq.n	8000ccc <HAL_GPIO_Init+0x1f8>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a4c      	ldr	r2, [pc, #304]	@ (8000dd8 <HAL_GPIO_Init+0x304>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d00d      	beq.n	8000cc8 <HAL_GPIO_Init+0x1f4>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a4b      	ldr	r2, [pc, #300]	@ (8000ddc <HAL_GPIO_Init+0x308>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d007      	beq.n	8000cc4 <HAL_GPIO_Init+0x1f0>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a4a      	ldr	r2, [pc, #296]	@ (8000de0 <HAL_GPIO_Init+0x30c>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d101      	bne.n	8000cc0 <HAL_GPIO_Init+0x1ec>
 8000cbc:	2306      	movs	r3, #6
 8000cbe:	e00c      	b.n	8000cda <HAL_GPIO_Init+0x206>
 8000cc0:	2307      	movs	r3, #7
 8000cc2:	e00a      	b.n	8000cda <HAL_GPIO_Init+0x206>
 8000cc4:	2305      	movs	r3, #5
 8000cc6:	e008      	b.n	8000cda <HAL_GPIO_Init+0x206>
 8000cc8:	2304      	movs	r3, #4
 8000cca:	e006      	b.n	8000cda <HAL_GPIO_Init+0x206>
 8000ccc:	2303      	movs	r3, #3
 8000cce:	e004      	b.n	8000cda <HAL_GPIO_Init+0x206>
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	e002      	b.n	8000cda <HAL_GPIO_Init+0x206>
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e000      	b.n	8000cda <HAL_GPIO_Init+0x206>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	697a      	ldr	r2, [r7, #20]
 8000cdc:	f002 0203 	and.w	r2, r2, #3
 8000ce0:	0092      	lsls	r2, r2, #2
 8000ce2:	4093      	lsls	r3, r2
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cea:	4937      	ldr	r1, [pc, #220]	@ (8000dc8 <HAL_GPIO_Init+0x2f4>)
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	089b      	lsrs	r3, r3, #2
 8000cf0:	3302      	adds	r3, #2
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cf8:	4b3a      	ldr	r3, [pc, #232]	@ (8000de4 <HAL_GPIO_Init+0x310>)
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	43db      	mvns	r3, r3
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	4013      	ands	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d003      	beq.n	8000d1c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d1c:	4a31      	ldr	r2, [pc, #196]	@ (8000de4 <HAL_GPIO_Init+0x310>)
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d22:	4b30      	ldr	r3, [pc, #192]	@ (8000de4 <HAL_GPIO_Init+0x310>)
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d003      	beq.n	8000d46 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d46:	4a27      	ldr	r2, [pc, #156]	@ (8000de4 <HAL_GPIO_Init+0x310>)
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d4c:	4b25      	ldr	r3, [pc, #148]	@ (8000de4 <HAL_GPIO_Init+0x310>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	43db      	mvns	r3, r3
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d003      	beq.n	8000d70 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d70:	4a1c      	ldr	r2, [pc, #112]	@ (8000de4 <HAL_GPIO_Init+0x310>)
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d76:	4b1b      	ldr	r3, [pc, #108]	@ (8000de4 <HAL_GPIO_Init+0x310>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d003      	beq.n	8000d9a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d9a:	4a12      	ldr	r2, [pc, #72]	@ (8000de4 <HAL_GPIO_Init+0x310>)
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	3301      	adds	r3, #1
 8000da4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	fa22 f303 	lsr.w	r3, r2, r3
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	f47f ae97 	bne.w	8000ae4 <HAL_GPIO_Init+0x10>
  }
}
 8000db6:	bf00      	nop
 8000db8:	bf00      	nop
 8000dba:	371c      	adds	r7, #28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40010000 	.word	0x40010000
 8000dcc:	48000400 	.word	0x48000400
 8000dd0:	48000800 	.word	0x48000800
 8000dd4:	48000c00 	.word	0x48000c00
 8000dd8:	48001000 	.word	0x48001000
 8000ddc:	48001400 	.word	0x48001400
 8000de0:	48001800 	.word	0x48001800
 8000de4:	40010400 	.word	0x40010400

08000de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	460b      	mov	r3, r1
 8000df2:	807b      	strh	r3, [r7, #2]
 8000df4:	4613      	mov	r3, r2
 8000df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000df8:	787b      	ldrb	r3, [r7, #1]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d003      	beq.n	8000e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dfe:	887a      	ldrh	r2, [r7, #2]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e04:	e002      	b.n	8000e0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e06:	887a      	ldrh	r2, [r7, #2]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e24:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e28:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e2e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d102      	bne.n	8000e3e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	f001 b83a 	b.w	8001eb2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e42:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f000 816f 	beq.w	8001132 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e54:	4bb5      	ldr	r3, [pc, #724]	@ (800112c <HAL_RCC_OscConfig+0x314>)
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 030c 	and.w	r3, r3, #12
 8000e5c:	2b04      	cmp	r3, #4
 8000e5e:	d00c      	beq.n	8000e7a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e60:	4bb2      	ldr	r3, [pc, #712]	@ (800112c <HAL_RCC_OscConfig+0x314>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 030c 	and.w	r3, r3, #12
 8000e68:	2b08      	cmp	r3, #8
 8000e6a:	d15c      	bne.n	8000f26 <HAL_RCC_OscConfig+0x10e>
 8000e6c:	4baf      	ldr	r3, [pc, #700]	@ (800112c <HAL_RCC_OscConfig+0x314>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000e74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e78:	d155      	bne.n	8000f26 <HAL_RCC_OscConfig+0x10e>
 8000e7a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e7e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e82:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000e86:	fa93 f3a3 	rbit	r3, r3
 8000e8a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e8e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e92:	fab3 f383 	clz	r3, r3
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	095b      	lsrs	r3, r3, #5
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d102      	bne.n	8000eac <HAL_RCC_OscConfig+0x94>
 8000ea6:	4ba1      	ldr	r3, [pc, #644]	@ (800112c <HAL_RCC_OscConfig+0x314>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	e015      	b.n	8000ed8 <HAL_RCC_OscConfig+0xc0>
 8000eac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000eb0:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000eb8:	fa93 f3a3 	rbit	r3, r3
 8000ebc:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000ec0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ec4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000ec8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000ecc:	fa93 f3a3 	rbit	r3, r3
 8000ed0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000ed4:	4b95      	ldr	r3, [pc, #596]	@ (800112c <HAL_RCC_OscConfig+0x314>)
 8000ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ed8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000edc:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000ee0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000ee4:	fa92 f2a2 	rbit	r2, r2
 8000ee8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8000eec:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000ef0:	fab2 f282 	clz	r2, r2
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	f042 0220 	orr.w	r2, r2, #32
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	f002 021f 	and.w	r2, r2, #31
 8000f00:	2101      	movs	r1, #1
 8000f02:	fa01 f202 	lsl.w	r2, r1, r2
 8000f06:	4013      	ands	r3, r2
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f000 8111 	beq.w	8001130 <HAL_RCC_OscConfig+0x318>
 8000f0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f12:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f040 8108 	bne.w	8001130 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	f000 bfc6 	b.w	8001eb2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f2a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f36:	d106      	bne.n	8000f46 <HAL_RCC_OscConfig+0x12e>
 8000f38:	4b7c      	ldr	r3, [pc, #496]	@ (800112c <HAL_RCC_OscConfig+0x314>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a7b      	ldr	r2, [pc, #492]	@ (800112c <HAL_RCC_OscConfig+0x314>)
 8000f3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f42:	6013      	str	r3, [r2, #0]
 8000f44:	e036      	b.n	8000fb4 <HAL_RCC_OscConfig+0x19c>
 8000f46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f4a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d10c      	bne.n	8000f70 <HAL_RCC_OscConfig+0x158>
 8000f56:	4b75      	ldr	r3, [pc, #468]	@ (800112c <HAL_RCC_OscConfig+0x314>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a74      	ldr	r2, [pc, #464]	@ (800112c <HAL_RCC_OscConfig+0x314>)
 8000f5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	4b72      	ldr	r3, [pc, #456]	@ (800112c <HAL_RCC_OscConfig+0x314>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a71      	ldr	r2, [pc, #452]	@ (800112c <HAL_RCC_OscConfig+0x314>)
 8000f68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f6c:	6013      	str	r3, [r2, #0]
 8000f6e:	e021      	b.n	8000fb4 <HAL_RCC_OscConfig+0x19c>
 8000f70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f74:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f80:	d10c      	bne.n	8000f9c <HAL_RCC_OscConfig+0x184>
 8000f82:	4b6a      	ldr	r3, [pc, #424]	@ (800112c <HAL_RCC_OscConfig+0x314>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a69      	ldr	r2, [pc, #420]	@ (800112c <HAL_RCC_OscConfig+0x314>)
 8000f88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	4b67      	ldr	r3, [pc, #412]	@ (800112c <HAL_RCC_OscConfig+0x314>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a66      	ldr	r2, [pc, #408]	@ (800112c <HAL_RCC_OscConfig+0x314>)
 8000f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	e00b      	b.n	8000fb4 <HAL_RCC_OscConfig+0x19c>
 8000f9c:	4b63      	ldr	r3, [pc, #396]	@ (800112c <HAL_RCC_OscConfig+0x314>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a62      	ldr	r2, [pc, #392]	@ (800112c <HAL_RCC_OscConfig+0x314>)
 8000fa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	4b60      	ldr	r3, [pc, #384]	@ (800112c <HAL_RCC_OscConfig+0x314>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a5f      	ldr	r2, [pc, #380]	@ (800112c <HAL_RCC_OscConfig+0x314>)
 8000fae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fb2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fb8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d059      	beq.n	8001078 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fc94 	bl	80008f0 <HAL_GetTick>
 8000fc8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fcc:	e00a      	b.n	8000fe4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fce:	f7ff fc8f 	bl	80008f0 <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b64      	cmp	r3, #100	@ 0x64
 8000fdc:	d902      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	f000 bf67 	b.w	8001eb2 <HAL_RCC_OscConfig+0x109a>
 8000fe4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fe8:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fec:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000ff0:	fa93 f3a3 	rbit	r3, r3
 8000ff4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8000ff8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffc:	fab3 f383 	clz	r3, r3
 8001000:	b2db      	uxtb	r3, r3
 8001002:	095b      	lsrs	r3, r3, #5
 8001004:	b2db      	uxtb	r3, r3
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b01      	cmp	r3, #1
 800100e:	d102      	bne.n	8001016 <HAL_RCC_OscConfig+0x1fe>
 8001010:	4b46      	ldr	r3, [pc, #280]	@ (800112c <HAL_RCC_OscConfig+0x314>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	e015      	b.n	8001042 <HAL_RCC_OscConfig+0x22a>
 8001016:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800101a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800101e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001022:	fa93 f3a3 	rbit	r3, r3
 8001026:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800102a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800102e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001032:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001036:	fa93 f3a3 	rbit	r3, r3
 800103a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800103e:	4b3b      	ldr	r3, [pc, #236]	@ (800112c <HAL_RCC_OscConfig+0x314>)
 8001040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001042:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001046:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800104a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800104e:	fa92 f2a2 	rbit	r2, r2
 8001052:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8001056:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800105a:	fab2 f282 	clz	r2, r2
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	f042 0220 	orr.w	r2, r2, #32
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	f002 021f 	and.w	r2, r2, #31
 800106a:	2101      	movs	r1, #1
 800106c:	fa01 f202 	lsl.w	r2, r1, r2
 8001070:	4013      	ands	r3, r2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d0ab      	beq.n	8000fce <HAL_RCC_OscConfig+0x1b6>
 8001076:	e05c      	b.n	8001132 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001078:	f7ff fc3a 	bl	80008f0 <HAL_GetTick>
 800107c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001080:	e00a      	b.n	8001098 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001082:	f7ff fc35 	bl	80008f0 <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b64      	cmp	r3, #100	@ 0x64
 8001090:	d902      	bls.n	8001098 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	f000 bf0d 	b.w	8001eb2 <HAL_RCC_OscConfig+0x109a>
 8001098:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800109c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80010a4:	fa93 f3a3 	rbit	r3, r3
 80010a8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80010ac:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010b0:	fab3 f383 	clz	r3, r3
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	095b      	lsrs	r3, r3, #5
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d102      	bne.n	80010ca <HAL_RCC_OscConfig+0x2b2>
 80010c4:	4b19      	ldr	r3, [pc, #100]	@ (800112c <HAL_RCC_OscConfig+0x314>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	e015      	b.n	80010f6 <HAL_RCC_OscConfig+0x2de>
 80010ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010ce:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80010d6:	fa93 f3a3 	rbit	r3, r3
 80010da:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80010de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010e2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80010e6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80010ea:	fa93 f3a3 	rbit	r3, r3
 80010ee:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80010f2:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <HAL_RCC_OscConfig+0x314>)
 80010f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80010fa:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80010fe:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001102:	fa92 f2a2 	rbit	r2, r2
 8001106:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 800110a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800110e:	fab2 f282 	clz	r2, r2
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	f042 0220 	orr.w	r2, r2, #32
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	f002 021f 	and.w	r2, r2, #31
 800111e:	2101      	movs	r1, #1
 8001120:	fa01 f202 	lsl.w	r2, r1, r2
 8001124:	4013      	ands	r3, r2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1ab      	bne.n	8001082 <HAL_RCC_OscConfig+0x26a>
 800112a:	e002      	b.n	8001132 <HAL_RCC_OscConfig+0x31a>
 800112c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001132:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001136:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 817f 	beq.w	8001446 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001148:	4ba7      	ldr	r3, [pc, #668]	@ (80013e8 <HAL_RCC_OscConfig+0x5d0>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 030c 	and.w	r3, r3, #12
 8001150:	2b00      	cmp	r3, #0
 8001152:	d00c      	beq.n	800116e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001154:	4ba4      	ldr	r3, [pc, #656]	@ (80013e8 <HAL_RCC_OscConfig+0x5d0>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 030c 	and.w	r3, r3, #12
 800115c:	2b08      	cmp	r3, #8
 800115e:	d173      	bne.n	8001248 <HAL_RCC_OscConfig+0x430>
 8001160:	4ba1      	ldr	r3, [pc, #644]	@ (80013e8 <HAL_RCC_OscConfig+0x5d0>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001168:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800116c:	d16c      	bne.n	8001248 <HAL_RCC_OscConfig+0x430>
 800116e:	2302      	movs	r3, #2
 8001170:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001174:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001178:	fa93 f3a3 	rbit	r3, r3
 800117c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001180:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001184:	fab3 f383 	clz	r3, r3
 8001188:	b2db      	uxtb	r3, r3
 800118a:	095b      	lsrs	r3, r3, #5
 800118c:	b2db      	uxtb	r3, r3
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b01      	cmp	r3, #1
 8001196:	d102      	bne.n	800119e <HAL_RCC_OscConfig+0x386>
 8001198:	4b93      	ldr	r3, [pc, #588]	@ (80013e8 <HAL_RCC_OscConfig+0x5d0>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	e013      	b.n	80011c6 <HAL_RCC_OscConfig+0x3ae>
 800119e:	2302      	movs	r3, #2
 80011a0:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a4:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80011a8:	fa93 f3a3 	rbit	r3, r3
 80011ac:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80011b0:	2302      	movs	r3, #2
 80011b2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80011b6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80011ba:	fa93 f3a3 	rbit	r3, r3
 80011be:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80011c2:	4b89      	ldr	r3, [pc, #548]	@ (80013e8 <HAL_RCC_OscConfig+0x5d0>)
 80011c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c6:	2202      	movs	r2, #2
 80011c8:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80011cc:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80011d0:	fa92 f2a2 	rbit	r2, r2
 80011d4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80011d8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80011dc:	fab2 f282 	clz	r2, r2
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	f042 0220 	orr.w	r2, r2, #32
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	f002 021f 	and.w	r2, r2, #31
 80011ec:	2101      	movs	r1, #1
 80011ee:	fa01 f202 	lsl.w	r2, r1, r2
 80011f2:	4013      	ands	r3, r2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d00a      	beq.n	800120e <HAL_RCC_OscConfig+0x3f6>
 80011f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d002      	beq.n	800120e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	f000 be52 	b.w	8001eb2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120e:	4b76      	ldr	r3, [pc, #472]	@ (80013e8 <HAL_RCC_OscConfig+0x5d0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001216:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800121a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	21f8      	movs	r1, #248	@ 0xf8
 8001224:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001228:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 800122c:	fa91 f1a1 	rbit	r1, r1
 8001230:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001234:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001238:	fab1 f181 	clz	r1, r1
 800123c:	b2c9      	uxtb	r1, r1
 800123e:	408b      	lsls	r3, r1
 8001240:	4969      	ldr	r1, [pc, #420]	@ (80013e8 <HAL_RCC_OscConfig+0x5d0>)
 8001242:	4313      	orrs	r3, r2
 8001244:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001246:	e0fe      	b.n	8001446 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001248:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800124c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	2b00      	cmp	r3, #0
 8001256:	f000 8088 	beq.w	800136a <HAL_RCC_OscConfig+0x552>
 800125a:	2301      	movs	r3, #1
 800125c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001260:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001264:	fa93 f3a3 	rbit	r3, r3
 8001268:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 800126c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001270:	fab3 f383 	clz	r3, r3
 8001274:	b2db      	uxtb	r3, r3
 8001276:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800127a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	461a      	mov	r2, r3
 8001282:	2301      	movs	r3, #1
 8001284:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001286:	f7ff fb33 	bl	80008f0 <HAL_GetTick>
 800128a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128e:	e00a      	b.n	80012a6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001290:	f7ff fb2e 	bl	80008f0 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d902      	bls.n	80012a6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	f000 be06 	b.w	8001eb2 <HAL_RCC_OscConfig+0x109a>
 80012a6:	2302      	movs	r3, #2
 80012a8:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ac:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80012b0:	fa93 f3a3 	rbit	r3, r3
 80012b4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80012b8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012bc:	fab3 f383 	clz	r3, r3
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	095b      	lsrs	r3, r3, #5
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d102      	bne.n	80012d6 <HAL_RCC_OscConfig+0x4be>
 80012d0:	4b45      	ldr	r3, [pc, #276]	@ (80013e8 <HAL_RCC_OscConfig+0x5d0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	e013      	b.n	80012fe <HAL_RCC_OscConfig+0x4e6>
 80012d6:	2302      	movs	r3, #2
 80012d8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012dc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80012e0:	fa93 f3a3 	rbit	r3, r3
 80012e4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80012e8:	2302      	movs	r3, #2
 80012ea:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80012ee:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80012f2:	fa93 f3a3 	rbit	r3, r3
 80012f6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80012fa:	4b3b      	ldr	r3, [pc, #236]	@ (80013e8 <HAL_RCC_OscConfig+0x5d0>)
 80012fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012fe:	2202      	movs	r2, #2
 8001300:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001304:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001308:	fa92 f2a2 	rbit	r2, r2
 800130c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001310:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001314:	fab2 f282 	clz	r2, r2
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	f042 0220 	orr.w	r2, r2, #32
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	f002 021f 	and.w	r2, r2, #31
 8001324:	2101      	movs	r1, #1
 8001326:	fa01 f202 	lsl.w	r2, r1, r2
 800132a:	4013      	ands	r3, r2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0af      	beq.n	8001290 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001330:	4b2d      	ldr	r3, [pc, #180]	@ (80013e8 <HAL_RCC_OscConfig+0x5d0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001338:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800133c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	21f8      	movs	r1, #248	@ 0xf8
 8001346:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800134e:	fa91 f1a1 	rbit	r1, r1
 8001352:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001356:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800135a:	fab1 f181 	clz	r1, r1
 800135e:	b2c9      	uxtb	r1, r1
 8001360:	408b      	lsls	r3, r1
 8001362:	4921      	ldr	r1, [pc, #132]	@ (80013e8 <HAL_RCC_OscConfig+0x5d0>)
 8001364:	4313      	orrs	r3, r2
 8001366:	600b      	str	r3, [r1, #0]
 8001368:	e06d      	b.n	8001446 <HAL_RCC_OscConfig+0x62e>
 800136a:	2301      	movs	r3, #1
 800136c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001370:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001374:	fa93 f3a3 	rbit	r3, r3
 8001378:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 800137c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001380:	fab3 f383 	clz	r3, r3
 8001384:	b2db      	uxtb	r3, r3
 8001386:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800138a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	461a      	mov	r2, r3
 8001392:	2300      	movs	r3, #0
 8001394:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001396:	f7ff faab 	bl	80008f0 <HAL_GetTick>
 800139a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139e:	e00a      	b.n	80013b6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013a0:	f7ff faa6 	bl	80008f0 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d902      	bls.n	80013b6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	f000 bd7e 	b.w	8001eb2 <HAL_RCC_OscConfig+0x109a>
 80013b6:	2302      	movs	r3, #2
 80013b8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80013c0:	fa93 f3a3 	rbit	r3, r3
 80013c4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80013c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013cc:	fab3 f383 	clz	r3, r3
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	095b      	lsrs	r3, r3, #5
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d105      	bne.n	80013ec <HAL_RCC_OscConfig+0x5d4>
 80013e0:	4b01      	ldr	r3, [pc, #4]	@ (80013e8 <HAL_RCC_OscConfig+0x5d0>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	e016      	b.n	8001414 <HAL_RCC_OscConfig+0x5fc>
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000
 80013ec:	2302      	movs	r3, #2
 80013ee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80013f6:	fa93 f3a3 	rbit	r3, r3
 80013fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80013fe:	2302      	movs	r3, #2
 8001400:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001404:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001408:	fa93 f3a3 	rbit	r3, r3
 800140c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001410:	4bbf      	ldr	r3, [pc, #764]	@ (8001710 <HAL_RCC_OscConfig+0x8f8>)
 8001412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001414:	2202      	movs	r2, #2
 8001416:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800141a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800141e:	fa92 f2a2 	rbit	r2, r2
 8001422:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001426:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800142a:	fab2 f282 	clz	r2, r2
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	f042 0220 	orr.w	r2, r2, #32
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	f002 021f 	and.w	r2, r2, #31
 800143a:	2101      	movs	r1, #1
 800143c:	fa01 f202 	lsl.w	r2, r1, r2
 8001440:	4013      	ands	r3, r2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1ac      	bne.n	80013a0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001446:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800144a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0308 	and.w	r3, r3, #8
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 8113 	beq.w	8001682 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800145c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001460:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d07c      	beq.n	8001566 <HAL_RCC_OscConfig+0x74e>
 800146c:	2301      	movs	r3, #1
 800146e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001476:	fa93 f3a3 	rbit	r3, r3
 800147a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 800147e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001482:	fab3 f383 	clz	r3, r3
 8001486:	b2db      	uxtb	r3, r3
 8001488:	461a      	mov	r2, r3
 800148a:	4ba2      	ldr	r3, [pc, #648]	@ (8001714 <HAL_RCC_OscConfig+0x8fc>)
 800148c:	4413      	add	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	461a      	mov	r2, r3
 8001492:	2301      	movs	r3, #1
 8001494:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001496:	f7ff fa2b 	bl	80008f0 <HAL_GetTick>
 800149a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149e:	e00a      	b.n	80014b6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a0:	f7ff fa26 	bl	80008f0 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d902      	bls.n	80014b6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	f000 bcfe 	b.w	8001eb2 <HAL_RCC_OscConfig+0x109a>
 80014b6:	2302      	movs	r3, #2
 80014b8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80014c0:	fa93 f2a3 	rbit	r2, r3
 80014c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014c8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80014d6:	2202      	movs	r2, #2
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	fa93 f2a3 	rbit	r2, r3
 80014e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80014fa:	2202      	movs	r2, #2
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001502:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	fa93 f2a3 	rbit	r2, r3
 800150c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001510:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001514:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001516:	4b7e      	ldr	r3, [pc, #504]	@ (8001710 <HAL_RCC_OscConfig+0x8f8>)
 8001518:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800151a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800151e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001522:	2102      	movs	r1, #2
 8001524:	6019      	str	r1, [r3, #0]
 8001526:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800152a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	fa93 f1a3 	rbit	r1, r3
 8001534:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001538:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800153c:	6019      	str	r1, [r3, #0]
  return result;
 800153e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001542:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	fab3 f383 	clz	r3, r3
 800154c:	b2db      	uxtb	r3, r3
 800154e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001552:	b2db      	uxtb	r3, r3
 8001554:	f003 031f 	and.w	r3, r3, #31
 8001558:	2101      	movs	r1, #1
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
 800155e:	4013      	ands	r3, r2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d09d      	beq.n	80014a0 <HAL_RCC_OscConfig+0x688>
 8001564:	e08d      	b.n	8001682 <HAL_RCC_OscConfig+0x86a>
 8001566:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800156a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800156e:	2201      	movs	r2, #1
 8001570:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001572:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001576:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	fa93 f2a3 	rbit	r2, r3
 8001580:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001584:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001588:	601a      	str	r2, [r3, #0]
  return result;
 800158a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800158e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001592:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001594:	fab3 f383 	clz	r3, r3
 8001598:	b2db      	uxtb	r3, r3
 800159a:	461a      	mov	r2, r3
 800159c:	4b5d      	ldr	r3, [pc, #372]	@ (8001714 <HAL_RCC_OscConfig+0x8fc>)
 800159e:	4413      	add	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	461a      	mov	r2, r3
 80015a4:	2300      	movs	r3, #0
 80015a6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a8:	f7ff f9a2 	bl	80008f0 <HAL_GetTick>
 80015ac:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b0:	e00a      	b.n	80015c8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015b2:	f7ff f99d 	bl	80008f0 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d902      	bls.n	80015c8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	f000 bc75 	b.w	8001eb2 <HAL_RCC_OscConfig+0x109a>
 80015c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015cc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80015d0:	2202      	movs	r2, #2
 80015d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015d8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	fa93 f2a3 	rbit	r2, r3
 80015e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015e6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80015f4:	2202      	movs	r2, #2
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	fa93 f2a3 	rbit	r2, r3
 8001606:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800160a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001614:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001618:	2202      	movs	r2, #2
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001620:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	fa93 f2a3 	rbit	r2, r3
 800162a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800162e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001632:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001634:	4b36      	ldr	r3, [pc, #216]	@ (8001710 <HAL_RCC_OscConfig+0x8f8>)
 8001636:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001638:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800163c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001640:	2102      	movs	r1, #2
 8001642:	6019      	str	r1, [r3, #0]
 8001644:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001648:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	fa93 f1a3 	rbit	r1, r3
 8001652:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001656:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800165a:	6019      	str	r1, [r3, #0]
  return result;
 800165c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001660:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	fab3 f383 	clz	r3, r3
 800166a:	b2db      	uxtb	r3, r3
 800166c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001670:	b2db      	uxtb	r3, r3
 8001672:	f003 031f 	and.w	r3, r3, #31
 8001676:	2101      	movs	r1, #1
 8001678:	fa01 f303 	lsl.w	r3, r1, r3
 800167c:	4013      	ands	r3, r2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d197      	bne.n	80015b2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001682:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001686:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	2b00      	cmp	r3, #0
 8001694:	f000 81a5 	beq.w	80019e2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001698:	2300      	movs	r3, #0
 800169a:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800169e:	4b1c      	ldr	r3, [pc, #112]	@ (8001710 <HAL_RCC_OscConfig+0x8f8>)
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d116      	bne.n	80016d8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016aa:	4b19      	ldr	r3, [pc, #100]	@ (8001710 <HAL_RCC_OscConfig+0x8f8>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	4a18      	ldr	r2, [pc, #96]	@ (8001710 <HAL_RCC_OscConfig+0x8f8>)
 80016b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016b4:	61d3      	str	r3, [r2, #28]
 80016b6:	4b16      	ldr	r3, [pc, #88]	@ (8001710 <HAL_RCC_OscConfig+0x8f8>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80016be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016d0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80016d2:	2301      	movs	r3, #1
 80016d4:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001718 <HAL_RCC_OscConfig+0x900>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d121      	bne.n	8001728 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <HAL_RCC_OscConfig+0x900>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001718 <HAL_RCC_OscConfig+0x900>)
 80016ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ee:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016f0:	f7ff f8fe 	bl	80008f0 <HAL_GetTick>
 80016f4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f8:	e010      	b.n	800171c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016fa:	f7ff f8f9 	bl	80008f0 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b64      	cmp	r3, #100	@ 0x64
 8001708:	d908      	bls.n	800171c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e3d1      	b.n	8001eb2 <HAL_RCC_OscConfig+0x109a>
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000
 8001714:	10908120 	.word	0x10908120
 8001718:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171c:	4b8d      	ldr	r3, [pc, #564]	@ (8001954 <HAL_RCC_OscConfig+0xb3c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0e8      	beq.n	80016fa <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001728:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800172c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d106      	bne.n	8001746 <HAL_RCC_OscConfig+0x92e>
 8001738:	4b87      	ldr	r3, [pc, #540]	@ (8001958 <HAL_RCC_OscConfig+0xb40>)
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	4a86      	ldr	r2, [pc, #536]	@ (8001958 <HAL_RCC_OscConfig+0xb40>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	6213      	str	r3, [r2, #32]
 8001744:	e035      	b.n	80017b2 <HAL_RCC_OscConfig+0x99a>
 8001746:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800174a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10c      	bne.n	8001770 <HAL_RCC_OscConfig+0x958>
 8001756:	4b80      	ldr	r3, [pc, #512]	@ (8001958 <HAL_RCC_OscConfig+0xb40>)
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	4a7f      	ldr	r2, [pc, #508]	@ (8001958 <HAL_RCC_OscConfig+0xb40>)
 800175c:	f023 0301 	bic.w	r3, r3, #1
 8001760:	6213      	str	r3, [r2, #32]
 8001762:	4b7d      	ldr	r3, [pc, #500]	@ (8001958 <HAL_RCC_OscConfig+0xb40>)
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	4a7c      	ldr	r2, [pc, #496]	@ (8001958 <HAL_RCC_OscConfig+0xb40>)
 8001768:	f023 0304 	bic.w	r3, r3, #4
 800176c:	6213      	str	r3, [r2, #32]
 800176e:	e020      	b.n	80017b2 <HAL_RCC_OscConfig+0x99a>
 8001770:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001774:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2b05      	cmp	r3, #5
 800177e:	d10c      	bne.n	800179a <HAL_RCC_OscConfig+0x982>
 8001780:	4b75      	ldr	r3, [pc, #468]	@ (8001958 <HAL_RCC_OscConfig+0xb40>)
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	4a74      	ldr	r2, [pc, #464]	@ (8001958 <HAL_RCC_OscConfig+0xb40>)
 8001786:	f043 0304 	orr.w	r3, r3, #4
 800178a:	6213      	str	r3, [r2, #32]
 800178c:	4b72      	ldr	r3, [pc, #456]	@ (8001958 <HAL_RCC_OscConfig+0xb40>)
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	4a71      	ldr	r2, [pc, #452]	@ (8001958 <HAL_RCC_OscConfig+0xb40>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	6213      	str	r3, [r2, #32]
 8001798:	e00b      	b.n	80017b2 <HAL_RCC_OscConfig+0x99a>
 800179a:	4b6f      	ldr	r3, [pc, #444]	@ (8001958 <HAL_RCC_OscConfig+0xb40>)
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	4a6e      	ldr	r2, [pc, #440]	@ (8001958 <HAL_RCC_OscConfig+0xb40>)
 80017a0:	f023 0301 	bic.w	r3, r3, #1
 80017a4:	6213      	str	r3, [r2, #32]
 80017a6:	4b6c      	ldr	r3, [pc, #432]	@ (8001958 <HAL_RCC_OscConfig+0xb40>)
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	4a6b      	ldr	r2, [pc, #428]	@ (8001958 <HAL_RCC_OscConfig+0xb40>)
 80017ac:	f023 0304 	bic.w	r3, r3, #4
 80017b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017b6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 8081 	beq.w	80018c6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c4:	f7ff f894 	bl	80008f0 <HAL_GetTick>
 80017c8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017cc:	e00b      	b.n	80017e6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ce:	f7ff f88f 	bl	80008f0 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017de:	4293      	cmp	r3, r2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e365      	b.n	8001eb2 <HAL_RCC_OscConfig+0x109a>
 80017e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017ea:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80017ee:	2202      	movs	r2, #2
 80017f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017f6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	fa93 f2a3 	rbit	r2, r3
 8001800:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001804:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800180e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001812:	2202      	movs	r2, #2
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800181a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	fa93 f2a3 	rbit	r2, r3
 8001824:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001828:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800182c:	601a      	str	r2, [r3, #0]
  return result;
 800182e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001832:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001836:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001838:	fab3 f383 	clz	r3, r3
 800183c:	b2db      	uxtb	r3, r3
 800183e:	095b      	lsrs	r3, r3, #5
 8001840:	b2db      	uxtb	r3, r3
 8001842:	f043 0302 	orr.w	r3, r3, #2
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d102      	bne.n	8001852 <HAL_RCC_OscConfig+0xa3a>
 800184c:	4b42      	ldr	r3, [pc, #264]	@ (8001958 <HAL_RCC_OscConfig+0xb40>)
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	e013      	b.n	800187a <HAL_RCC_OscConfig+0xa62>
 8001852:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001856:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800185a:	2202      	movs	r2, #2
 800185c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001862:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	fa93 f2a3 	rbit	r2, r3
 800186c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001870:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	4b38      	ldr	r3, [pc, #224]	@ (8001958 <HAL_RCC_OscConfig+0xb40>)
 8001878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800187e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001882:	2102      	movs	r1, #2
 8001884:	6011      	str	r1, [r2, #0]
 8001886:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800188a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	fa92 f1a2 	rbit	r1, r2
 8001894:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001898:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800189c:	6011      	str	r1, [r2, #0]
  return result;
 800189e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018a2:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80018a6:	6812      	ldr	r2, [r2, #0]
 80018a8:	fab2 f282 	clz	r2, r2
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	f002 021f 	and.w	r2, r2, #31
 80018b8:	2101      	movs	r1, #1
 80018ba:	fa01 f202 	lsl.w	r2, r1, r2
 80018be:	4013      	ands	r3, r2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d084      	beq.n	80017ce <HAL_RCC_OscConfig+0x9b6>
 80018c4:	e083      	b.n	80019ce <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c6:	f7ff f813 	bl	80008f0 <HAL_GetTick>
 80018ca:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ce:	e00b      	b.n	80018e8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d0:	f7ff f80e 	bl	80008f0 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e2e4      	b.n	8001eb2 <HAL_RCC_OscConfig+0x109a>
 80018e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ec:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80018f0:	2202      	movs	r2, #2
 80018f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018f8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	fa93 f2a3 	rbit	r2, r3
 8001902:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001906:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001910:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001914:	2202      	movs	r2, #2
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800191c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	fa93 f2a3 	rbit	r2, r3
 8001926:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800192a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800192e:	601a      	str	r2, [r3, #0]
  return result;
 8001930:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001934:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001938:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800193a:	fab3 f383 	clz	r3, r3
 800193e:	b2db      	uxtb	r3, r3
 8001940:	095b      	lsrs	r3, r3, #5
 8001942:	b2db      	uxtb	r3, r3
 8001944:	f043 0302 	orr.w	r3, r3, #2
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d106      	bne.n	800195c <HAL_RCC_OscConfig+0xb44>
 800194e:	4b02      	ldr	r3, [pc, #8]	@ (8001958 <HAL_RCC_OscConfig+0xb40>)
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	e017      	b.n	8001984 <HAL_RCC_OscConfig+0xb6c>
 8001954:	40007000 	.word	0x40007000
 8001958:	40021000 	.word	0x40021000
 800195c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001960:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001964:	2202      	movs	r2, #2
 8001966:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001968:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800196c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	fa93 f2a3 	rbit	r2, r3
 8001976:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800197a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	4bb3      	ldr	r3, [pc, #716]	@ (8001c50 <HAL_RCC_OscConfig+0xe38>)
 8001982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001984:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001988:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800198c:	2102      	movs	r1, #2
 800198e:	6011      	str	r1, [r2, #0]
 8001990:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001994:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001998:	6812      	ldr	r2, [r2, #0]
 800199a:	fa92 f1a2 	rbit	r1, r2
 800199e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019a2:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80019a6:	6011      	str	r1, [r2, #0]
  return result;
 80019a8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019ac:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80019b0:	6812      	ldr	r2, [r2, #0]
 80019b2:	fab2 f282 	clz	r2, r2
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	f002 021f 	and.w	r2, r2, #31
 80019c2:	2101      	movs	r1, #1
 80019c4:	fa01 f202 	lsl.w	r2, r1, r2
 80019c8:	4013      	ands	r3, r2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d180      	bne.n	80018d0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019ce:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d105      	bne.n	80019e2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019d6:	4b9e      	ldr	r3, [pc, #632]	@ (8001c50 <HAL_RCC_OscConfig+0xe38>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	4a9d      	ldr	r2, [pc, #628]	@ (8001c50 <HAL_RCC_OscConfig+0xe38>)
 80019dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019e0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019e6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 825e 	beq.w	8001eb0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019f4:	4b96      	ldr	r3, [pc, #600]	@ (8001c50 <HAL_RCC_OscConfig+0xe38>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 030c 	and.w	r3, r3, #12
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	f000 821f 	beq.w	8001e40 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a06:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	f040 8170 	bne.w	8001cf4 <HAL_RCC_OscConfig+0xedc>
 8001a14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a18:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001a1c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a26:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	fa93 f2a3 	rbit	r2, r3
 8001a30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a34:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001a38:	601a      	str	r2, [r3, #0]
  return result;
 8001a3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a3e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001a42:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a44:	fab3 f383 	clz	r3, r3
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a4e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	461a      	mov	r2, r3
 8001a56:	2300      	movs	r3, #0
 8001a58:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5a:	f7fe ff49 	bl	80008f0 <HAL_GetTick>
 8001a5e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a62:	e009      	b.n	8001a78 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a64:	f7fe ff44 	bl	80008f0 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e21c      	b.n	8001eb2 <HAL_RCC_OscConfig+0x109a>
 8001a78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a7c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001a80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a8a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	fa93 f2a3 	rbit	r2, r3
 8001a94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a98:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001a9c:	601a      	str	r2, [r3, #0]
  return result;
 8001a9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aa2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001aa6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa8:	fab3 f383 	clz	r3, r3
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	095b      	lsrs	r3, r3, #5
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d102      	bne.n	8001ac2 <HAL_RCC_OscConfig+0xcaa>
 8001abc:	4b64      	ldr	r3, [pc, #400]	@ (8001c50 <HAL_RCC_OscConfig+0xe38>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	e027      	b.n	8001b12 <HAL_RCC_OscConfig+0xcfa>
 8001ac2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ac6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001aca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ace:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ad4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	fa93 f2a3 	rbit	r2, r3
 8001ade:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ae2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aec:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001af0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001afa:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	fa93 f2a3 	rbit	r2, r3
 8001b04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b08:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	4b50      	ldr	r3, [pc, #320]	@ (8001c50 <HAL_RCC_OscConfig+0xe38>)
 8001b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b12:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b16:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001b1a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001b1e:	6011      	str	r1, [r2, #0]
 8001b20:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b24:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001b28:	6812      	ldr	r2, [r2, #0]
 8001b2a:	fa92 f1a2 	rbit	r1, r2
 8001b2e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b32:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001b36:	6011      	str	r1, [r2, #0]
  return result;
 8001b38:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b3c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001b40:	6812      	ldr	r2, [r2, #0]
 8001b42:	fab2 f282 	clz	r2, r2
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	f042 0220 	orr.w	r2, r2, #32
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	f002 021f 	and.w	r2, r2, #31
 8001b52:	2101      	movs	r1, #1
 8001b54:	fa01 f202 	lsl.w	r2, r1, r2
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d182      	bne.n	8001a64 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b5e:	4b3c      	ldr	r3, [pc, #240]	@ (8001c50 <HAL_RCC_OscConfig+0xe38>)
 8001b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b62:	f023 020f 	bic.w	r2, r3, #15
 8001b66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b6a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b72:	4937      	ldr	r1, [pc, #220]	@ (8001c50 <HAL_RCC_OscConfig+0xe38>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001b78:	4b35      	ldr	r3, [pc, #212]	@ (8001c50 <HAL_RCC_OscConfig+0xe38>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001b80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b84:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6a19      	ldr	r1, [r3, #32]
 8001b8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b90:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	430b      	orrs	r3, r1
 8001b9a:	492d      	ldr	r1, [pc, #180]	@ (8001c50 <HAL_RCC_OscConfig+0xe38>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	604b      	str	r3, [r1, #4]
 8001ba0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ba4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001ba8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001bac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bb2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	fa93 f2a3 	rbit	r2, r3
 8001bbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bc0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001bc4:	601a      	str	r2, [r3, #0]
  return result;
 8001bc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bca:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001bce:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bd0:	fab3 f383 	clz	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001bda:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	461a      	mov	r2, r3
 8001be2:	2301      	movs	r3, #1
 8001be4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be6:	f7fe fe83 	bl	80008f0 <HAL_GetTick>
 8001bea:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bee:	e009      	b.n	8001c04 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf0:	f7fe fe7e 	bl	80008f0 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e156      	b.n	8001eb2 <HAL_RCC_OscConfig+0x109a>
 8001c04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c08:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001c0c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c16:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	fa93 f2a3 	rbit	r2, r3
 8001c20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c24:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001c28:	601a      	str	r2, [r3, #0]
  return result;
 8001c2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c2e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001c32:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c34:	fab3 f383 	clz	r3, r3
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	095b      	lsrs	r3, r3, #5
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d105      	bne.n	8001c54 <HAL_RCC_OscConfig+0xe3c>
 8001c48:	4b01      	ldr	r3, [pc, #4]	@ (8001c50 <HAL_RCC_OscConfig+0xe38>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	e02a      	b.n	8001ca4 <HAL_RCC_OscConfig+0xe8c>
 8001c4e:	bf00      	nop
 8001c50:	40021000 	.word	0x40021000
 8001c54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c58:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c5c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c66:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	fa93 f2a3 	rbit	r2, r3
 8001c70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c74:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c7e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001c82:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c8c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	fa93 f2a3 	rbit	r2, r3
 8001c96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c9a:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	4b86      	ldr	r3, [pc, #536]	@ (8001ebc <HAL_RCC_OscConfig+0x10a4>)
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ca8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001cac:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001cb0:	6011      	str	r1, [r2, #0]
 8001cb2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001cb6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	fa92 f1a2 	rbit	r1, r2
 8001cc0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001cc4:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001cc8:	6011      	str	r1, [r2, #0]
  return result;
 8001cca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001cce:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	fab2 f282 	clz	r2, r2
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	f042 0220 	orr.w	r2, r2, #32
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	f002 021f 	and.w	r2, r2, #31
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f43f af7f 	beq.w	8001bf0 <HAL_RCC_OscConfig+0xdd8>
 8001cf2:	e0dd      	b.n	8001eb0 <HAL_RCC_OscConfig+0x1098>
 8001cf4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cf8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001cfc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001d00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d06:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	fa93 f2a3 	rbit	r2, r3
 8001d10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d14:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001d18:	601a      	str	r2, [r3, #0]
  return result;
 8001d1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d1e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001d22:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d24:	fab3 f383 	clz	r3, r3
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d2e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	461a      	mov	r2, r3
 8001d36:	2300      	movs	r3, #0
 8001d38:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3a:	f7fe fdd9 	bl	80008f0 <HAL_GetTick>
 8001d3e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d42:	e009      	b.n	8001d58 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d44:	f7fe fdd4 	bl	80008f0 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e0ac      	b.n	8001eb2 <HAL_RCC_OscConfig+0x109a>
 8001d58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d5c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001d60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d6a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	fa93 f2a3 	rbit	r2, r3
 8001d74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d78:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001d7c:	601a      	str	r2, [r3, #0]
  return result;
 8001d7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d82:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001d86:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d88:	fab3 f383 	clz	r3, r3
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	095b      	lsrs	r3, r3, #5
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d102      	bne.n	8001da2 <HAL_RCC_OscConfig+0xf8a>
 8001d9c:	4b47      	ldr	r3, [pc, #284]	@ (8001ebc <HAL_RCC_OscConfig+0x10a4>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	e027      	b.n	8001df2 <HAL_RCC_OscConfig+0xfda>
 8001da2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001da6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001daa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001dae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001db4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	fa93 f2a3 	rbit	r2, r3
 8001dbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dc2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dcc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001dd0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dda:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	fa93 f2a3 	rbit	r2, r3
 8001de4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001de8:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	4b33      	ldr	r3, [pc, #204]	@ (8001ebc <HAL_RCC_OscConfig+0x10a4>)
 8001df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001df6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001dfa:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001dfe:	6011      	str	r1, [r2, #0]
 8001e00:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e04:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001e08:	6812      	ldr	r2, [r2, #0]
 8001e0a:	fa92 f1a2 	rbit	r1, r2
 8001e0e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e12:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001e16:	6011      	str	r1, [r2, #0]
  return result;
 8001e18:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e1c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001e20:	6812      	ldr	r2, [r2, #0]
 8001e22:	fab2 f282 	clz	r2, r2
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	f042 0220 	orr.w	r2, r2, #32
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	f002 021f 	and.w	r2, r2, #31
 8001e32:	2101      	movs	r1, #1
 8001e34:	fa01 f202 	lsl.w	r2, r1, r2
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d182      	bne.n	8001d44 <HAL_RCC_OscConfig+0xf2c>
 8001e3e:	e037      	b.n	8001eb0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e44:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e02e      	b.n	8001eb2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e54:	4b19      	ldr	r3, [pc, #100]	@ (8001ebc <HAL_RCC_OscConfig+0x10a4>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001e5c:	4b17      	ldr	r3, [pc, #92]	@ (8001ebc <HAL_RCC_OscConfig+0x10a4>)
 8001e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e60:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e64:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001e68:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001e6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e70:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d117      	bne.n	8001eac <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001e7c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001e80:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001e84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e88:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d10b      	bne.n	8001eac <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001e94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e98:	f003 020f 	and.w	r2, r3, #15
 8001e9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ea0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d001      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e000      	b.n	8001eb2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40021000 	.word	0x40021000

08001ec0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b09e      	sub	sp, #120	@ 0x78
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e162      	b.n	800219e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed8:	4b90      	ldr	r3, [pc, #576]	@ (800211c <HAL_RCC_ClockConfig+0x25c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d910      	bls.n	8001f08 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	4b8d      	ldr	r3, [pc, #564]	@ (800211c <HAL_RCC_ClockConfig+0x25c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 0207 	bic.w	r2, r3, #7
 8001eee:	498b      	ldr	r1, [pc, #556]	@ (800211c <HAL_RCC_ClockConfig+0x25c>)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef6:	4b89      	ldr	r3, [pc, #548]	@ (800211c <HAL_RCC_ClockConfig+0x25c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e14a      	b.n	800219e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d008      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f14:	4b82      	ldr	r3, [pc, #520]	@ (8002120 <HAL_RCC_ClockConfig+0x260>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	497f      	ldr	r1, [pc, #508]	@ (8002120 <HAL_RCC_ClockConfig+0x260>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 80dc 	beq.w	80020ec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d13c      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xf6>
 8001f3c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f40:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f44:	fa93 f3a3 	rbit	r3, r3
 8001f48:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001f4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4c:	fab3 f383 	clz	r3, r3
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d102      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xa6>
 8001f60:	4b6f      	ldr	r3, [pc, #444]	@ (8002120 <HAL_RCC_ClockConfig+0x260>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	e00f      	b.n	8001f86 <HAL_RCC_ClockConfig+0xc6>
 8001f66:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f6a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	667b      	str	r3, [r7, #100]	@ 0x64
 8001f74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f78:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f7c:	fa93 f3a3 	rbit	r3, r3
 8001f80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001f82:	4b67      	ldr	r3, [pc, #412]	@ (8002120 <HAL_RCC_ClockConfig+0x260>)
 8001f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f86:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f8a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001f8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001f8e:	fa92 f2a2 	rbit	r2, r2
 8001f92:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001f94:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001f96:	fab2 f282 	clz	r2, r2
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	f042 0220 	orr.w	r2, r2, #32
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	f002 021f 	and.w	r2, r2, #31
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fac:	4013      	ands	r3, r2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d17b      	bne.n	80020aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e0f3      	b.n	800219e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d13c      	bne.n	8002038 <HAL_RCC_ClockConfig+0x178>
 8001fbe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fc2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001fc6:	fa93 f3a3 	rbit	r3, r3
 8001fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001fcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fce:	fab3 f383 	clz	r3, r3
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	095b      	lsrs	r3, r3, #5
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d102      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x128>
 8001fe2:	4b4f      	ldr	r3, [pc, #316]	@ (8002120 <HAL_RCC_ClockConfig+0x260>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	e00f      	b.n	8002008 <HAL_RCC_ClockConfig+0x148>
 8001fe8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ff0:	fa93 f3a3 	rbit	r3, r3
 8001ff4:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ff6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ffa:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ffc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ffe:	fa93 f3a3 	rbit	r3, r3
 8002002:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002004:	4b46      	ldr	r3, [pc, #280]	@ (8002120 <HAL_RCC_ClockConfig+0x260>)
 8002006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002008:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800200c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800200e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002010:	fa92 f2a2 	rbit	r2, r2
 8002014:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002016:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002018:	fab2 f282 	clz	r2, r2
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	f042 0220 	orr.w	r2, r2, #32
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	f002 021f 	and.w	r2, r2, #31
 8002028:	2101      	movs	r1, #1
 800202a:	fa01 f202 	lsl.w	r2, r1, r2
 800202e:	4013      	ands	r3, r2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d13a      	bne.n	80020aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0b2      	b.n	800219e <HAL_RCC_ClockConfig+0x2de>
 8002038:	2302      	movs	r3, #2
 800203a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	095b      	lsrs	r3, r3, #5
 800204e:	b2db      	uxtb	r3, r3
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b01      	cmp	r3, #1
 8002058:	d102      	bne.n	8002060 <HAL_RCC_ClockConfig+0x1a0>
 800205a:	4b31      	ldr	r3, [pc, #196]	@ (8002120 <HAL_RCC_ClockConfig+0x260>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	e00d      	b.n	800207c <HAL_RCC_ClockConfig+0x1bc>
 8002060:	2302      	movs	r3, #2
 8002062:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002066:	fa93 f3a3 	rbit	r3, r3
 800206a:	627b      	str	r3, [r7, #36]	@ 0x24
 800206c:	2302      	movs	r3, #2
 800206e:	623b      	str	r3, [r7, #32]
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	fa93 f3a3 	rbit	r3, r3
 8002076:	61fb      	str	r3, [r7, #28]
 8002078:	4b29      	ldr	r3, [pc, #164]	@ (8002120 <HAL_RCC_ClockConfig+0x260>)
 800207a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207c:	2202      	movs	r2, #2
 800207e:	61ba      	str	r2, [r7, #24]
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	fa92 f2a2 	rbit	r2, r2
 8002086:	617a      	str	r2, [r7, #20]
  return result;
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	fab2 f282 	clz	r2, r2
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	f042 0220 	orr.w	r2, r2, #32
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	f002 021f 	and.w	r2, r2, #31
 800209a:	2101      	movs	r1, #1
 800209c:	fa01 f202 	lsl.w	r2, r1, r2
 80020a0:	4013      	ands	r3, r2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e079      	b.n	800219e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002120 <HAL_RCC_ClockConfig+0x260>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f023 0203 	bic.w	r2, r3, #3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	491a      	ldr	r1, [pc, #104]	@ (8002120 <HAL_RCC_ClockConfig+0x260>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020bc:	f7fe fc18 	bl	80008f0 <HAL_GetTick>
 80020c0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c2:	e00a      	b.n	80020da <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c4:	f7fe fc14 	bl	80008f0 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e061      	b.n	800219e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020da:	4b11      	ldr	r3, [pc, #68]	@ (8002120 <HAL_RCC_ClockConfig+0x260>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 020c 	and.w	r2, r3, #12
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d1eb      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020ec:	4b0b      	ldr	r3, [pc, #44]	@ (800211c <HAL_RCC_ClockConfig+0x25c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d214      	bcs.n	8002124 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fa:	4b08      	ldr	r3, [pc, #32]	@ (800211c <HAL_RCC_ClockConfig+0x25c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f023 0207 	bic.w	r2, r3, #7
 8002102:	4906      	ldr	r1, [pc, #24]	@ (800211c <HAL_RCC_ClockConfig+0x25c>)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	4313      	orrs	r3, r2
 8002108:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800210a:	4b04      	ldr	r3, [pc, #16]	@ (800211c <HAL_RCC_ClockConfig+0x25c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d005      	beq.n	8002124 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e040      	b.n	800219e <HAL_RCC_ClockConfig+0x2de>
 800211c:	40022000 	.word	0x40022000
 8002120:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d008      	beq.n	8002142 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002130:	4b1d      	ldr	r3, [pc, #116]	@ (80021a8 <HAL_RCC_ClockConfig+0x2e8>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	491a      	ldr	r1, [pc, #104]	@ (80021a8 <HAL_RCC_ClockConfig+0x2e8>)
 800213e:	4313      	orrs	r3, r2
 8002140:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d009      	beq.n	8002162 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800214e:	4b16      	ldr	r3, [pc, #88]	@ (80021a8 <HAL_RCC_ClockConfig+0x2e8>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4912      	ldr	r1, [pc, #72]	@ (80021a8 <HAL_RCC_ClockConfig+0x2e8>)
 800215e:	4313      	orrs	r3, r2
 8002160:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002162:	f000 f829 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 8002166:	4601      	mov	r1, r0
 8002168:	4b0f      	ldr	r3, [pc, #60]	@ (80021a8 <HAL_RCC_ClockConfig+0x2e8>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002170:	22f0      	movs	r2, #240	@ 0xf0
 8002172:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	fa92 f2a2 	rbit	r2, r2
 800217a:	60fa      	str	r2, [r7, #12]
  return result;
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	fab2 f282 	clz	r2, r2
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	40d3      	lsrs	r3, r2
 8002186:	4a09      	ldr	r2, [pc, #36]	@ (80021ac <HAL_RCC_ClockConfig+0x2ec>)
 8002188:	5cd3      	ldrb	r3, [r2, r3]
 800218a:	fa21 f303 	lsr.w	r3, r1, r3
 800218e:	4a08      	ldr	r2, [pc, #32]	@ (80021b0 <HAL_RCC_ClockConfig+0x2f0>)
 8002190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002192:	4b08      	ldr	r3, [pc, #32]	@ (80021b4 <HAL_RCC_ClockConfig+0x2f4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe fb66 	bl	8000868 <HAL_InitTick>
  
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3778      	adds	r7, #120	@ 0x78
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000
 80021ac:	08003a54 	.word	0x08003a54
 80021b0:	20000000 	.word	0x20000000
 80021b4:	20000004 	.word	0x20000004

080021b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	2300      	movs	r3, #0
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	2300      	movs	r3, #0
 80021cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80021d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x98>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f003 030c 	and.w	r3, r3, #12
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d002      	beq.n	80021e8 <HAL_RCC_GetSysClockFreq+0x30>
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d003      	beq.n	80021ee <HAL_RCC_GetSysClockFreq+0x36>
 80021e6:	e029      	b.n	800223c <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002254 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021ea:	613b      	str	r3, [r7, #16]
      break;
 80021ec:	e029      	b.n	8002242 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	0c9b      	lsrs	r3, r3, #18
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	4a18      	ldr	r2, [pc, #96]	@ (8002258 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021f8:	5cd3      	ldrb	r3, [r2, r3]
 80021fa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80021fc:	4b14      	ldr	r3, [pc, #80]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x98>)
 80021fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002200:	f003 030f 	and.w	r3, r3, #15
 8002204:	4a15      	ldr	r2, [pc, #84]	@ (800225c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002206:	5cd3      	ldrb	r3, [r2, r3]
 8002208:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002214:	4a0f      	ldr	r2, [pc, #60]	@ (8002254 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	fbb2 f2f3 	udiv	r2, r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	fb02 f303 	mul.w	r3, r2, r3
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	e007      	b.n	8002236 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002226:	4a0b      	ldr	r2, [pc, #44]	@ (8002254 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	fbb2 f2f3 	udiv	r2, r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	fb02 f303 	mul.w	r3, r2, r3
 8002234:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	613b      	str	r3, [r7, #16]
      break;
 800223a:	e002      	b.n	8002242 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800223c:	4b05      	ldr	r3, [pc, #20]	@ (8002254 <HAL_RCC_GetSysClockFreq+0x9c>)
 800223e:	613b      	str	r3, [r7, #16]
      break;
 8002240:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002242:	693b      	ldr	r3, [r7, #16]
}
 8002244:	4618      	mov	r0, r3
 8002246:	371c      	adds	r7, #28
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	40021000 	.word	0x40021000
 8002254:	007a1200 	.word	0x007a1200
 8002258:	08003a6c 	.word	0x08003a6c
 800225c:	08003a7c 	.word	0x08003a7c

08002260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002264:	4b03      	ldr	r3, [pc, #12]	@ (8002274 <HAL_RCC_GetHCLKFreq+0x14>)
 8002266:	681b      	ldr	r3, [r3, #0]
}
 8002268:	4618      	mov	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	20000000 	.word	0x20000000

08002278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800227e:	f7ff ffef 	bl	8002260 <HAL_RCC_GetHCLKFreq>
 8002282:	4601      	mov	r1, r0
 8002284:	4b0b      	ldr	r3, [pc, #44]	@ (80022b4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800228c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002290:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	fa92 f2a2 	rbit	r2, r2
 8002298:	603a      	str	r2, [r7, #0]
  return result;
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	fab2 f282 	clz	r2, r2
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	40d3      	lsrs	r3, r2
 80022a4:	4a04      	ldr	r2, [pc, #16]	@ (80022b8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80022a6:	5cd3      	ldrb	r3, [r2, r3]
 80022a8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80022ac:	4618      	mov	r0, r3
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40021000 	.word	0x40021000
 80022b8:	08003a64 	.word	0x08003a64

080022bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80022c2:	f7ff ffcd 	bl	8002260 <HAL_RCC_GetHCLKFreq>
 80022c6:	4601      	mov	r1, r0
 80022c8:	4b0b      	ldr	r3, [pc, #44]	@ (80022f8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80022d0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80022d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	fa92 f2a2 	rbit	r2, r2
 80022dc:	603a      	str	r2, [r7, #0]
  return result;
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	fab2 f282 	clz	r2, r2
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	40d3      	lsrs	r3, r2
 80022e8:	4a04      	ldr	r2, [pc, #16]	@ (80022fc <HAL_RCC_GetPCLK2Freq+0x40>)
 80022ea:	5cd3      	ldrb	r3, [r2, r3]
 80022ec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80022f0:	4618      	mov	r0, r3
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021000 	.word	0x40021000
 80022fc:	08003a64 	.word	0x08003a64

08002300 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b092      	sub	sp, #72	@ 0x48
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002310:	2300      	movs	r3, #0
 8002312:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 80d4 	beq.w	80024cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002324:	4b4e      	ldr	r3, [pc, #312]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10e      	bne.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002330:	4b4b      	ldr	r3, [pc, #300]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	4a4a      	ldr	r2, [pc, #296]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002336:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800233a:	61d3      	str	r3, [r2, #28]
 800233c:	4b48      	ldr	r3, [pc, #288]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002344:	60bb      	str	r3, [r7, #8]
 8002346:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002348:	2301      	movs	r3, #1
 800234a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234e:	4b45      	ldr	r3, [pc, #276]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002356:	2b00      	cmp	r3, #0
 8002358:	d118      	bne.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800235a:	4b42      	ldr	r3, [pc, #264]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a41      	ldr	r2, [pc, #260]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002360:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002364:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002366:	f7fe fac3 	bl	80008f0 <HAL_GetTick>
 800236a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236c:	e008      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800236e:	f7fe fabf 	bl	80008f0 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b64      	cmp	r3, #100	@ 0x64
 800237a:	d901      	bls.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e1d6      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002380:	4b38      	ldr	r3, [pc, #224]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0f0      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800238c:	4b34      	ldr	r3, [pc, #208]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002394:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 8084 	beq.w	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d07c      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023ba:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023be:	fa93 f3a3 	rbit	r3, r3
 80023c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80023c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023c6:	fab3 f383 	clz	r3, r3
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	461a      	mov	r2, r3
 80023ce:	4b26      	ldr	r3, [pc, #152]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023d0:	4413      	add	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	461a      	mov	r2, r3
 80023d6:	2301      	movs	r3, #1
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e2:	fa93 f3a3 	rbit	r3, r3
 80023e6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80023e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023ea:	fab3 f383 	clz	r3, r3
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023f4:	4413      	add	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	461a      	mov	r2, r3
 80023fa:	2300      	movs	r3, #0
 80023fc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023fe:	4a18      	ldr	r2, [pc, #96]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002400:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002402:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d04b      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240e:	f7fe fa6f 	bl	80008f0 <HAL_GetTick>
 8002412:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002414:	e00a      	b.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002416:	f7fe fa6b 	bl	80008f0 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002424:	4293      	cmp	r3, r2
 8002426:	d901      	bls.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e180      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800242c:	2302      	movs	r3, #2
 800242e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	627b      	str	r3, [r7, #36]	@ 0x24
 8002438:	2302      	movs	r3, #2
 800243a:	623b      	str	r3, [r7, #32]
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	fa93 f3a3 	rbit	r3, r3
 8002442:	61fb      	str	r3, [r7, #28]
  return result;
 8002444:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002446:	fab3 f383 	clz	r3, r3
 800244a:	b2db      	uxtb	r3, r3
 800244c:	095b      	lsrs	r3, r3, #5
 800244e:	b2db      	uxtb	r3, r3
 8002450:	f043 0302 	orr.w	r3, r3, #2
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d108      	bne.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800245a:	4b01      	ldr	r3, [pc, #4]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	e00d      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002460:	40021000 	.word	0x40021000
 8002464:	40007000 	.word	0x40007000
 8002468:	10908100 	.word	0x10908100
 800246c:	2302      	movs	r3, #2
 800246e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	fa93 f3a3 	rbit	r3, r3
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	4b9a      	ldr	r3, [pc, #616]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800247a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247c:	2202      	movs	r2, #2
 800247e:	613a      	str	r2, [r7, #16]
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	fa92 f2a2 	rbit	r2, r2
 8002486:	60fa      	str	r2, [r7, #12]
  return result;
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	fab2 f282 	clz	r2, r2
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	f002 021f 	and.w	r2, r2, #31
 800249a:	2101      	movs	r1, #1
 800249c:	fa01 f202 	lsl.w	r2, r1, r2
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0b7      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80024a6:	4b8f      	ldr	r3, [pc, #572]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	498c      	ldr	r1, [pc, #560]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024b8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d105      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c0:	4b88      	ldr	r3, [pc, #544]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	4a87      	ldr	r2, [pc, #540]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d008      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024d8:	4b82      	ldr	r3, [pc, #520]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024dc:	f023 0203 	bic.w	r2, r3, #3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	497f      	ldr	r1, [pc, #508]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d008      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024f6:	4b7b      	ldr	r3, [pc, #492]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	4978      	ldr	r1, [pc, #480]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002504:	4313      	orrs	r3, r2
 8002506:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002514:	4b73      	ldr	r3, [pc, #460]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002518:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	4970      	ldr	r1, [pc, #448]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002522:	4313      	orrs	r3, r2
 8002524:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	2b00      	cmp	r3, #0
 8002530:	d008      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002532:	4b6c      	ldr	r3, [pc, #432]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	f023 0210 	bic.w	r2, r3, #16
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	4969      	ldr	r1, [pc, #420]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002540:	4313      	orrs	r3, r2
 8002542:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d008      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002550:	4b64      	ldr	r3, [pc, #400]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800255c:	4961      	ldr	r1, [pc, #388]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800255e:	4313      	orrs	r3, r2
 8002560:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800256a:	2b00      	cmp	r3, #0
 800256c:	d008      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800256e:	4b5d      	ldr	r3, [pc, #372]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002572:	f023 0220 	bic.w	r2, r3, #32
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	495a      	ldr	r1, [pc, #360]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800257c:	4313      	orrs	r3, r2
 800257e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d008      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800258c:	4b55      	ldr	r3, [pc, #340]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800258e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002590:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002598:	4952      	ldr	r1, [pc, #328]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800259a:	4313      	orrs	r3, r2
 800259c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d008      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025aa:	4b4e      	ldr	r3, [pc, #312]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	494b      	ldr	r1, [pc, #300]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0310 	and.w	r3, r3, #16
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025c8:	4b46      	ldr	r3, [pc, #280]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025cc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	4943      	ldr	r1, [pc, #268]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d008      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025e6:	4b3f      	ldr	r3, [pc, #252]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	493c      	ldr	r1, [pc, #240]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002600:	2b00      	cmp	r3, #0
 8002602:	d008      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002604:	4b37      	ldr	r3, [pc, #220]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002608:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002610:	4934      	ldr	r1, [pc, #208]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002612:	4313      	orrs	r3, r2
 8002614:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d008      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002622:	4b30      	ldr	r3, [pc, #192]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002626:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800262e:	492d      	ldr	r1, [pc, #180]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002630:	4313      	orrs	r3, r2
 8002632:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002640:	4b28      	ldr	r3, [pc, #160]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002644:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800264c:	4925      	ldr	r1, [pc, #148]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800264e:	4313      	orrs	r3, r2
 8002650:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d008      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800265e:	4b21      	ldr	r3, [pc, #132]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002662:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	491e      	ldr	r1, [pc, #120]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800266c:	4313      	orrs	r3, r2
 800266e:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800267c:	4b19      	ldr	r3, [pc, #100]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800267e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002680:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002688:	4916      	ldr	r1, [pc, #88]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800268a:	4313      	orrs	r3, r2
 800268c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d008      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800269a:	4b12      	ldr	r3, [pc, #72]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026a6:	490f      	ldr	r1, [pc, #60]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80026b8:	4b0a      	ldr	r3, [pc, #40]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026bc:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c4:	4907      	ldr	r1, [pc, #28]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00c      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80026d6:	4b03      	ldr	r3, [pc, #12]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026da:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	e002      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80026e2:	bf00      	nop
 80026e4:	40021000 	.word	0x40021000
 80026e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026ea:	4913      	ldr	r1, [pc, #76]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d008      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80026fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002700:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002708:	490b      	ldr	r1, [pc, #44]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800270a:	4313      	orrs	r3, r2
 800270c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d008      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800271a:	4b07      	ldr	r3, [pc, #28]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002726:	4904      	ldr	r1, [pc, #16]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002728:	4313      	orrs	r3, r2
 800272a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3748      	adds	r7, #72	@ 0x48
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40021000 	.word	0x40021000

0800273c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e040      	b.n	80027d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002752:	2b00      	cmp	r3, #0
 8002754:	d106      	bne.n	8002764 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7fd ff80 	bl	8000664 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2224      	movs	r2, #36	@ 0x24
 8002768:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0201 	bic.w	r2, r2, #1
 8002778:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277e:	2b00      	cmp	r3, #0
 8002780:	d002      	beq.n	8002788 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 fa86 	bl	8002c94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f8af 	bl	80028ec <UART_SetConfig>
 800278e:	4603      	mov	r3, r0
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e01b      	b.n	80027d0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 fb05 	bl	8002dd8 <UART_CheckIdleState>
 80027ce:	4603      	mov	r3, r0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08a      	sub	sp, #40	@ 0x28
 80027dc:	af02      	add	r7, sp, #8
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	603b      	str	r3, [r7, #0]
 80027e4:	4613      	mov	r3, r2
 80027e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	d177      	bne.n	80028e0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <HAL_UART_Transmit+0x24>
 80027f6:	88fb      	ldrh	r3, [r7, #6]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e070      	b.n	80028e2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2221      	movs	r2, #33	@ 0x21
 800280c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800280e:	f7fe f86f 	bl	80008f0 <HAL_GetTick>
 8002812:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	88fa      	ldrh	r2, [r7, #6]
 8002818:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	88fa      	ldrh	r2, [r7, #6]
 8002820:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800282c:	d108      	bne.n	8002840 <HAL_UART_Transmit+0x68>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d104      	bne.n	8002840 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	61bb      	str	r3, [r7, #24]
 800283e:	e003      	b.n	8002848 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002844:	2300      	movs	r3, #0
 8002846:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002848:	e02f      	b.n	80028aa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	2200      	movs	r2, #0
 8002852:	2180      	movs	r1, #128	@ 0x80
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 fb67 	bl	8002f28 <UART_WaitOnFlagUntilTimeout>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d004      	beq.n	800286a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2220      	movs	r2, #32
 8002864:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e03b      	b.n	80028e2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10b      	bne.n	8002888 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	881a      	ldrh	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800287c:	b292      	uxth	r2, r2
 800287e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	3302      	adds	r3, #2
 8002884:	61bb      	str	r3, [r7, #24]
 8002886:	e007      	b.n	8002898 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	781a      	ldrb	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	3301      	adds	r3, #1
 8002896:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1c9      	bne.n	800284a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2200      	movs	r2, #0
 80028be:	2140      	movs	r1, #64	@ 0x40
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 fb31 	bl	8002f28 <UART_WaitOnFlagUntilTimeout>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d004      	beq.n	80028d6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2220      	movs	r2, #32
 80028d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e005      	b.n	80028e2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2220      	movs	r2, #32
 80028da:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	e000      	b.n	80028e2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80028e0:	2302      	movs	r3, #2
  }
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3720      	adds	r7, #32
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
	...

080028ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028f4:	2300      	movs	r3, #0
 80028f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	431a      	orrs	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	4313      	orrs	r3, r2
 800290e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	4b92      	ldr	r3, [pc, #584]	@ (8002b60 <UART_SetConfig+0x274>)
 8002918:	4013      	ands	r3, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6812      	ldr	r2, [r2, #0]
 800291e:	6979      	ldr	r1, [r7, #20]
 8002920:	430b      	orrs	r3, r1
 8002922:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	4313      	orrs	r3, r2
 8002948:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	430a      	orrs	r2, r1
 800295c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a80      	ldr	r2, [pc, #512]	@ (8002b64 <UART_SetConfig+0x278>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d120      	bne.n	80029aa <UART_SetConfig+0xbe>
 8002968:	4b7f      	ldr	r3, [pc, #508]	@ (8002b68 <UART_SetConfig+0x27c>)
 800296a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296c:	f003 0303 	and.w	r3, r3, #3
 8002970:	2b03      	cmp	r3, #3
 8002972:	d817      	bhi.n	80029a4 <UART_SetConfig+0xb8>
 8002974:	a201      	add	r2, pc, #4	@ (adr r2, 800297c <UART_SetConfig+0x90>)
 8002976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800297a:	bf00      	nop
 800297c:	0800298d 	.word	0x0800298d
 8002980:	08002999 	.word	0x08002999
 8002984:	0800299f 	.word	0x0800299f
 8002988:	08002993 	.word	0x08002993
 800298c:	2301      	movs	r3, #1
 800298e:	77fb      	strb	r3, [r7, #31]
 8002990:	e0b5      	b.n	8002afe <UART_SetConfig+0x212>
 8002992:	2302      	movs	r3, #2
 8002994:	77fb      	strb	r3, [r7, #31]
 8002996:	e0b2      	b.n	8002afe <UART_SetConfig+0x212>
 8002998:	2304      	movs	r3, #4
 800299a:	77fb      	strb	r3, [r7, #31]
 800299c:	e0af      	b.n	8002afe <UART_SetConfig+0x212>
 800299e:	2308      	movs	r3, #8
 80029a0:	77fb      	strb	r3, [r7, #31]
 80029a2:	e0ac      	b.n	8002afe <UART_SetConfig+0x212>
 80029a4:	2310      	movs	r3, #16
 80029a6:	77fb      	strb	r3, [r7, #31]
 80029a8:	e0a9      	b.n	8002afe <UART_SetConfig+0x212>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a6f      	ldr	r2, [pc, #444]	@ (8002b6c <UART_SetConfig+0x280>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d124      	bne.n	80029fe <UART_SetConfig+0x112>
 80029b4:	4b6c      	ldr	r3, [pc, #432]	@ (8002b68 <UART_SetConfig+0x27c>)
 80029b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80029c0:	d011      	beq.n	80029e6 <UART_SetConfig+0xfa>
 80029c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80029c6:	d817      	bhi.n	80029f8 <UART_SetConfig+0x10c>
 80029c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80029cc:	d011      	beq.n	80029f2 <UART_SetConfig+0x106>
 80029ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80029d2:	d811      	bhi.n	80029f8 <UART_SetConfig+0x10c>
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <UART_SetConfig+0xf4>
 80029d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029dc:	d006      	beq.n	80029ec <UART_SetConfig+0x100>
 80029de:	e00b      	b.n	80029f8 <UART_SetConfig+0x10c>
 80029e0:	2300      	movs	r3, #0
 80029e2:	77fb      	strb	r3, [r7, #31]
 80029e4:	e08b      	b.n	8002afe <UART_SetConfig+0x212>
 80029e6:	2302      	movs	r3, #2
 80029e8:	77fb      	strb	r3, [r7, #31]
 80029ea:	e088      	b.n	8002afe <UART_SetConfig+0x212>
 80029ec:	2304      	movs	r3, #4
 80029ee:	77fb      	strb	r3, [r7, #31]
 80029f0:	e085      	b.n	8002afe <UART_SetConfig+0x212>
 80029f2:	2308      	movs	r3, #8
 80029f4:	77fb      	strb	r3, [r7, #31]
 80029f6:	e082      	b.n	8002afe <UART_SetConfig+0x212>
 80029f8:	2310      	movs	r3, #16
 80029fa:	77fb      	strb	r3, [r7, #31]
 80029fc:	e07f      	b.n	8002afe <UART_SetConfig+0x212>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a5b      	ldr	r2, [pc, #364]	@ (8002b70 <UART_SetConfig+0x284>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d124      	bne.n	8002a52 <UART_SetConfig+0x166>
 8002a08:	4b57      	ldr	r3, [pc, #348]	@ (8002b68 <UART_SetConfig+0x27c>)
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8002a10:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002a14:	d011      	beq.n	8002a3a <UART_SetConfig+0x14e>
 8002a16:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002a1a:	d817      	bhi.n	8002a4c <UART_SetConfig+0x160>
 8002a1c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002a20:	d011      	beq.n	8002a46 <UART_SetConfig+0x15a>
 8002a22:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002a26:	d811      	bhi.n	8002a4c <UART_SetConfig+0x160>
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <UART_SetConfig+0x148>
 8002a2c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a30:	d006      	beq.n	8002a40 <UART_SetConfig+0x154>
 8002a32:	e00b      	b.n	8002a4c <UART_SetConfig+0x160>
 8002a34:	2300      	movs	r3, #0
 8002a36:	77fb      	strb	r3, [r7, #31]
 8002a38:	e061      	b.n	8002afe <UART_SetConfig+0x212>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	77fb      	strb	r3, [r7, #31]
 8002a3e:	e05e      	b.n	8002afe <UART_SetConfig+0x212>
 8002a40:	2304      	movs	r3, #4
 8002a42:	77fb      	strb	r3, [r7, #31]
 8002a44:	e05b      	b.n	8002afe <UART_SetConfig+0x212>
 8002a46:	2308      	movs	r3, #8
 8002a48:	77fb      	strb	r3, [r7, #31]
 8002a4a:	e058      	b.n	8002afe <UART_SetConfig+0x212>
 8002a4c:	2310      	movs	r3, #16
 8002a4e:	77fb      	strb	r3, [r7, #31]
 8002a50:	e055      	b.n	8002afe <UART_SetConfig+0x212>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a47      	ldr	r2, [pc, #284]	@ (8002b74 <UART_SetConfig+0x288>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d124      	bne.n	8002aa6 <UART_SetConfig+0x1ba>
 8002a5c:	4b42      	ldr	r3, [pc, #264]	@ (8002b68 <UART_SetConfig+0x27c>)
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a60:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002a64:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002a68:	d011      	beq.n	8002a8e <UART_SetConfig+0x1a2>
 8002a6a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002a6e:	d817      	bhi.n	8002aa0 <UART_SetConfig+0x1b4>
 8002a70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a74:	d011      	beq.n	8002a9a <UART_SetConfig+0x1ae>
 8002a76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a7a:	d811      	bhi.n	8002aa0 <UART_SetConfig+0x1b4>
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <UART_SetConfig+0x19c>
 8002a80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a84:	d006      	beq.n	8002a94 <UART_SetConfig+0x1a8>
 8002a86:	e00b      	b.n	8002aa0 <UART_SetConfig+0x1b4>
 8002a88:	2300      	movs	r3, #0
 8002a8a:	77fb      	strb	r3, [r7, #31]
 8002a8c:	e037      	b.n	8002afe <UART_SetConfig+0x212>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	77fb      	strb	r3, [r7, #31]
 8002a92:	e034      	b.n	8002afe <UART_SetConfig+0x212>
 8002a94:	2304      	movs	r3, #4
 8002a96:	77fb      	strb	r3, [r7, #31]
 8002a98:	e031      	b.n	8002afe <UART_SetConfig+0x212>
 8002a9a:	2308      	movs	r3, #8
 8002a9c:	77fb      	strb	r3, [r7, #31]
 8002a9e:	e02e      	b.n	8002afe <UART_SetConfig+0x212>
 8002aa0:	2310      	movs	r3, #16
 8002aa2:	77fb      	strb	r3, [r7, #31]
 8002aa4:	e02b      	b.n	8002afe <UART_SetConfig+0x212>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a33      	ldr	r2, [pc, #204]	@ (8002b78 <UART_SetConfig+0x28c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d124      	bne.n	8002afa <UART_SetConfig+0x20e>
 8002ab0:	4b2d      	ldr	r3, [pc, #180]	@ (8002b68 <UART_SetConfig+0x27c>)
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002ab8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002abc:	d011      	beq.n	8002ae2 <UART_SetConfig+0x1f6>
 8002abe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ac2:	d817      	bhi.n	8002af4 <UART_SetConfig+0x208>
 8002ac4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ac8:	d011      	beq.n	8002aee <UART_SetConfig+0x202>
 8002aca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ace:	d811      	bhi.n	8002af4 <UART_SetConfig+0x208>
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <UART_SetConfig+0x1f0>
 8002ad4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ad8:	d006      	beq.n	8002ae8 <UART_SetConfig+0x1fc>
 8002ada:	e00b      	b.n	8002af4 <UART_SetConfig+0x208>
 8002adc:	2300      	movs	r3, #0
 8002ade:	77fb      	strb	r3, [r7, #31]
 8002ae0:	e00d      	b.n	8002afe <UART_SetConfig+0x212>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	77fb      	strb	r3, [r7, #31]
 8002ae6:	e00a      	b.n	8002afe <UART_SetConfig+0x212>
 8002ae8:	2304      	movs	r3, #4
 8002aea:	77fb      	strb	r3, [r7, #31]
 8002aec:	e007      	b.n	8002afe <UART_SetConfig+0x212>
 8002aee:	2308      	movs	r3, #8
 8002af0:	77fb      	strb	r3, [r7, #31]
 8002af2:	e004      	b.n	8002afe <UART_SetConfig+0x212>
 8002af4:	2310      	movs	r3, #16
 8002af6:	77fb      	strb	r3, [r7, #31]
 8002af8:	e001      	b.n	8002afe <UART_SetConfig+0x212>
 8002afa:	2310      	movs	r3, #16
 8002afc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b06:	d16b      	bne.n	8002be0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8002b08:	7ffb      	ldrb	r3, [r7, #31]
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d838      	bhi.n	8002b80 <UART_SetConfig+0x294>
 8002b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b14 <UART_SetConfig+0x228>)
 8002b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b14:	08002b39 	.word	0x08002b39
 8002b18:	08002b41 	.word	0x08002b41
 8002b1c:	08002b49 	.word	0x08002b49
 8002b20:	08002b81 	.word	0x08002b81
 8002b24:	08002b4f 	.word	0x08002b4f
 8002b28:	08002b81 	.word	0x08002b81
 8002b2c:	08002b81 	.word	0x08002b81
 8002b30:	08002b81 	.word	0x08002b81
 8002b34:	08002b57 	.word	0x08002b57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b38:	f7ff fb9e 	bl	8002278 <HAL_RCC_GetPCLK1Freq>
 8002b3c:	61b8      	str	r0, [r7, #24]
        break;
 8002b3e:	e024      	b.n	8002b8a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b40:	f7ff fbbc 	bl	80022bc <HAL_RCC_GetPCLK2Freq>
 8002b44:	61b8      	str	r0, [r7, #24]
        break;
 8002b46:	e020      	b.n	8002b8a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b48:	4b0c      	ldr	r3, [pc, #48]	@ (8002b7c <UART_SetConfig+0x290>)
 8002b4a:	61bb      	str	r3, [r7, #24]
        break;
 8002b4c:	e01d      	b.n	8002b8a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b4e:	f7ff fb33 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 8002b52:	61b8      	str	r0, [r7, #24]
        break;
 8002b54:	e019      	b.n	8002b8a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b5a:	61bb      	str	r3, [r7, #24]
        break;
 8002b5c:	e015      	b.n	8002b8a <UART_SetConfig+0x29e>
 8002b5e:	bf00      	nop
 8002b60:	efff69f3 	.word	0xefff69f3
 8002b64:	40013800 	.word	0x40013800
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	40004400 	.word	0x40004400
 8002b70:	40004800 	.word	0x40004800
 8002b74:	40004c00 	.word	0x40004c00
 8002b78:	40005000 	.word	0x40005000
 8002b7c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	77bb      	strb	r3, [r7, #30]
        break;
 8002b88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d073      	beq.n	8002c78 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	005a      	lsls	r2, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	085b      	lsrs	r3, r3, #1
 8002b9a:	441a      	add	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	2b0f      	cmp	r3, #15
 8002baa:	d916      	bls.n	8002bda <UART_SetConfig+0x2ee>
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bb2:	d212      	bcs.n	8002bda <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	f023 030f 	bic.w	r3, r3, #15
 8002bbc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	085b      	lsrs	r3, r3, #1
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	89fb      	ldrh	r3, [r7, #14]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	89fa      	ldrh	r2, [r7, #14]
 8002bd6:	60da      	str	r2, [r3, #12]
 8002bd8:	e04e      	b.n	8002c78 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	77bb      	strb	r3, [r7, #30]
 8002bde:	e04b      	b.n	8002c78 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002be0:	7ffb      	ldrb	r3, [r7, #31]
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d827      	bhi.n	8002c36 <UART_SetConfig+0x34a>
 8002be6:	a201      	add	r2, pc, #4	@ (adr r2, 8002bec <UART_SetConfig+0x300>)
 8002be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bec:	08002c11 	.word	0x08002c11
 8002bf0:	08002c19 	.word	0x08002c19
 8002bf4:	08002c21 	.word	0x08002c21
 8002bf8:	08002c37 	.word	0x08002c37
 8002bfc:	08002c27 	.word	0x08002c27
 8002c00:	08002c37 	.word	0x08002c37
 8002c04:	08002c37 	.word	0x08002c37
 8002c08:	08002c37 	.word	0x08002c37
 8002c0c:	08002c2f 	.word	0x08002c2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c10:	f7ff fb32 	bl	8002278 <HAL_RCC_GetPCLK1Freq>
 8002c14:	61b8      	str	r0, [r7, #24]
        break;
 8002c16:	e013      	b.n	8002c40 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c18:	f7ff fb50 	bl	80022bc <HAL_RCC_GetPCLK2Freq>
 8002c1c:	61b8      	str	r0, [r7, #24]
        break;
 8002c1e:	e00f      	b.n	8002c40 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c20:	4b1b      	ldr	r3, [pc, #108]	@ (8002c90 <UART_SetConfig+0x3a4>)
 8002c22:	61bb      	str	r3, [r7, #24]
        break;
 8002c24:	e00c      	b.n	8002c40 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c26:	f7ff fac7 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 8002c2a:	61b8      	str	r0, [r7, #24]
        break;
 8002c2c:	e008      	b.n	8002c40 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c32:	61bb      	str	r3, [r7, #24]
        break;
 8002c34:	e004      	b.n	8002c40 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	77bb      	strb	r3, [r7, #30]
        break;
 8002c3e:	bf00      	nop
    }

    if (pclk != 0U)
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d018      	beq.n	8002c78 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	085a      	lsrs	r2, r3, #1
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	441a      	add	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c58:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	2b0f      	cmp	r3, #15
 8002c5e:	d909      	bls.n	8002c74 <UART_SetConfig+0x388>
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c66:	d205      	bcs.n	8002c74 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	60da      	str	r2, [r3, #12]
 8002c72:	e001      	b.n	8002c78 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002c84:	7fbb      	ldrb	r3, [r7, #30]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3720      	adds	r7, #32
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	007a1200 	.word	0x007a1200

08002c94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00a      	beq.n	8002cbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00a      	beq.n	8002ce0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00a      	beq.n	8002d02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00a      	beq.n	8002d24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d28:	f003 0310 	and.w	r3, r3, #16
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00a      	beq.n	8002d46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4a:	f003 0320 	and.w	r3, r3, #32
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d01a      	beq.n	8002daa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d92:	d10a      	bne.n	8002daa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00a      	beq.n	8002dcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	605a      	str	r2, [r3, #4]
  }
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b098      	sub	sp, #96	@ 0x60
 8002ddc:	af02      	add	r7, sp, #8
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002de8:	f7fd fd82 	bl	80008f0 <HAL_GetTick>
 8002dec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0308 	and.w	r3, r3, #8
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d12e      	bne.n	8002e5a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dfc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e04:	2200      	movs	r2, #0
 8002e06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f88c 	bl	8002f28 <UART_WaitOnFlagUntilTimeout>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d021      	beq.n	8002e5a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e1e:	e853 3f00 	ldrex	r3, [r3]
 8002e22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	461a      	mov	r2, r3
 8002e32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e34:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e36:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e3c:	e841 2300 	strex	r3, r2, [r1]
 8002e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1e6      	bne.n	8002e16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e062      	b.n	8002f20 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d149      	bne.n	8002efc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e70:	2200      	movs	r2, #0
 8002e72:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f856 	bl	8002f28 <UART_WaitOnFlagUntilTimeout>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d03c      	beq.n	8002efc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8a:	e853 3f00 	ldrex	r3, [r3]
 8002e8e:	623b      	str	r3, [r7, #32]
   return(result);
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ea0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ea2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ea8:	e841 2300 	strex	r3, r2, [r1]
 8002eac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1e6      	bne.n	8002e82 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	3308      	adds	r3, #8
 8002eba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	e853 3f00 	ldrex	r3, [r3]
 8002ec2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f023 0301 	bic.w	r3, r3, #1
 8002eca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	3308      	adds	r3, #8
 8002ed2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ed4:	61fa      	str	r2, [r7, #28]
 8002ed6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed8:	69b9      	ldr	r1, [r7, #24]
 8002eda:	69fa      	ldr	r2, [r7, #28]
 8002edc:	e841 2300 	strex	r3, r2, [r1]
 8002ee0:	617b      	str	r3, [r7, #20]
   return(result);
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1e5      	bne.n	8002eb4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e011      	b.n	8002f20 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2220      	movs	r2, #32
 8002f00:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2220      	movs	r2, #32
 8002f06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3758      	adds	r7, #88	@ 0x58
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	603b      	str	r3, [r7, #0]
 8002f34:	4613      	mov	r3, r2
 8002f36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f38:	e04f      	b.n	8002fda <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f40:	d04b      	beq.n	8002fda <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f42:	f7fd fcd5 	bl	80008f0 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d302      	bcc.n	8002f58 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e04e      	b.n	8002ffa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0304 	and.w	r3, r3, #4
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d037      	beq.n	8002fda <UART_WaitOnFlagUntilTimeout+0xb2>
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2b80      	cmp	r3, #128	@ 0x80
 8002f6e:	d034      	beq.n	8002fda <UART_WaitOnFlagUntilTimeout+0xb2>
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2b40      	cmp	r3, #64	@ 0x40
 8002f74:	d031      	beq.n	8002fda <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d110      	bne.n	8002fa6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2208      	movs	r2, #8
 8002f8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 f838 	bl	8003002 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2208      	movs	r2, #8
 8002f96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e029      	b.n	8002ffa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fb4:	d111      	bne.n	8002fda <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002fbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 f81e 	bl	8003002 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e00f      	b.n	8002ffa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	69da      	ldr	r2, [r3, #28]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	bf0c      	ite	eq
 8002fea:	2301      	moveq	r3, #1
 8002fec:	2300      	movne	r3, #0
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d0a0      	beq.n	8002f3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003002:	b480      	push	{r7}
 8003004:	b095      	sub	sp, #84	@ 0x54
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003012:	e853 3f00 	ldrex	r3, [r3]
 8003016:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800301e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	461a      	mov	r2, r3
 8003026:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003028:	643b      	str	r3, [r7, #64]	@ 0x40
 800302a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800302e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003030:	e841 2300 	strex	r3, r2, [r1]
 8003034:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1e6      	bne.n	800300a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3308      	adds	r3, #8
 8003042:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	e853 3f00 	ldrex	r3, [r3]
 800304a:	61fb      	str	r3, [r7, #28]
   return(result);
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f023 0301 	bic.w	r3, r3, #1
 8003052:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	3308      	adds	r3, #8
 800305a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800305c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800305e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003060:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003062:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003064:	e841 2300 	strex	r3, r2, [r1]
 8003068:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800306a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1e5      	bne.n	800303c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003074:	2b01      	cmp	r3, #1
 8003076:	d118      	bne.n	80030aa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	e853 3f00 	ldrex	r3, [r3]
 8003084:	60bb      	str	r3, [r7, #8]
   return(result);
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	f023 0310 	bic.w	r3, r3, #16
 800308c:	647b      	str	r3, [r7, #68]	@ 0x44
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	461a      	mov	r2, r3
 8003094:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003096:	61bb      	str	r3, [r7, #24]
 8003098:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309a:	6979      	ldr	r1, [r7, #20]
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	e841 2300 	strex	r3, r2, [r1]
 80030a2:	613b      	str	r3, [r7, #16]
   return(result);
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1e6      	bne.n	8003078 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80030be:	bf00      	nop
 80030c0:	3754      	adds	r7, #84	@ 0x54
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
	...

080030cc <sniprintf>:
 80030cc:	b40c      	push	{r2, r3}
 80030ce:	b530      	push	{r4, r5, lr}
 80030d0:	4b17      	ldr	r3, [pc, #92]	@ (8003130 <sniprintf+0x64>)
 80030d2:	1e0c      	subs	r4, r1, #0
 80030d4:	681d      	ldr	r5, [r3, #0]
 80030d6:	b09d      	sub	sp, #116	@ 0x74
 80030d8:	da08      	bge.n	80030ec <sniprintf+0x20>
 80030da:	238b      	movs	r3, #139	@ 0x8b
 80030dc:	602b      	str	r3, [r5, #0]
 80030de:	f04f 30ff 	mov.w	r0, #4294967295
 80030e2:	b01d      	add	sp, #116	@ 0x74
 80030e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80030e8:	b002      	add	sp, #8
 80030ea:	4770      	bx	lr
 80030ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80030f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80030f4:	bf14      	ite	ne
 80030f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80030fa:	4623      	moveq	r3, r4
 80030fc:	9304      	str	r3, [sp, #16]
 80030fe:	9307      	str	r3, [sp, #28]
 8003100:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003104:	9002      	str	r0, [sp, #8]
 8003106:	9006      	str	r0, [sp, #24]
 8003108:	f8ad 3016 	strh.w	r3, [sp, #22]
 800310c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800310e:	ab21      	add	r3, sp, #132	@ 0x84
 8003110:	a902      	add	r1, sp, #8
 8003112:	4628      	mov	r0, r5
 8003114:	9301      	str	r3, [sp, #4]
 8003116:	f000 f995 	bl	8003444 <_svfiprintf_r>
 800311a:	1c43      	adds	r3, r0, #1
 800311c:	bfbc      	itt	lt
 800311e:	238b      	movlt	r3, #139	@ 0x8b
 8003120:	602b      	strlt	r3, [r5, #0]
 8003122:	2c00      	cmp	r4, #0
 8003124:	d0dd      	beq.n	80030e2 <sniprintf+0x16>
 8003126:	9b02      	ldr	r3, [sp, #8]
 8003128:	2200      	movs	r2, #0
 800312a:	701a      	strb	r2, [r3, #0]
 800312c:	e7d9      	b.n	80030e2 <sniprintf+0x16>
 800312e:	bf00      	nop
 8003130:	2000000c 	.word	0x2000000c

08003134 <memset>:
 8003134:	4402      	add	r2, r0
 8003136:	4603      	mov	r3, r0
 8003138:	4293      	cmp	r3, r2
 800313a:	d100      	bne.n	800313e <memset+0xa>
 800313c:	4770      	bx	lr
 800313e:	f803 1b01 	strb.w	r1, [r3], #1
 8003142:	e7f9      	b.n	8003138 <memset+0x4>

08003144 <__errno>:
 8003144:	4b01      	ldr	r3, [pc, #4]	@ (800314c <__errno+0x8>)
 8003146:	6818      	ldr	r0, [r3, #0]
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	2000000c 	.word	0x2000000c

08003150 <__libc_init_array>:
 8003150:	b570      	push	{r4, r5, r6, lr}
 8003152:	4d0d      	ldr	r5, [pc, #52]	@ (8003188 <__libc_init_array+0x38>)
 8003154:	4c0d      	ldr	r4, [pc, #52]	@ (800318c <__libc_init_array+0x3c>)
 8003156:	1b64      	subs	r4, r4, r5
 8003158:	10a4      	asrs	r4, r4, #2
 800315a:	2600      	movs	r6, #0
 800315c:	42a6      	cmp	r6, r4
 800315e:	d109      	bne.n	8003174 <__libc_init_array+0x24>
 8003160:	4d0b      	ldr	r5, [pc, #44]	@ (8003190 <__libc_init_array+0x40>)
 8003162:	4c0c      	ldr	r4, [pc, #48]	@ (8003194 <__libc_init_array+0x44>)
 8003164:	f000 fc66 	bl	8003a34 <_init>
 8003168:	1b64      	subs	r4, r4, r5
 800316a:	10a4      	asrs	r4, r4, #2
 800316c:	2600      	movs	r6, #0
 800316e:	42a6      	cmp	r6, r4
 8003170:	d105      	bne.n	800317e <__libc_init_array+0x2e>
 8003172:	bd70      	pop	{r4, r5, r6, pc}
 8003174:	f855 3b04 	ldr.w	r3, [r5], #4
 8003178:	4798      	blx	r3
 800317a:	3601      	adds	r6, #1
 800317c:	e7ee      	b.n	800315c <__libc_init_array+0xc>
 800317e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003182:	4798      	blx	r3
 8003184:	3601      	adds	r6, #1
 8003186:	e7f2      	b.n	800316e <__libc_init_array+0x1e>
 8003188:	08003ac8 	.word	0x08003ac8
 800318c:	08003ac8 	.word	0x08003ac8
 8003190:	08003ac8 	.word	0x08003ac8
 8003194:	08003acc 	.word	0x08003acc

08003198 <__retarget_lock_acquire_recursive>:
 8003198:	4770      	bx	lr

0800319a <__retarget_lock_release_recursive>:
 800319a:	4770      	bx	lr

0800319c <_free_r>:
 800319c:	b538      	push	{r3, r4, r5, lr}
 800319e:	4605      	mov	r5, r0
 80031a0:	2900      	cmp	r1, #0
 80031a2:	d041      	beq.n	8003228 <_free_r+0x8c>
 80031a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031a8:	1f0c      	subs	r4, r1, #4
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	bfb8      	it	lt
 80031ae:	18e4      	addlt	r4, r4, r3
 80031b0:	f000 f8e0 	bl	8003374 <__malloc_lock>
 80031b4:	4a1d      	ldr	r2, [pc, #116]	@ (800322c <_free_r+0x90>)
 80031b6:	6813      	ldr	r3, [r2, #0]
 80031b8:	b933      	cbnz	r3, 80031c8 <_free_r+0x2c>
 80031ba:	6063      	str	r3, [r4, #4]
 80031bc:	6014      	str	r4, [r2, #0]
 80031be:	4628      	mov	r0, r5
 80031c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031c4:	f000 b8dc 	b.w	8003380 <__malloc_unlock>
 80031c8:	42a3      	cmp	r3, r4
 80031ca:	d908      	bls.n	80031de <_free_r+0x42>
 80031cc:	6820      	ldr	r0, [r4, #0]
 80031ce:	1821      	adds	r1, r4, r0
 80031d0:	428b      	cmp	r3, r1
 80031d2:	bf01      	itttt	eq
 80031d4:	6819      	ldreq	r1, [r3, #0]
 80031d6:	685b      	ldreq	r3, [r3, #4]
 80031d8:	1809      	addeq	r1, r1, r0
 80031da:	6021      	streq	r1, [r4, #0]
 80031dc:	e7ed      	b.n	80031ba <_free_r+0x1e>
 80031de:	461a      	mov	r2, r3
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	b10b      	cbz	r3, 80031e8 <_free_r+0x4c>
 80031e4:	42a3      	cmp	r3, r4
 80031e6:	d9fa      	bls.n	80031de <_free_r+0x42>
 80031e8:	6811      	ldr	r1, [r2, #0]
 80031ea:	1850      	adds	r0, r2, r1
 80031ec:	42a0      	cmp	r0, r4
 80031ee:	d10b      	bne.n	8003208 <_free_r+0x6c>
 80031f0:	6820      	ldr	r0, [r4, #0]
 80031f2:	4401      	add	r1, r0
 80031f4:	1850      	adds	r0, r2, r1
 80031f6:	4283      	cmp	r3, r0
 80031f8:	6011      	str	r1, [r2, #0]
 80031fa:	d1e0      	bne.n	80031be <_free_r+0x22>
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	6053      	str	r3, [r2, #4]
 8003202:	4408      	add	r0, r1
 8003204:	6010      	str	r0, [r2, #0]
 8003206:	e7da      	b.n	80031be <_free_r+0x22>
 8003208:	d902      	bls.n	8003210 <_free_r+0x74>
 800320a:	230c      	movs	r3, #12
 800320c:	602b      	str	r3, [r5, #0]
 800320e:	e7d6      	b.n	80031be <_free_r+0x22>
 8003210:	6820      	ldr	r0, [r4, #0]
 8003212:	1821      	adds	r1, r4, r0
 8003214:	428b      	cmp	r3, r1
 8003216:	bf04      	itt	eq
 8003218:	6819      	ldreq	r1, [r3, #0]
 800321a:	685b      	ldreq	r3, [r3, #4]
 800321c:	6063      	str	r3, [r4, #4]
 800321e:	bf04      	itt	eq
 8003220:	1809      	addeq	r1, r1, r0
 8003222:	6021      	streq	r1, [r4, #0]
 8003224:	6054      	str	r4, [r2, #4]
 8003226:	e7ca      	b.n	80031be <_free_r+0x22>
 8003228:	bd38      	pop	{r3, r4, r5, pc}
 800322a:	bf00      	nop
 800322c:	20000258 	.word	0x20000258

08003230 <sbrk_aligned>:
 8003230:	b570      	push	{r4, r5, r6, lr}
 8003232:	4e0f      	ldr	r6, [pc, #60]	@ (8003270 <sbrk_aligned+0x40>)
 8003234:	460c      	mov	r4, r1
 8003236:	6831      	ldr	r1, [r6, #0]
 8003238:	4605      	mov	r5, r0
 800323a:	b911      	cbnz	r1, 8003242 <sbrk_aligned+0x12>
 800323c:	f000 fba6 	bl	800398c <_sbrk_r>
 8003240:	6030      	str	r0, [r6, #0]
 8003242:	4621      	mov	r1, r4
 8003244:	4628      	mov	r0, r5
 8003246:	f000 fba1 	bl	800398c <_sbrk_r>
 800324a:	1c43      	adds	r3, r0, #1
 800324c:	d103      	bne.n	8003256 <sbrk_aligned+0x26>
 800324e:	f04f 34ff 	mov.w	r4, #4294967295
 8003252:	4620      	mov	r0, r4
 8003254:	bd70      	pop	{r4, r5, r6, pc}
 8003256:	1cc4      	adds	r4, r0, #3
 8003258:	f024 0403 	bic.w	r4, r4, #3
 800325c:	42a0      	cmp	r0, r4
 800325e:	d0f8      	beq.n	8003252 <sbrk_aligned+0x22>
 8003260:	1a21      	subs	r1, r4, r0
 8003262:	4628      	mov	r0, r5
 8003264:	f000 fb92 	bl	800398c <_sbrk_r>
 8003268:	3001      	adds	r0, #1
 800326a:	d1f2      	bne.n	8003252 <sbrk_aligned+0x22>
 800326c:	e7ef      	b.n	800324e <sbrk_aligned+0x1e>
 800326e:	bf00      	nop
 8003270:	20000254 	.word	0x20000254

08003274 <_malloc_r>:
 8003274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003278:	1ccd      	adds	r5, r1, #3
 800327a:	f025 0503 	bic.w	r5, r5, #3
 800327e:	3508      	adds	r5, #8
 8003280:	2d0c      	cmp	r5, #12
 8003282:	bf38      	it	cc
 8003284:	250c      	movcc	r5, #12
 8003286:	2d00      	cmp	r5, #0
 8003288:	4606      	mov	r6, r0
 800328a:	db01      	blt.n	8003290 <_malloc_r+0x1c>
 800328c:	42a9      	cmp	r1, r5
 800328e:	d904      	bls.n	800329a <_malloc_r+0x26>
 8003290:	230c      	movs	r3, #12
 8003292:	6033      	str	r3, [r6, #0]
 8003294:	2000      	movs	r0, #0
 8003296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800329a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003370 <_malloc_r+0xfc>
 800329e:	f000 f869 	bl	8003374 <__malloc_lock>
 80032a2:	f8d8 3000 	ldr.w	r3, [r8]
 80032a6:	461c      	mov	r4, r3
 80032a8:	bb44      	cbnz	r4, 80032fc <_malloc_r+0x88>
 80032aa:	4629      	mov	r1, r5
 80032ac:	4630      	mov	r0, r6
 80032ae:	f7ff ffbf 	bl	8003230 <sbrk_aligned>
 80032b2:	1c43      	adds	r3, r0, #1
 80032b4:	4604      	mov	r4, r0
 80032b6:	d158      	bne.n	800336a <_malloc_r+0xf6>
 80032b8:	f8d8 4000 	ldr.w	r4, [r8]
 80032bc:	4627      	mov	r7, r4
 80032be:	2f00      	cmp	r7, #0
 80032c0:	d143      	bne.n	800334a <_malloc_r+0xd6>
 80032c2:	2c00      	cmp	r4, #0
 80032c4:	d04b      	beq.n	800335e <_malloc_r+0xea>
 80032c6:	6823      	ldr	r3, [r4, #0]
 80032c8:	4639      	mov	r1, r7
 80032ca:	4630      	mov	r0, r6
 80032cc:	eb04 0903 	add.w	r9, r4, r3
 80032d0:	f000 fb5c 	bl	800398c <_sbrk_r>
 80032d4:	4581      	cmp	r9, r0
 80032d6:	d142      	bne.n	800335e <_malloc_r+0xea>
 80032d8:	6821      	ldr	r1, [r4, #0]
 80032da:	1a6d      	subs	r5, r5, r1
 80032dc:	4629      	mov	r1, r5
 80032de:	4630      	mov	r0, r6
 80032e0:	f7ff ffa6 	bl	8003230 <sbrk_aligned>
 80032e4:	3001      	adds	r0, #1
 80032e6:	d03a      	beq.n	800335e <_malloc_r+0xea>
 80032e8:	6823      	ldr	r3, [r4, #0]
 80032ea:	442b      	add	r3, r5
 80032ec:	6023      	str	r3, [r4, #0]
 80032ee:	f8d8 3000 	ldr.w	r3, [r8]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	bb62      	cbnz	r2, 8003350 <_malloc_r+0xdc>
 80032f6:	f8c8 7000 	str.w	r7, [r8]
 80032fa:	e00f      	b.n	800331c <_malloc_r+0xa8>
 80032fc:	6822      	ldr	r2, [r4, #0]
 80032fe:	1b52      	subs	r2, r2, r5
 8003300:	d420      	bmi.n	8003344 <_malloc_r+0xd0>
 8003302:	2a0b      	cmp	r2, #11
 8003304:	d917      	bls.n	8003336 <_malloc_r+0xc2>
 8003306:	1961      	adds	r1, r4, r5
 8003308:	42a3      	cmp	r3, r4
 800330a:	6025      	str	r5, [r4, #0]
 800330c:	bf18      	it	ne
 800330e:	6059      	strne	r1, [r3, #4]
 8003310:	6863      	ldr	r3, [r4, #4]
 8003312:	bf08      	it	eq
 8003314:	f8c8 1000 	streq.w	r1, [r8]
 8003318:	5162      	str	r2, [r4, r5]
 800331a:	604b      	str	r3, [r1, #4]
 800331c:	4630      	mov	r0, r6
 800331e:	f000 f82f 	bl	8003380 <__malloc_unlock>
 8003322:	f104 000b 	add.w	r0, r4, #11
 8003326:	1d23      	adds	r3, r4, #4
 8003328:	f020 0007 	bic.w	r0, r0, #7
 800332c:	1ac2      	subs	r2, r0, r3
 800332e:	bf1c      	itt	ne
 8003330:	1a1b      	subne	r3, r3, r0
 8003332:	50a3      	strne	r3, [r4, r2]
 8003334:	e7af      	b.n	8003296 <_malloc_r+0x22>
 8003336:	6862      	ldr	r2, [r4, #4]
 8003338:	42a3      	cmp	r3, r4
 800333a:	bf0c      	ite	eq
 800333c:	f8c8 2000 	streq.w	r2, [r8]
 8003340:	605a      	strne	r2, [r3, #4]
 8003342:	e7eb      	b.n	800331c <_malloc_r+0xa8>
 8003344:	4623      	mov	r3, r4
 8003346:	6864      	ldr	r4, [r4, #4]
 8003348:	e7ae      	b.n	80032a8 <_malloc_r+0x34>
 800334a:	463c      	mov	r4, r7
 800334c:	687f      	ldr	r7, [r7, #4]
 800334e:	e7b6      	b.n	80032be <_malloc_r+0x4a>
 8003350:	461a      	mov	r2, r3
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	42a3      	cmp	r3, r4
 8003356:	d1fb      	bne.n	8003350 <_malloc_r+0xdc>
 8003358:	2300      	movs	r3, #0
 800335a:	6053      	str	r3, [r2, #4]
 800335c:	e7de      	b.n	800331c <_malloc_r+0xa8>
 800335e:	230c      	movs	r3, #12
 8003360:	6033      	str	r3, [r6, #0]
 8003362:	4630      	mov	r0, r6
 8003364:	f000 f80c 	bl	8003380 <__malloc_unlock>
 8003368:	e794      	b.n	8003294 <_malloc_r+0x20>
 800336a:	6005      	str	r5, [r0, #0]
 800336c:	e7d6      	b.n	800331c <_malloc_r+0xa8>
 800336e:	bf00      	nop
 8003370:	20000258 	.word	0x20000258

08003374 <__malloc_lock>:
 8003374:	4801      	ldr	r0, [pc, #4]	@ (800337c <__malloc_lock+0x8>)
 8003376:	f7ff bf0f 	b.w	8003198 <__retarget_lock_acquire_recursive>
 800337a:	bf00      	nop
 800337c:	20000250 	.word	0x20000250

08003380 <__malloc_unlock>:
 8003380:	4801      	ldr	r0, [pc, #4]	@ (8003388 <__malloc_unlock+0x8>)
 8003382:	f7ff bf0a 	b.w	800319a <__retarget_lock_release_recursive>
 8003386:	bf00      	nop
 8003388:	20000250 	.word	0x20000250

0800338c <__ssputs_r>:
 800338c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003390:	688e      	ldr	r6, [r1, #8]
 8003392:	461f      	mov	r7, r3
 8003394:	42be      	cmp	r6, r7
 8003396:	680b      	ldr	r3, [r1, #0]
 8003398:	4682      	mov	sl, r0
 800339a:	460c      	mov	r4, r1
 800339c:	4690      	mov	r8, r2
 800339e:	d82d      	bhi.n	80033fc <__ssputs_r+0x70>
 80033a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80033a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80033a8:	d026      	beq.n	80033f8 <__ssputs_r+0x6c>
 80033aa:	6965      	ldr	r5, [r4, #20]
 80033ac:	6909      	ldr	r1, [r1, #16]
 80033ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033b2:	eba3 0901 	sub.w	r9, r3, r1
 80033b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80033ba:	1c7b      	adds	r3, r7, #1
 80033bc:	444b      	add	r3, r9
 80033be:	106d      	asrs	r5, r5, #1
 80033c0:	429d      	cmp	r5, r3
 80033c2:	bf38      	it	cc
 80033c4:	461d      	movcc	r5, r3
 80033c6:	0553      	lsls	r3, r2, #21
 80033c8:	d527      	bpl.n	800341a <__ssputs_r+0x8e>
 80033ca:	4629      	mov	r1, r5
 80033cc:	f7ff ff52 	bl	8003274 <_malloc_r>
 80033d0:	4606      	mov	r6, r0
 80033d2:	b360      	cbz	r0, 800342e <__ssputs_r+0xa2>
 80033d4:	6921      	ldr	r1, [r4, #16]
 80033d6:	464a      	mov	r2, r9
 80033d8:	f000 fae8 	bl	80039ac <memcpy>
 80033dc:	89a3      	ldrh	r3, [r4, #12]
 80033de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80033e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033e6:	81a3      	strh	r3, [r4, #12]
 80033e8:	6126      	str	r6, [r4, #16]
 80033ea:	6165      	str	r5, [r4, #20]
 80033ec:	444e      	add	r6, r9
 80033ee:	eba5 0509 	sub.w	r5, r5, r9
 80033f2:	6026      	str	r6, [r4, #0]
 80033f4:	60a5      	str	r5, [r4, #8]
 80033f6:	463e      	mov	r6, r7
 80033f8:	42be      	cmp	r6, r7
 80033fa:	d900      	bls.n	80033fe <__ssputs_r+0x72>
 80033fc:	463e      	mov	r6, r7
 80033fe:	6820      	ldr	r0, [r4, #0]
 8003400:	4632      	mov	r2, r6
 8003402:	4641      	mov	r1, r8
 8003404:	f000 faa8 	bl	8003958 <memmove>
 8003408:	68a3      	ldr	r3, [r4, #8]
 800340a:	1b9b      	subs	r3, r3, r6
 800340c:	60a3      	str	r3, [r4, #8]
 800340e:	6823      	ldr	r3, [r4, #0]
 8003410:	4433      	add	r3, r6
 8003412:	6023      	str	r3, [r4, #0]
 8003414:	2000      	movs	r0, #0
 8003416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800341a:	462a      	mov	r2, r5
 800341c:	f000 fad4 	bl	80039c8 <_realloc_r>
 8003420:	4606      	mov	r6, r0
 8003422:	2800      	cmp	r0, #0
 8003424:	d1e0      	bne.n	80033e8 <__ssputs_r+0x5c>
 8003426:	6921      	ldr	r1, [r4, #16]
 8003428:	4650      	mov	r0, sl
 800342a:	f7ff feb7 	bl	800319c <_free_r>
 800342e:	230c      	movs	r3, #12
 8003430:	f8ca 3000 	str.w	r3, [sl]
 8003434:	89a3      	ldrh	r3, [r4, #12]
 8003436:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800343a:	81a3      	strh	r3, [r4, #12]
 800343c:	f04f 30ff 	mov.w	r0, #4294967295
 8003440:	e7e9      	b.n	8003416 <__ssputs_r+0x8a>
	...

08003444 <_svfiprintf_r>:
 8003444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003448:	4698      	mov	r8, r3
 800344a:	898b      	ldrh	r3, [r1, #12]
 800344c:	061b      	lsls	r3, r3, #24
 800344e:	b09d      	sub	sp, #116	@ 0x74
 8003450:	4607      	mov	r7, r0
 8003452:	460d      	mov	r5, r1
 8003454:	4614      	mov	r4, r2
 8003456:	d510      	bpl.n	800347a <_svfiprintf_r+0x36>
 8003458:	690b      	ldr	r3, [r1, #16]
 800345a:	b973      	cbnz	r3, 800347a <_svfiprintf_r+0x36>
 800345c:	2140      	movs	r1, #64	@ 0x40
 800345e:	f7ff ff09 	bl	8003274 <_malloc_r>
 8003462:	6028      	str	r0, [r5, #0]
 8003464:	6128      	str	r0, [r5, #16]
 8003466:	b930      	cbnz	r0, 8003476 <_svfiprintf_r+0x32>
 8003468:	230c      	movs	r3, #12
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	f04f 30ff 	mov.w	r0, #4294967295
 8003470:	b01d      	add	sp, #116	@ 0x74
 8003472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003476:	2340      	movs	r3, #64	@ 0x40
 8003478:	616b      	str	r3, [r5, #20]
 800347a:	2300      	movs	r3, #0
 800347c:	9309      	str	r3, [sp, #36]	@ 0x24
 800347e:	2320      	movs	r3, #32
 8003480:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003484:	f8cd 800c 	str.w	r8, [sp, #12]
 8003488:	2330      	movs	r3, #48	@ 0x30
 800348a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003628 <_svfiprintf_r+0x1e4>
 800348e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003492:	f04f 0901 	mov.w	r9, #1
 8003496:	4623      	mov	r3, r4
 8003498:	469a      	mov	sl, r3
 800349a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800349e:	b10a      	cbz	r2, 80034a4 <_svfiprintf_r+0x60>
 80034a0:	2a25      	cmp	r2, #37	@ 0x25
 80034a2:	d1f9      	bne.n	8003498 <_svfiprintf_r+0x54>
 80034a4:	ebba 0b04 	subs.w	fp, sl, r4
 80034a8:	d00b      	beq.n	80034c2 <_svfiprintf_r+0x7e>
 80034aa:	465b      	mov	r3, fp
 80034ac:	4622      	mov	r2, r4
 80034ae:	4629      	mov	r1, r5
 80034b0:	4638      	mov	r0, r7
 80034b2:	f7ff ff6b 	bl	800338c <__ssputs_r>
 80034b6:	3001      	adds	r0, #1
 80034b8:	f000 80a7 	beq.w	800360a <_svfiprintf_r+0x1c6>
 80034bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80034be:	445a      	add	r2, fp
 80034c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80034c2:	f89a 3000 	ldrb.w	r3, [sl]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 809f 	beq.w	800360a <_svfiprintf_r+0x1c6>
 80034cc:	2300      	movs	r3, #0
 80034ce:	f04f 32ff 	mov.w	r2, #4294967295
 80034d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034d6:	f10a 0a01 	add.w	sl, sl, #1
 80034da:	9304      	str	r3, [sp, #16]
 80034dc:	9307      	str	r3, [sp, #28]
 80034de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80034e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80034e4:	4654      	mov	r4, sl
 80034e6:	2205      	movs	r2, #5
 80034e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034ec:	484e      	ldr	r0, [pc, #312]	@ (8003628 <_svfiprintf_r+0x1e4>)
 80034ee:	f7fc fe77 	bl	80001e0 <memchr>
 80034f2:	9a04      	ldr	r2, [sp, #16]
 80034f4:	b9d8      	cbnz	r0, 800352e <_svfiprintf_r+0xea>
 80034f6:	06d0      	lsls	r0, r2, #27
 80034f8:	bf44      	itt	mi
 80034fa:	2320      	movmi	r3, #32
 80034fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003500:	0711      	lsls	r1, r2, #28
 8003502:	bf44      	itt	mi
 8003504:	232b      	movmi	r3, #43	@ 0x2b
 8003506:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800350a:	f89a 3000 	ldrb.w	r3, [sl]
 800350e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003510:	d015      	beq.n	800353e <_svfiprintf_r+0xfa>
 8003512:	9a07      	ldr	r2, [sp, #28]
 8003514:	4654      	mov	r4, sl
 8003516:	2000      	movs	r0, #0
 8003518:	f04f 0c0a 	mov.w	ip, #10
 800351c:	4621      	mov	r1, r4
 800351e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003522:	3b30      	subs	r3, #48	@ 0x30
 8003524:	2b09      	cmp	r3, #9
 8003526:	d94b      	bls.n	80035c0 <_svfiprintf_r+0x17c>
 8003528:	b1b0      	cbz	r0, 8003558 <_svfiprintf_r+0x114>
 800352a:	9207      	str	r2, [sp, #28]
 800352c:	e014      	b.n	8003558 <_svfiprintf_r+0x114>
 800352e:	eba0 0308 	sub.w	r3, r0, r8
 8003532:	fa09 f303 	lsl.w	r3, r9, r3
 8003536:	4313      	orrs	r3, r2
 8003538:	9304      	str	r3, [sp, #16]
 800353a:	46a2      	mov	sl, r4
 800353c:	e7d2      	b.n	80034e4 <_svfiprintf_r+0xa0>
 800353e:	9b03      	ldr	r3, [sp, #12]
 8003540:	1d19      	adds	r1, r3, #4
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	9103      	str	r1, [sp, #12]
 8003546:	2b00      	cmp	r3, #0
 8003548:	bfbb      	ittet	lt
 800354a:	425b      	neglt	r3, r3
 800354c:	f042 0202 	orrlt.w	r2, r2, #2
 8003550:	9307      	strge	r3, [sp, #28]
 8003552:	9307      	strlt	r3, [sp, #28]
 8003554:	bfb8      	it	lt
 8003556:	9204      	strlt	r2, [sp, #16]
 8003558:	7823      	ldrb	r3, [r4, #0]
 800355a:	2b2e      	cmp	r3, #46	@ 0x2e
 800355c:	d10a      	bne.n	8003574 <_svfiprintf_r+0x130>
 800355e:	7863      	ldrb	r3, [r4, #1]
 8003560:	2b2a      	cmp	r3, #42	@ 0x2a
 8003562:	d132      	bne.n	80035ca <_svfiprintf_r+0x186>
 8003564:	9b03      	ldr	r3, [sp, #12]
 8003566:	1d1a      	adds	r2, r3, #4
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	9203      	str	r2, [sp, #12]
 800356c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003570:	3402      	adds	r4, #2
 8003572:	9305      	str	r3, [sp, #20]
 8003574:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003638 <_svfiprintf_r+0x1f4>
 8003578:	7821      	ldrb	r1, [r4, #0]
 800357a:	2203      	movs	r2, #3
 800357c:	4650      	mov	r0, sl
 800357e:	f7fc fe2f 	bl	80001e0 <memchr>
 8003582:	b138      	cbz	r0, 8003594 <_svfiprintf_r+0x150>
 8003584:	9b04      	ldr	r3, [sp, #16]
 8003586:	eba0 000a 	sub.w	r0, r0, sl
 800358a:	2240      	movs	r2, #64	@ 0x40
 800358c:	4082      	lsls	r2, r0
 800358e:	4313      	orrs	r3, r2
 8003590:	3401      	adds	r4, #1
 8003592:	9304      	str	r3, [sp, #16]
 8003594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003598:	4824      	ldr	r0, [pc, #144]	@ (800362c <_svfiprintf_r+0x1e8>)
 800359a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800359e:	2206      	movs	r2, #6
 80035a0:	f7fc fe1e 	bl	80001e0 <memchr>
 80035a4:	2800      	cmp	r0, #0
 80035a6:	d036      	beq.n	8003616 <_svfiprintf_r+0x1d2>
 80035a8:	4b21      	ldr	r3, [pc, #132]	@ (8003630 <_svfiprintf_r+0x1ec>)
 80035aa:	bb1b      	cbnz	r3, 80035f4 <_svfiprintf_r+0x1b0>
 80035ac:	9b03      	ldr	r3, [sp, #12]
 80035ae:	3307      	adds	r3, #7
 80035b0:	f023 0307 	bic.w	r3, r3, #7
 80035b4:	3308      	adds	r3, #8
 80035b6:	9303      	str	r3, [sp, #12]
 80035b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80035ba:	4433      	add	r3, r6
 80035bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80035be:	e76a      	b.n	8003496 <_svfiprintf_r+0x52>
 80035c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80035c4:	460c      	mov	r4, r1
 80035c6:	2001      	movs	r0, #1
 80035c8:	e7a8      	b.n	800351c <_svfiprintf_r+0xd8>
 80035ca:	2300      	movs	r3, #0
 80035cc:	3401      	adds	r4, #1
 80035ce:	9305      	str	r3, [sp, #20]
 80035d0:	4619      	mov	r1, r3
 80035d2:	f04f 0c0a 	mov.w	ip, #10
 80035d6:	4620      	mov	r0, r4
 80035d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035dc:	3a30      	subs	r2, #48	@ 0x30
 80035de:	2a09      	cmp	r2, #9
 80035e0:	d903      	bls.n	80035ea <_svfiprintf_r+0x1a6>
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0c6      	beq.n	8003574 <_svfiprintf_r+0x130>
 80035e6:	9105      	str	r1, [sp, #20]
 80035e8:	e7c4      	b.n	8003574 <_svfiprintf_r+0x130>
 80035ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80035ee:	4604      	mov	r4, r0
 80035f0:	2301      	movs	r3, #1
 80035f2:	e7f0      	b.n	80035d6 <_svfiprintf_r+0x192>
 80035f4:	ab03      	add	r3, sp, #12
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	462a      	mov	r2, r5
 80035fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003634 <_svfiprintf_r+0x1f0>)
 80035fc:	a904      	add	r1, sp, #16
 80035fe:	4638      	mov	r0, r7
 8003600:	f3af 8000 	nop.w
 8003604:	1c42      	adds	r2, r0, #1
 8003606:	4606      	mov	r6, r0
 8003608:	d1d6      	bne.n	80035b8 <_svfiprintf_r+0x174>
 800360a:	89ab      	ldrh	r3, [r5, #12]
 800360c:	065b      	lsls	r3, r3, #25
 800360e:	f53f af2d 	bmi.w	800346c <_svfiprintf_r+0x28>
 8003612:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003614:	e72c      	b.n	8003470 <_svfiprintf_r+0x2c>
 8003616:	ab03      	add	r3, sp, #12
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	462a      	mov	r2, r5
 800361c:	4b05      	ldr	r3, [pc, #20]	@ (8003634 <_svfiprintf_r+0x1f0>)
 800361e:	a904      	add	r1, sp, #16
 8003620:	4638      	mov	r0, r7
 8003622:	f000 f879 	bl	8003718 <_printf_i>
 8003626:	e7ed      	b.n	8003604 <_svfiprintf_r+0x1c0>
 8003628:	08003a8c 	.word	0x08003a8c
 800362c:	08003a96 	.word	0x08003a96
 8003630:	00000000 	.word	0x00000000
 8003634:	0800338d 	.word	0x0800338d
 8003638:	08003a92 	.word	0x08003a92

0800363c <_printf_common>:
 800363c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003640:	4616      	mov	r6, r2
 8003642:	4698      	mov	r8, r3
 8003644:	688a      	ldr	r2, [r1, #8]
 8003646:	690b      	ldr	r3, [r1, #16]
 8003648:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800364c:	4293      	cmp	r3, r2
 800364e:	bfb8      	it	lt
 8003650:	4613      	movlt	r3, r2
 8003652:	6033      	str	r3, [r6, #0]
 8003654:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003658:	4607      	mov	r7, r0
 800365a:	460c      	mov	r4, r1
 800365c:	b10a      	cbz	r2, 8003662 <_printf_common+0x26>
 800365e:	3301      	adds	r3, #1
 8003660:	6033      	str	r3, [r6, #0]
 8003662:	6823      	ldr	r3, [r4, #0]
 8003664:	0699      	lsls	r1, r3, #26
 8003666:	bf42      	ittt	mi
 8003668:	6833      	ldrmi	r3, [r6, #0]
 800366a:	3302      	addmi	r3, #2
 800366c:	6033      	strmi	r3, [r6, #0]
 800366e:	6825      	ldr	r5, [r4, #0]
 8003670:	f015 0506 	ands.w	r5, r5, #6
 8003674:	d106      	bne.n	8003684 <_printf_common+0x48>
 8003676:	f104 0a19 	add.w	sl, r4, #25
 800367a:	68e3      	ldr	r3, [r4, #12]
 800367c:	6832      	ldr	r2, [r6, #0]
 800367e:	1a9b      	subs	r3, r3, r2
 8003680:	42ab      	cmp	r3, r5
 8003682:	dc26      	bgt.n	80036d2 <_printf_common+0x96>
 8003684:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003688:	6822      	ldr	r2, [r4, #0]
 800368a:	3b00      	subs	r3, #0
 800368c:	bf18      	it	ne
 800368e:	2301      	movne	r3, #1
 8003690:	0692      	lsls	r2, r2, #26
 8003692:	d42b      	bmi.n	80036ec <_printf_common+0xb0>
 8003694:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003698:	4641      	mov	r1, r8
 800369a:	4638      	mov	r0, r7
 800369c:	47c8      	blx	r9
 800369e:	3001      	adds	r0, #1
 80036a0:	d01e      	beq.n	80036e0 <_printf_common+0xa4>
 80036a2:	6823      	ldr	r3, [r4, #0]
 80036a4:	6922      	ldr	r2, [r4, #16]
 80036a6:	f003 0306 	and.w	r3, r3, #6
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	bf02      	ittt	eq
 80036ae:	68e5      	ldreq	r5, [r4, #12]
 80036b0:	6833      	ldreq	r3, [r6, #0]
 80036b2:	1aed      	subeq	r5, r5, r3
 80036b4:	68a3      	ldr	r3, [r4, #8]
 80036b6:	bf0c      	ite	eq
 80036b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036bc:	2500      	movne	r5, #0
 80036be:	4293      	cmp	r3, r2
 80036c0:	bfc4      	itt	gt
 80036c2:	1a9b      	subgt	r3, r3, r2
 80036c4:	18ed      	addgt	r5, r5, r3
 80036c6:	2600      	movs	r6, #0
 80036c8:	341a      	adds	r4, #26
 80036ca:	42b5      	cmp	r5, r6
 80036cc:	d11a      	bne.n	8003704 <_printf_common+0xc8>
 80036ce:	2000      	movs	r0, #0
 80036d0:	e008      	b.n	80036e4 <_printf_common+0xa8>
 80036d2:	2301      	movs	r3, #1
 80036d4:	4652      	mov	r2, sl
 80036d6:	4641      	mov	r1, r8
 80036d8:	4638      	mov	r0, r7
 80036da:	47c8      	blx	r9
 80036dc:	3001      	adds	r0, #1
 80036de:	d103      	bne.n	80036e8 <_printf_common+0xac>
 80036e0:	f04f 30ff 	mov.w	r0, #4294967295
 80036e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036e8:	3501      	adds	r5, #1
 80036ea:	e7c6      	b.n	800367a <_printf_common+0x3e>
 80036ec:	18e1      	adds	r1, r4, r3
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	2030      	movs	r0, #48	@ 0x30
 80036f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80036f6:	4422      	add	r2, r4
 80036f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80036fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003700:	3302      	adds	r3, #2
 8003702:	e7c7      	b.n	8003694 <_printf_common+0x58>
 8003704:	2301      	movs	r3, #1
 8003706:	4622      	mov	r2, r4
 8003708:	4641      	mov	r1, r8
 800370a:	4638      	mov	r0, r7
 800370c:	47c8      	blx	r9
 800370e:	3001      	adds	r0, #1
 8003710:	d0e6      	beq.n	80036e0 <_printf_common+0xa4>
 8003712:	3601      	adds	r6, #1
 8003714:	e7d9      	b.n	80036ca <_printf_common+0x8e>
	...

08003718 <_printf_i>:
 8003718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800371c:	7e0f      	ldrb	r7, [r1, #24]
 800371e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003720:	2f78      	cmp	r7, #120	@ 0x78
 8003722:	4691      	mov	r9, r2
 8003724:	4680      	mov	r8, r0
 8003726:	460c      	mov	r4, r1
 8003728:	469a      	mov	sl, r3
 800372a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800372e:	d807      	bhi.n	8003740 <_printf_i+0x28>
 8003730:	2f62      	cmp	r7, #98	@ 0x62
 8003732:	d80a      	bhi.n	800374a <_printf_i+0x32>
 8003734:	2f00      	cmp	r7, #0
 8003736:	f000 80d2 	beq.w	80038de <_printf_i+0x1c6>
 800373a:	2f58      	cmp	r7, #88	@ 0x58
 800373c:	f000 80b9 	beq.w	80038b2 <_printf_i+0x19a>
 8003740:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003744:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003748:	e03a      	b.n	80037c0 <_printf_i+0xa8>
 800374a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800374e:	2b15      	cmp	r3, #21
 8003750:	d8f6      	bhi.n	8003740 <_printf_i+0x28>
 8003752:	a101      	add	r1, pc, #4	@ (adr r1, 8003758 <_printf_i+0x40>)
 8003754:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003758:	080037b1 	.word	0x080037b1
 800375c:	080037c5 	.word	0x080037c5
 8003760:	08003741 	.word	0x08003741
 8003764:	08003741 	.word	0x08003741
 8003768:	08003741 	.word	0x08003741
 800376c:	08003741 	.word	0x08003741
 8003770:	080037c5 	.word	0x080037c5
 8003774:	08003741 	.word	0x08003741
 8003778:	08003741 	.word	0x08003741
 800377c:	08003741 	.word	0x08003741
 8003780:	08003741 	.word	0x08003741
 8003784:	080038c5 	.word	0x080038c5
 8003788:	080037ef 	.word	0x080037ef
 800378c:	0800387f 	.word	0x0800387f
 8003790:	08003741 	.word	0x08003741
 8003794:	08003741 	.word	0x08003741
 8003798:	080038e7 	.word	0x080038e7
 800379c:	08003741 	.word	0x08003741
 80037a0:	080037ef 	.word	0x080037ef
 80037a4:	08003741 	.word	0x08003741
 80037a8:	08003741 	.word	0x08003741
 80037ac:	08003887 	.word	0x08003887
 80037b0:	6833      	ldr	r3, [r6, #0]
 80037b2:	1d1a      	adds	r2, r3, #4
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6032      	str	r2, [r6, #0]
 80037b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80037c0:	2301      	movs	r3, #1
 80037c2:	e09d      	b.n	8003900 <_printf_i+0x1e8>
 80037c4:	6833      	ldr	r3, [r6, #0]
 80037c6:	6820      	ldr	r0, [r4, #0]
 80037c8:	1d19      	adds	r1, r3, #4
 80037ca:	6031      	str	r1, [r6, #0]
 80037cc:	0606      	lsls	r6, r0, #24
 80037ce:	d501      	bpl.n	80037d4 <_printf_i+0xbc>
 80037d0:	681d      	ldr	r5, [r3, #0]
 80037d2:	e003      	b.n	80037dc <_printf_i+0xc4>
 80037d4:	0645      	lsls	r5, r0, #25
 80037d6:	d5fb      	bpl.n	80037d0 <_printf_i+0xb8>
 80037d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80037dc:	2d00      	cmp	r5, #0
 80037de:	da03      	bge.n	80037e8 <_printf_i+0xd0>
 80037e0:	232d      	movs	r3, #45	@ 0x2d
 80037e2:	426d      	negs	r5, r5
 80037e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037e8:	4859      	ldr	r0, [pc, #356]	@ (8003950 <_printf_i+0x238>)
 80037ea:	230a      	movs	r3, #10
 80037ec:	e011      	b.n	8003812 <_printf_i+0xfa>
 80037ee:	6821      	ldr	r1, [r4, #0]
 80037f0:	6833      	ldr	r3, [r6, #0]
 80037f2:	0608      	lsls	r0, r1, #24
 80037f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80037f8:	d402      	bmi.n	8003800 <_printf_i+0xe8>
 80037fa:	0649      	lsls	r1, r1, #25
 80037fc:	bf48      	it	mi
 80037fe:	b2ad      	uxthmi	r5, r5
 8003800:	2f6f      	cmp	r7, #111	@ 0x6f
 8003802:	4853      	ldr	r0, [pc, #332]	@ (8003950 <_printf_i+0x238>)
 8003804:	6033      	str	r3, [r6, #0]
 8003806:	bf14      	ite	ne
 8003808:	230a      	movne	r3, #10
 800380a:	2308      	moveq	r3, #8
 800380c:	2100      	movs	r1, #0
 800380e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003812:	6866      	ldr	r6, [r4, #4]
 8003814:	60a6      	str	r6, [r4, #8]
 8003816:	2e00      	cmp	r6, #0
 8003818:	bfa2      	ittt	ge
 800381a:	6821      	ldrge	r1, [r4, #0]
 800381c:	f021 0104 	bicge.w	r1, r1, #4
 8003820:	6021      	strge	r1, [r4, #0]
 8003822:	b90d      	cbnz	r5, 8003828 <_printf_i+0x110>
 8003824:	2e00      	cmp	r6, #0
 8003826:	d04b      	beq.n	80038c0 <_printf_i+0x1a8>
 8003828:	4616      	mov	r6, r2
 800382a:	fbb5 f1f3 	udiv	r1, r5, r3
 800382e:	fb03 5711 	mls	r7, r3, r1, r5
 8003832:	5dc7      	ldrb	r7, [r0, r7]
 8003834:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003838:	462f      	mov	r7, r5
 800383a:	42bb      	cmp	r3, r7
 800383c:	460d      	mov	r5, r1
 800383e:	d9f4      	bls.n	800382a <_printf_i+0x112>
 8003840:	2b08      	cmp	r3, #8
 8003842:	d10b      	bne.n	800385c <_printf_i+0x144>
 8003844:	6823      	ldr	r3, [r4, #0]
 8003846:	07df      	lsls	r7, r3, #31
 8003848:	d508      	bpl.n	800385c <_printf_i+0x144>
 800384a:	6923      	ldr	r3, [r4, #16]
 800384c:	6861      	ldr	r1, [r4, #4]
 800384e:	4299      	cmp	r1, r3
 8003850:	bfde      	ittt	le
 8003852:	2330      	movle	r3, #48	@ 0x30
 8003854:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003858:	f106 36ff 	addle.w	r6, r6, #4294967295
 800385c:	1b92      	subs	r2, r2, r6
 800385e:	6122      	str	r2, [r4, #16]
 8003860:	f8cd a000 	str.w	sl, [sp]
 8003864:	464b      	mov	r3, r9
 8003866:	aa03      	add	r2, sp, #12
 8003868:	4621      	mov	r1, r4
 800386a:	4640      	mov	r0, r8
 800386c:	f7ff fee6 	bl	800363c <_printf_common>
 8003870:	3001      	adds	r0, #1
 8003872:	d14a      	bne.n	800390a <_printf_i+0x1f2>
 8003874:	f04f 30ff 	mov.w	r0, #4294967295
 8003878:	b004      	add	sp, #16
 800387a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800387e:	6823      	ldr	r3, [r4, #0]
 8003880:	f043 0320 	orr.w	r3, r3, #32
 8003884:	6023      	str	r3, [r4, #0]
 8003886:	4833      	ldr	r0, [pc, #204]	@ (8003954 <_printf_i+0x23c>)
 8003888:	2778      	movs	r7, #120	@ 0x78
 800388a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	6831      	ldr	r1, [r6, #0]
 8003892:	061f      	lsls	r7, r3, #24
 8003894:	f851 5b04 	ldr.w	r5, [r1], #4
 8003898:	d402      	bmi.n	80038a0 <_printf_i+0x188>
 800389a:	065f      	lsls	r7, r3, #25
 800389c:	bf48      	it	mi
 800389e:	b2ad      	uxthmi	r5, r5
 80038a0:	6031      	str	r1, [r6, #0]
 80038a2:	07d9      	lsls	r1, r3, #31
 80038a4:	bf44      	itt	mi
 80038a6:	f043 0320 	orrmi.w	r3, r3, #32
 80038aa:	6023      	strmi	r3, [r4, #0]
 80038ac:	b11d      	cbz	r5, 80038b6 <_printf_i+0x19e>
 80038ae:	2310      	movs	r3, #16
 80038b0:	e7ac      	b.n	800380c <_printf_i+0xf4>
 80038b2:	4827      	ldr	r0, [pc, #156]	@ (8003950 <_printf_i+0x238>)
 80038b4:	e7e9      	b.n	800388a <_printf_i+0x172>
 80038b6:	6823      	ldr	r3, [r4, #0]
 80038b8:	f023 0320 	bic.w	r3, r3, #32
 80038bc:	6023      	str	r3, [r4, #0]
 80038be:	e7f6      	b.n	80038ae <_printf_i+0x196>
 80038c0:	4616      	mov	r6, r2
 80038c2:	e7bd      	b.n	8003840 <_printf_i+0x128>
 80038c4:	6833      	ldr	r3, [r6, #0]
 80038c6:	6825      	ldr	r5, [r4, #0]
 80038c8:	6961      	ldr	r1, [r4, #20]
 80038ca:	1d18      	adds	r0, r3, #4
 80038cc:	6030      	str	r0, [r6, #0]
 80038ce:	062e      	lsls	r6, r5, #24
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	d501      	bpl.n	80038d8 <_printf_i+0x1c0>
 80038d4:	6019      	str	r1, [r3, #0]
 80038d6:	e002      	b.n	80038de <_printf_i+0x1c6>
 80038d8:	0668      	lsls	r0, r5, #25
 80038da:	d5fb      	bpl.n	80038d4 <_printf_i+0x1bc>
 80038dc:	8019      	strh	r1, [r3, #0]
 80038de:	2300      	movs	r3, #0
 80038e0:	6123      	str	r3, [r4, #16]
 80038e2:	4616      	mov	r6, r2
 80038e4:	e7bc      	b.n	8003860 <_printf_i+0x148>
 80038e6:	6833      	ldr	r3, [r6, #0]
 80038e8:	1d1a      	adds	r2, r3, #4
 80038ea:	6032      	str	r2, [r6, #0]
 80038ec:	681e      	ldr	r6, [r3, #0]
 80038ee:	6862      	ldr	r2, [r4, #4]
 80038f0:	2100      	movs	r1, #0
 80038f2:	4630      	mov	r0, r6
 80038f4:	f7fc fc74 	bl	80001e0 <memchr>
 80038f8:	b108      	cbz	r0, 80038fe <_printf_i+0x1e6>
 80038fa:	1b80      	subs	r0, r0, r6
 80038fc:	6060      	str	r0, [r4, #4]
 80038fe:	6863      	ldr	r3, [r4, #4]
 8003900:	6123      	str	r3, [r4, #16]
 8003902:	2300      	movs	r3, #0
 8003904:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003908:	e7aa      	b.n	8003860 <_printf_i+0x148>
 800390a:	6923      	ldr	r3, [r4, #16]
 800390c:	4632      	mov	r2, r6
 800390e:	4649      	mov	r1, r9
 8003910:	4640      	mov	r0, r8
 8003912:	47d0      	blx	sl
 8003914:	3001      	adds	r0, #1
 8003916:	d0ad      	beq.n	8003874 <_printf_i+0x15c>
 8003918:	6823      	ldr	r3, [r4, #0]
 800391a:	079b      	lsls	r3, r3, #30
 800391c:	d413      	bmi.n	8003946 <_printf_i+0x22e>
 800391e:	68e0      	ldr	r0, [r4, #12]
 8003920:	9b03      	ldr	r3, [sp, #12]
 8003922:	4298      	cmp	r0, r3
 8003924:	bfb8      	it	lt
 8003926:	4618      	movlt	r0, r3
 8003928:	e7a6      	b.n	8003878 <_printf_i+0x160>
 800392a:	2301      	movs	r3, #1
 800392c:	4632      	mov	r2, r6
 800392e:	4649      	mov	r1, r9
 8003930:	4640      	mov	r0, r8
 8003932:	47d0      	blx	sl
 8003934:	3001      	adds	r0, #1
 8003936:	d09d      	beq.n	8003874 <_printf_i+0x15c>
 8003938:	3501      	adds	r5, #1
 800393a:	68e3      	ldr	r3, [r4, #12]
 800393c:	9903      	ldr	r1, [sp, #12]
 800393e:	1a5b      	subs	r3, r3, r1
 8003940:	42ab      	cmp	r3, r5
 8003942:	dcf2      	bgt.n	800392a <_printf_i+0x212>
 8003944:	e7eb      	b.n	800391e <_printf_i+0x206>
 8003946:	2500      	movs	r5, #0
 8003948:	f104 0619 	add.w	r6, r4, #25
 800394c:	e7f5      	b.n	800393a <_printf_i+0x222>
 800394e:	bf00      	nop
 8003950:	08003a9d 	.word	0x08003a9d
 8003954:	08003aae 	.word	0x08003aae

08003958 <memmove>:
 8003958:	4288      	cmp	r0, r1
 800395a:	b510      	push	{r4, lr}
 800395c:	eb01 0402 	add.w	r4, r1, r2
 8003960:	d902      	bls.n	8003968 <memmove+0x10>
 8003962:	4284      	cmp	r4, r0
 8003964:	4623      	mov	r3, r4
 8003966:	d807      	bhi.n	8003978 <memmove+0x20>
 8003968:	1e43      	subs	r3, r0, #1
 800396a:	42a1      	cmp	r1, r4
 800396c:	d008      	beq.n	8003980 <memmove+0x28>
 800396e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003972:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003976:	e7f8      	b.n	800396a <memmove+0x12>
 8003978:	4402      	add	r2, r0
 800397a:	4601      	mov	r1, r0
 800397c:	428a      	cmp	r2, r1
 800397e:	d100      	bne.n	8003982 <memmove+0x2a>
 8003980:	bd10      	pop	{r4, pc}
 8003982:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003986:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800398a:	e7f7      	b.n	800397c <memmove+0x24>

0800398c <_sbrk_r>:
 800398c:	b538      	push	{r3, r4, r5, lr}
 800398e:	4d06      	ldr	r5, [pc, #24]	@ (80039a8 <_sbrk_r+0x1c>)
 8003990:	2300      	movs	r3, #0
 8003992:	4604      	mov	r4, r0
 8003994:	4608      	mov	r0, r1
 8003996:	602b      	str	r3, [r5, #0]
 8003998:	f7fc fede 	bl	8000758 <_sbrk>
 800399c:	1c43      	adds	r3, r0, #1
 800399e:	d102      	bne.n	80039a6 <_sbrk_r+0x1a>
 80039a0:	682b      	ldr	r3, [r5, #0]
 80039a2:	b103      	cbz	r3, 80039a6 <_sbrk_r+0x1a>
 80039a4:	6023      	str	r3, [r4, #0]
 80039a6:	bd38      	pop	{r3, r4, r5, pc}
 80039a8:	2000024c 	.word	0x2000024c

080039ac <memcpy>:
 80039ac:	440a      	add	r2, r1
 80039ae:	4291      	cmp	r1, r2
 80039b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80039b4:	d100      	bne.n	80039b8 <memcpy+0xc>
 80039b6:	4770      	bx	lr
 80039b8:	b510      	push	{r4, lr}
 80039ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039c2:	4291      	cmp	r1, r2
 80039c4:	d1f9      	bne.n	80039ba <memcpy+0xe>
 80039c6:	bd10      	pop	{r4, pc}

080039c8 <_realloc_r>:
 80039c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039cc:	4680      	mov	r8, r0
 80039ce:	4615      	mov	r5, r2
 80039d0:	460c      	mov	r4, r1
 80039d2:	b921      	cbnz	r1, 80039de <_realloc_r+0x16>
 80039d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039d8:	4611      	mov	r1, r2
 80039da:	f7ff bc4b 	b.w	8003274 <_malloc_r>
 80039de:	b92a      	cbnz	r2, 80039ec <_realloc_r+0x24>
 80039e0:	f7ff fbdc 	bl	800319c <_free_r>
 80039e4:	2400      	movs	r4, #0
 80039e6:	4620      	mov	r0, r4
 80039e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039ec:	f000 f81a 	bl	8003a24 <_malloc_usable_size_r>
 80039f0:	4285      	cmp	r5, r0
 80039f2:	4606      	mov	r6, r0
 80039f4:	d802      	bhi.n	80039fc <_realloc_r+0x34>
 80039f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80039fa:	d8f4      	bhi.n	80039e6 <_realloc_r+0x1e>
 80039fc:	4629      	mov	r1, r5
 80039fe:	4640      	mov	r0, r8
 8003a00:	f7ff fc38 	bl	8003274 <_malloc_r>
 8003a04:	4607      	mov	r7, r0
 8003a06:	2800      	cmp	r0, #0
 8003a08:	d0ec      	beq.n	80039e4 <_realloc_r+0x1c>
 8003a0a:	42b5      	cmp	r5, r6
 8003a0c:	462a      	mov	r2, r5
 8003a0e:	4621      	mov	r1, r4
 8003a10:	bf28      	it	cs
 8003a12:	4632      	movcs	r2, r6
 8003a14:	f7ff ffca 	bl	80039ac <memcpy>
 8003a18:	4621      	mov	r1, r4
 8003a1a:	4640      	mov	r0, r8
 8003a1c:	f7ff fbbe 	bl	800319c <_free_r>
 8003a20:	463c      	mov	r4, r7
 8003a22:	e7e0      	b.n	80039e6 <_realloc_r+0x1e>

08003a24 <_malloc_usable_size_r>:
 8003a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a28:	1f18      	subs	r0, r3, #4
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	bfbc      	itt	lt
 8003a2e:	580b      	ldrlt	r3, [r1, r0]
 8003a30:	18c0      	addlt	r0, r0, r3
 8003a32:	4770      	bx	lr

08003a34 <_init>:
 8003a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a36:	bf00      	nop
 8003a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a3a:	bc08      	pop	{r3}
 8003a3c:	469e      	mov	lr, r3
 8003a3e:	4770      	bx	lr

08003a40 <_fini>:
 8003a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a42:	bf00      	nop
 8003a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a46:	bc08      	pop	{r3}
 8003a48:	469e      	mov	lr, r3
 8003a4a:	4770      	bx	lr
