
Button_V0.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003748  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080038dc  080038dc  000048dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003914  08003914  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003914  08003914  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003914  08003914  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003914  08003914  00004914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003918  08003918  00004918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800391c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000000f8  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000104  20000104  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000de3f  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b09  00000000  00000000  00012e7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be0  00000000  00000000  00014988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000095b  00000000  00000000  00015568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fcce  00000000  00000000  00015ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f3b2  00000000  00000000  00035b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c64c8  00000000  00000000  00044f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010b40b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000320c  00000000  00000000  0010b450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0010e65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080038c4 	.word	0x080038c4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080038c4 	.word	0x080038c4

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 faaa 	bl	8000730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f83c 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f922 	bl	8000428 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e4:	f000 f8f0 	bl	80003c8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80001e8:	f000 f898 	bl	800031c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Start Timer 2 in interrupt mode
      HAL_TIM_Base_Start_IT(&htim2);
 80001ec:	4818      	ldr	r0, [pc, #96]	@ (8000250 <main+0x7c>)
 80001ee:	f002 faa3 	bl	8002738 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (ms_counter >= 500 && ms_counter <= 1000)
 80001f2:	4b18      	ldr	r3, [pc, #96]	@ (8000254 <main+0x80>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80001fa:	d312      	bcc.n	8000222 <main+0x4e>
 80001fc:	4b15      	ldr	r3, [pc, #84]	@ (8000254 <main+0x80>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000204:	d80d      	bhi.n	8000222 <main+0x4e>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000206:	2201      	movs	r2, #1
 8000208:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800020c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000210:	f000 fd90 	bl	8000d34 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000214:	2201      	movs	r2, #1
 8000216:	2120      	movs	r1, #32
 8000218:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800021c:	f000 fd8a 	bl	8000d34 <HAL_GPIO_WritePin>
 8000220:	e014      	b.n	800024c <main+0x78>
	  }
	  else if(ms_counter >= 1000)
 8000222:	4b0c      	ldr	r3, [pc, #48]	@ (8000254 <main+0x80>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800022a:	d3e2      	bcc.n	80001f2 <main+0x1e>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800022c:	2200      	movs	r2, #0
 800022e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000232:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000236:	f000 fd7d 	bl	8000d34 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800023a:	2200      	movs	r2, #0
 800023c:	2120      	movs	r1, #32
 800023e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000242:	f000 fd77 	bl	8000d34 <HAL_GPIO_WritePin>
		  ms_counter = 0;
 8000246:	4b03      	ldr	r3, [pc, #12]	@ (8000254 <main+0x80>)
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
	  if (ms_counter >= 500 && ms_counter <= 1000)
 800024c:	e7d1      	b.n	80001f2 <main+0x1e>
 800024e:	bf00      	nop
 8000250:	2000002c 	.word	0x2000002c
 8000254:	20000028 	.word	0x20000028

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b0a6      	sub	sp, #152	@ 0x98
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000262:	2228      	movs	r2, #40	@ 0x28
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f003 faff 	bl	800386a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	605a      	str	r2, [r3, #4]
 8000276:	609a      	str	r2, [r3, #8]
 8000278:	60da      	str	r2, [r3, #12]
 800027a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	2258      	movs	r2, #88	@ 0x58
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f003 faf1 	bl	800386a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000288:	2302      	movs	r3, #2
 800028a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028c:	2301      	movs	r3, #1
 800028e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000290:	2310      	movs	r3, #16
 8000292:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000296:	2302      	movs	r3, #2
 8000298:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800029c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80002a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002a4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 fd54 	bl	8000d64 <HAL_RCC_OscConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002c2:	f000 f919 	bl	80004f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c6:	230f      	movs	r3, #15
 80002c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ca:	2302      	movs	r3, #2
 80002cc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002d6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002dc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80002e0:	2102      	movs	r1, #2
 80002e2:	4618      	mov	r0, r3
 80002e4:	f001 fd92 	bl	8001e0c <HAL_RCC_ClockConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002ee:	f000 f903 	bl	80004f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM2;
 80002f2:	4b09      	ldr	r3, [pc, #36]	@ (8000318 <SystemClock_Config+0xc0>)
 80002f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80002fa:	2300      	movs	r3, #0
 80002fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	4618      	mov	r0, r3
 8000302:	f001 ffa3 	bl	800224c <HAL_RCCEx_PeriphCLKConfig>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800030c:	f000 f8f4 	bl	80004f8 <Error_Handler>
  }
}
 8000310:	bf00      	nop
 8000312:	3798      	adds	r7, #152	@ 0x98
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	00100002 	.word	0x00100002

0800031c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b088      	sub	sp, #32
 8000320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000322:	f107 0310 	add.w	r3, r7, #16
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
 800032e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800033a:	4b22      	ldr	r3, [pc, #136]	@ (80003c4 <MX_TIM2_Init+0xa8>)
 800033c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000340:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8000342:	4b20      	ldr	r3, [pc, #128]	@ (80003c4 <MX_TIM2_Init+0xa8>)
 8000344:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000348:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800034a:	4b1e      	ldr	r3, [pc, #120]	@ (80003c4 <MX_TIM2_Init+0xa8>)
 800034c:	2200      	movs	r2, #0
 800034e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000350:	4b1c      	ldr	r3, [pc, #112]	@ (80003c4 <MX_TIM2_Init+0xa8>)
 8000352:	2209      	movs	r2, #9
 8000354:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000356:	4b1b      	ldr	r3, [pc, #108]	@ (80003c4 <MX_TIM2_Init+0xa8>)
 8000358:	2200      	movs	r2, #0
 800035a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800035c:	4b19      	ldr	r3, [pc, #100]	@ (80003c4 <MX_TIM2_Init+0xa8>)
 800035e:	2280      	movs	r2, #128	@ 0x80
 8000360:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000362:	4818      	ldr	r0, [pc, #96]	@ (80003c4 <MX_TIM2_Init+0xa8>)
 8000364:	f002 f990 	bl	8002688 <HAL_TIM_Base_Init>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800036e:	f000 f8c3 	bl	80004f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000372:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000376:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000378:	f107 0310 	add.w	r3, r7, #16
 800037c:	4619      	mov	r1, r3
 800037e:	4811      	ldr	r0, [pc, #68]	@ (80003c4 <MX_TIM2_Init+0xa8>)
 8000380:	f002 fb4c 	bl	8002a1c <HAL_TIM_ConfigClockSource>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800038a:	f000 f8b5 	bl	80004f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800038e:	2300      	movs	r3, #0
 8000390:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000392:	2300      	movs	r3, #0
 8000394:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	4619      	mov	r1, r3
 800039a:	480a      	ldr	r0, [pc, #40]	@ (80003c4 <MX_TIM2_Init+0xa8>)
 800039c:	f002 fd7e 	bl	8002e9c <HAL_TIMEx_MasterConfigSynchronization>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80003a6:	f000 f8a7 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  	  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);  // Set priority (highest priority)
 80003aa:	2200      	movs	r2, #0
 80003ac:	2100      	movs	r1, #0
 80003ae:	201c      	movs	r0, #28
 80003b0:	f000 faff 	bl	80009b2 <HAL_NVIC_SetPriority>
  	  HAL_NVIC_EnableIRQ(TIM2_IRQn);           // Enable the interrupt in the NVIC
 80003b4:	201c      	movs	r0, #28
 80003b6:	f000 fb18 	bl	80009ea <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_Init 2 */

}
 80003ba:	bf00      	nop
 80003bc:	3720      	adds	r7, #32
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	2000002c 	.word	0x2000002c

080003c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003cc:	4b14      	ldr	r3, [pc, #80]	@ (8000420 <MX_USART2_UART_Init+0x58>)
 80003ce:	4a15      	ldr	r2, [pc, #84]	@ (8000424 <MX_USART2_UART_Init+0x5c>)
 80003d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003d2:	4b13      	ldr	r3, [pc, #76]	@ (8000420 <MX_USART2_UART_Init+0x58>)
 80003d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003da:	4b11      	ldr	r3, [pc, #68]	@ (8000420 <MX_USART2_UART_Init+0x58>)
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000420 <MX_USART2_UART_Init+0x58>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000420 <MX_USART2_UART_Init+0x58>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000420 <MX_USART2_UART_Init+0x58>)
 80003ee:	220c      	movs	r2, #12
 80003f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000420 <MX_USART2_UART_Init+0x58>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f8:	4b09      	ldr	r3, [pc, #36]	@ (8000420 <MX_USART2_UART_Init+0x58>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003fe:	4b08      	ldr	r3, [pc, #32]	@ (8000420 <MX_USART2_UART_Init+0x58>)
 8000400:	2200      	movs	r2, #0
 8000402:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000404:	4b06      	ldr	r3, [pc, #24]	@ (8000420 <MX_USART2_UART_Init+0x58>)
 8000406:	2200      	movs	r2, #0
 8000408:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800040a:	4805      	ldr	r0, [pc, #20]	@ (8000420 <MX_USART2_UART_Init+0x58>)
 800040c:	f002 fdf0 	bl	8002ff0 <HAL_UART_Init>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000416:	f000 f86f 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800041a:	bf00      	nop
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	20000078 	.word	0x20000078
 8000424:	40004400 	.word	0x40004400

08000428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b08a      	sub	sp, #40	@ 0x28
 800042c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042e:	f107 0314 	add.w	r3, r7, #20
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
 800043a:	60da      	str	r2, [r3, #12]
 800043c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800043e:	4b2c      	ldr	r3, [pc, #176]	@ (80004f0 <MX_GPIO_Init+0xc8>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	4a2b      	ldr	r2, [pc, #172]	@ (80004f0 <MX_GPIO_Init+0xc8>)
 8000444:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000448:	6153      	str	r3, [r2, #20]
 800044a:	4b29      	ldr	r3, [pc, #164]	@ (80004f0 <MX_GPIO_Init+0xc8>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000452:	613b      	str	r3, [r7, #16]
 8000454:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000456:	4b26      	ldr	r3, [pc, #152]	@ (80004f0 <MX_GPIO_Init+0xc8>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	4a25      	ldr	r2, [pc, #148]	@ (80004f0 <MX_GPIO_Init+0xc8>)
 800045c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000460:	6153      	str	r3, [r2, #20]
 8000462:	4b23      	ldr	r3, [pc, #140]	@ (80004f0 <MX_GPIO_Init+0xc8>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800046e:	4b20      	ldr	r3, [pc, #128]	@ (80004f0 <MX_GPIO_Init+0xc8>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	4a1f      	ldr	r2, [pc, #124]	@ (80004f0 <MX_GPIO_Init+0xc8>)
 8000474:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000478:	6153      	str	r3, [r2, #20]
 800047a:	4b1d      	ldr	r3, [pc, #116]	@ (80004f0 <MX_GPIO_Init+0xc8>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000482:	60bb      	str	r3, [r7, #8]
 8000484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000486:	4b1a      	ldr	r3, [pc, #104]	@ (80004f0 <MX_GPIO_Init+0xc8>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	4a19      	ldr	r2, [pc, #100]	@ (80004f0 <MX_GPIO_Init+0xc8>)
 800048c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000490:	6153      	str	r3, [r2, #20]
 8000492:	4b17      	ldr	r3, [pc, #92]	@ (80004f0 <MX_GPIO_Init+0xc8>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80004a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004a8:	f000 fc44 	bl	8000d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004b2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80004b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b8:	2300      	movs	r3, #0
 80004ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004bc:	f107 0314 	add.w	r3, r7, #20
 80004c0:	4619      	mov	r1, r3
 80004c2:	480c      	ldr	r0, [pc, #48]	@ (80004f4 <MX_GPIO_Init+0xcc>)
 80004c4:	f000 faac 	bl	8000a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 80004c8:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80004cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ce:	2301      	movs	r3, #1
 80004d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	2300      	movs	r3, #0
 80004d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d6:	2300      	movs	r3, #0
 80004d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004da:	f107 0314 	add.w	r3, r7, #20
 80004de:	4619      	mov	r1, r3
 80004e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004e4:	f000 fa9c 	bl	8000a20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004e8:	bf00      	nop
 80004ea:	3728      	adds	r7, #40	@ 0x28
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40021000 	.word	0x40021000
 80004f4:	48000800 	.word	0x48000800

080004f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004fc:	b672      	cpsid	i
}
 80004fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000500:	bf00      	nop
 8000502:	e7fd      	b.n	8000500 <Error_Handler+0x8>

08000504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800050a:	4b0f      	ldr	r3, [pc, #60]	@ (8000548 <HAL_MspInit+0x44>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	4a0e      	ldr	r2, [pc, #56]	@ (8000548 <HAL_MspInit+0x44>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	6193      	str	r3, [r2, #24]
 8000516:	4b0c      	ldr	r3, [pc, #48]	@ (8000548 <HAL_MspInit+0x44>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000522:	4b09      	ldr	r3, [pc, #36]	@ (8000548 <HAL_MspInit+0x44>)
 8000524:	69db      	ldr	r3, [r3, #28]
 8000526:	4a08      	ldr	r2, [pc, #32]	@ (8000548 <HAL_MspInit+0x44>)
 8000528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800052c:	61d3      	str	r3, [r2, #28]
 800052e:	4b06      	ldr	r3, [pc, #24]	@ (8000548 <HAL_MspInit+0x44>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800053a:	2007      	movs	r0, #7
 800053c:	f000 fa2e 	bl	800099c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40021000 	.word	0x40021000

0800054c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800055c:	d113      	bne.n	8000586 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800055e:	4b0c      	ldr	r3, [pc, #48]	@ (8000590 <HAL_TIM_Base_MspInit+0x44>)
 8000560:	69db      	ldr	r3, [r3, #28]
 8000562:	4a0b      	ldr	r2, [pc, #44]	@ (8000590 <HAL_TIM_Base_MspInit+0x44>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	61d3      	str	r3, [r2, #28]
 800056a:	4b09      	ldr	r3, [pc, #36]	@ (8000590 <HAL_TIM_Base_MspInit+0x44>)
 800056c:	69db      	ldr	r3, [r3, #28]
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000576:	2200      	movs	r2, #0
 8000578:	2100      	movs	r1, #0
 800057a:	201c      	movs	r0, #28
 800057c:	f000 fa19 	bl	80009b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000580:	201c      	movs	r0, #28
 8000582:	f000 fa32 	bl	80009ea <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000586:	bf00      	nop
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40021000 	.word	0x40021000

08000594 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	@ 0x28
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a17      	ldr	r2, [pc, #92]	@ (8000610 <HAL_UART_MspInit+0x7c>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d128      	bne.n	8000608 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005b6:	4b17      	ldr	r3, [pc, #92]	@ (8000614 <HAL_UART_MspInit+0x80>)
 80005b8:	69db      	ldr	r3, [r3, #28]
 80005ba:	4a16      	ldr	r2, [pc, #88]	@ (8000614 <HAL_UART_MspInit+0x80>)
 80005bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005c0:	61d3      	str	r3, [r2, #28]
 80005c2:	4b14      	ldr	r3, [pc, #80]	@ (8000614 <HAL_UART_MspInit+0x80>)
 80005c4:	69db      	ldr	r3, [r3, #28]
 80005c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005ca:	613b      	str	r3, [r7, #16]
 80005cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ce:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <HAL_UART_MspInit+0x80>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	4a10      	ldr	r2, [pc, #64]	@ (8000614 <HAL_UART_MspInit+0x80>)
 80005d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005d8:	6153      	str	r3, [r2, #20]
 80005da:	4b0e      	ldr	r3, [pc, #56]	@ (8000614 <HAL_UART_MspInit+0x80>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005e6:	230c      	movs	r3, #12
 80005e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ea:	2302      	movs	r3, #2
 80005ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	2300      	movs	r3, #0
 80005f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005f6:	2307      	movs	r3, #7
 80005f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4619      	mov	r1, r3
 8000600:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000604:	f000 fa0c 	bl	8000a20 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000608:	bf00      	nop
 800060a:	3728      	adds	r7, #40	@ 0x28
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40004400 	.word	0x40004400
 8000614:	40021000 	.word	0x40021000

08000618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800061c:	bf00      	nop
 800061e:	e7fd      	b.n	800061c <NMI_Handler+0x4>

08000620 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <HardFault_Handler+0x4>

08000628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800062c:	bf00      	nop
 800062e:	e7fd      	b.n	800062c <MemManage_Handler+0x4>

08000630 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <BusFault_Handler+0x4>

08000638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800063c:	bf00      	nop
 800063e:	e7fd      	b.n	800063c <UsageFault_Handler+0x4>

08000640 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr

0800064e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000652:	bf00      	nop
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr

0800065c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr

0800066a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800066e:	f000 f8a5 	bl	80007bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800067c:	480c      	ldr	r0, [pc, #48]	@ (80006b0 <TIM2_IRQHandler+0x38>)
 800067e:	f002 f8cb 	bl	8002818 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  // Check if the update interrupt flag is set
      if (TIM2->SR & TIM_SR_UIF) {
 8000682:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	f003 0301 	and.w	r3, r3, #1
 800068c:	2b00      	cmp	r3, #0
 800068e:	d00c      	beq.n	80006aa <TIM2_IRQHandler+0x32>
          // Clear the interrupt flag
          TIM2->SR &= ~TIM_SR_UIF;
 8000690:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000694:	691b      	ldr	r3, [r3, #16]
 8000696:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800069a:	f023 0301 	bic.w	r3, r3, #1
 800069e:	6113      	str	r3, [r2, #16]

          ms_counter ++;
 80006a0:	4b04      	ldr	r3, [pc, #16]	@ (80006b4 <TIM2_IRQHandler+0x3c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	3301      	adds	r3, #1
 80006a6:	4a03      	ldr	r2, [pc, #12]	@ (80006b4 <TIM2_IRQHandler+0x3c>)
 80006a8:	6013      	str	r3, [r2, #0]

      }

  /* USER CODE END TIM2_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	2000002c 	.word	0x2000002c
 80006b4:	20000028 	.word	0x20000028

080006b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006bc:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <SystemInit+0x20>)
 80006be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006c2:	4a05      	ldr	r2, [pc, #20]	@ (80006d8 <SystemInit+0x20>)
 80006c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000714 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006e0:	f7ff ffea 	bl	80006b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e4:	480c      	ldr	r0, [pc, #48]	@ (8000718 <LoopForever+0x6>)
  ldr r1, =_edata
 80006e6:	490d      	ldr	r1, [pc, #52]	@ (800071c <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000720 <LoopForever+0xe>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ec:	e002      	b.n	80006f4 <LoopCopyDataInit>

080006ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f2:	3304      	adds	r3, #4

080006f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f8:	d3f9      	bcc.n	80006ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000724 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000728 <LoopForever+0x16>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000700:	e001      	b.n	8000706 <LoopFillZerobss>

08000702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000704:	3204      	adds	r2, #4

08000706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000708:	d3fb      	bcc.n	8000702 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800070a:	f003 f8b7 	bl	800387c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800070e:	f7ff fd61 	bl	80001d4 <main>

08000712 <LoopForever>:

LoopForever:
    b LoopForever
 8000712:	e7fe      	b.n	8000712 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000714:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800071c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000720:	0800391c 	.word	0x0800391c
  ldr r2, =_sbss
 8000724:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000728:	20000104 	.word	0x20000104

0800072c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800072c:	e7fe      	b.n	800072c <ADC1_2_IRQHandler>
	...

08000730 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000734:	4b08      	ldr	r3, [pc, #32]	@ (8000758 <HAL_Init+0x28>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a07      	ldr	r2, [pc, #28]	@ (8000758 <HAL_Init+0x28>)
 800073a:	f043 0310 	orr.w	r3, r3, #16
 800073e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000740:	2003      	movs	r0, #3
 8000742:	f000 f92b 	bl	800099c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000746:	2000      	movs	r0, #0
 8000748:	f000 f808 	bl	800075c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800074c:	f7ff feda 	bl	8000504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40022000 	.word	0x40022000

0800075c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000764:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <HAL_InitTick+0x54>)
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <HAL_InitTick+0x58>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	4619      	mov	r1, r3
 800076e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000772:	fbb3 f3f1 	udiv	r3, r3, r1
 8000776:	fbb2 f3f3 	udiv	r3, r2, r3
 800077a:	4618      	mov	r0, r3
 800077c:	f000 f943 	bl	8000a06 <HAL_SYSTICK_Config>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000786:	2301      	movs	r3, #1
 8000788:	e00e      	b.n	80007a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b0f      	cmp	r3, #15
 800078e:	d80a      	bhi.n	80007a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000790:	2200      	movs	r2, #0
 8000792:	6879      	ldr	r1, [r7, #4]
 8000794:	f04f 30ff 	mov.w	r0, #4294967295
 8000798:	f000 f90b 	bl	80009b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800079c:	4a06      	ldr	r2, [pc, #24]	@ (80007b8 <HAL_InitTick+0x5c>)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007a2:	2300      	movs	r3, #0
 80007a4:	e000      	b.n	80007a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000000 	.word	0x20000000
 80007b4:	20000008 	.word	0x20000008
 80007b8:	20000004 	.word	0x20000004

080007bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <HAL_IncTick+0x20>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	461a      	mov	r2, r3
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <HAL_IncTick+0x24>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4413      	add	r3, r2
 80007cc:	4a04      	ldr	r2, [pc, #16]	@ (80007e0 <HAL_IncTick+0x24>)
 80007ce:	6013      	str	r3, [r2, #0]
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	20000008 	.word	0x20000008
 80007e0:	20000100 	.word	0x20000100

080007e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80007e8:	4b03      	ldr	r3, [pc, #12]	@ (80007f8 <HAL_GetTick+0x14>)
 80007ea:	681b      	ldr	r3, [r3, #0]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	20000100 	.word	0x20000100

080007fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f003 0307 	and.w	r3, r3, #7
 800080a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800080c:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <__NVIC_SetPriorityGrouping+0x44>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000812:	68ba      	ldr	r2, [r7, #8]
 8000814:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000818:	4013      	ands	r3, r2
 800081a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000824:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800082c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800082e:	4a04      	ldr	r2, [pc, #16]	@ (8000840 <__NVIC_SetPriorityGrouping+0x44>)
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	60d3      	str	r3, [r2, #12]
}
 8000834:	bf00      	nop
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000848:	4b04      	ldr	r3, [pc, #16]	@ (800085c <__NVIC_GetPriorityGrouping+0x18>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	0a1b      	lsrs	r3, r3, #8
 800084e:	f003 0307 	and.w	r3, r3, #7
}
 8000852:	4618      	mov	r0, r3
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800086a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086e:	2b00      	cmp	r3, #0
 8000870:	db0b      	blt.n	800088a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	f003 021f 	and.w	r2, r3, #31
 8000878:	4907      	ldr	r1, [pc, #28]	@ (8000898 <__NVIC_EnableIRQ+0x38>)
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	095b      	lsrs	r3, r3, #5
 8000880:	2001      	movs	r0, #1
 8000882:	fa00 f202 	lsl.w	r2, r0, r2
 8000886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000e100 	.word	0xe000e100

0800089c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	6039      	str	r1, [r7, #0]
 80008a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	db0a      	blt.n	80008c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	490c      	ldr	r1, [pc, #48]	@ (80008e8 <__NVIC_SetPriority+0x4c>)
 80008b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ba:	0112      	lsls	r2, r2, #4
 80008bc:	b2d2      	uxtb	r2, r2
 80008be:	440b      	add	r3, r1
 80008c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c4:	e00a      	b.n	80008dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4908      	ldr	r1, [pc, #32]	@ (80008ec <__NVIC_SetPriority+0x50>)
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	f003 030f 	and.w	r3, r3, #15
 80008d2:	3b04      	subs	r3, #4
 80008d4:	0112      	lsls	r2, r2, #4
 80008d6:	b2d2      	uxtb	r2, r2
 80008d8:	440b      	add	r3, r1
 80008da:	761a      	strb	r2, [r3, #24]
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	e000e100 	.word	0xe000e100
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b089      	sub	sp, #36	@ 0x24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f003 0307 	and.w	r3, r3, #7
 8000902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	f1c3 0307 	rsb	r3, r3, #7
 800090a:	2b04      	cmp	r3, #4
 800090c:	bf28      	it	cs
 800090e:	2304      	movcs	r3, #4
 8000910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	3304      	adds	r3, #4
 8000916:	2b06      	cmp	r3, #6
 8000918:	d902      	bls.n	8000920 <NVIC_EncodePriority+0x30>
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	3b03      	subs	r3, #3
 800091e:	e000      	b.n	8000922 <NVIC_EncodePriority+0x32>
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000924:	f04f 32ff 	mov.w	r2, #4294967295
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	43da      	mvns	r2, r3
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	401a      	ands	r2, r3
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000938:	f04f 31ff 	mov.w	r1, #4294967295
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	fa01 f303 	lsl.w	r3, r1, r3
 8000942:	43d9      	mvns	r1, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000948:	4313      	orrs	r3, r2
         );
}
 800094a:	4618      	mov	r0, r3
 800094c:	3724      	adds	r7, #36	@ 0x24
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
	...

08000958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3b01      	subs	r3, #1
 8000964:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000968:	d301      	bcc.n	800096e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800096a:	2301      	movs	r3, #1
 800096c:	e00f      	b.n	800098e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800096e:	4a0a      	ldr	r2, [pc, #40]	@ (8000998 <SysTick_Config+0x40>)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3b01      	subs	r3, #1
 8000974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000976:	210f      	movs	r1, #15
 8000978:	f04f 30ff 	mov.w	r0, #4294967295
 800097c:	f7ff ff8e 	bl	800089c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000980:	4b05      	ldr	r3, [pc, #20]	@ (8000998 <SysTick_Config+0x40>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000986:	4b04      	ldr	r3, [pc, #16]	@ (8000998 <SysTick_Config+0x40>)
 8000988:	2207      	movs	r2, #7
 800098a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	e000e010 	.word	0xe000e010

0800099c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff ff29 	bl	80007fc <__NVIC_SetPriorityGrouping>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b086      	sub	sp, #24
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	4603      	mov	r3, r0
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607a      	str	r2, [r7, #4]
 80009be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009c4:	f7ff ff3e 	bl	8000844 <__NVIC_GetPriorityGrouping>
 80009c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	68b9      	ldr	r1, [r7, #8]
 80009ce:	6978      	ldr	r0, [r7, #20]
 80009d0:	f7ff ff8e 	bl	80008f0 <NVIC_EncodePriority>
 80009d4:	4602      	mov	r2, r0
 80009d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009da:	4611      	mov	r1, r2
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff ff5d 	bl	800089c <__NVIC_SetPriority>
}
 80009e2:	bf00      	nop
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b082      	sub	sp, #8
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	4603      	mov	r3, r0
 80009f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ff31 	bl	8000860 <__NVIC_EnableIRQ>
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff ffa2 	bl	8000958 <SysTick_Config>
 8000a14:	4603      	mov	r3, r0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b087      	sub	sp, #28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a2e:	e160      	b.n	8000cf2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	2101      	movs	r1, #1
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	f000 8152 	beq.w	8000cec <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f003 0303 	and.w	r3, r3, #3
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d005      	beq.n	8000a60 <HAL_GPIO_Init+0x40>
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f003 0303 	and.w	r3, r3, #3
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d130      	bne.n	8000ac2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	2203      	movs	r2, #3
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	43db      	mvns	r3, r3
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	4013      	ands	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	68da      	ldr	r2, [r3, #12]
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a96:	2201      	movs	r2, #1
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	091b      	lsrs	r3, r3, #4
 8000aac:	f003 0201 	and.w	r2, r3, #1
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f003 0303 	and.w	r3, r3, #3
 8000aca:	2b03      	cmp	r3, #3
 8000acc:	d017      	beq.n	8000afe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	68db      	ldr	r3, [r3, #12]
 8000ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	2203      	movs	r2, #3
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	689a      	ldr	r2, [r3, #8]
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f003 0303 	and.w	r3, r3, #3
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d123      	bne.n	8000b52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	08da      	lsrs	r2, r3, #3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	3208      	adds	r2, #8
 8000b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	220f      	movs	r2, #15
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43db      	mvns	r3, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	691a      	ldr	r2, [r3, #16]
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	f003 0307 	and.w	r3, r3, #7
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	08da      	lsrs	r2, r3, #3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3208      	adds	r2, #8
 8000b4c:	6939      	ldr	r1, [r7, #16]
 8000b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	43db      	mvns	r3, r3
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	4013      	ands	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f003 0203 	and.w	r2, r3, #3
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f000 80ac 	beq.w	8000cec <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b94:	4b5e      	ldr	r3, [pc, #376]	@ (8000d10 <HAL_GPIO_Init+0x2f0>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	4a5d      	ldr	r2, [pc, #372]	@ (8000d10 <HAL_GPIO_Init+0x2f0>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	6193      	str	r3, [r2, #24]
 8000ba0:	4b5b      	ldr	r3, [pc, #364]	@ (8000d10 <HAL_GPIO_Init+0x2f0>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bac:	4a59      	ldr	r2, [pc, #356]	@ (8000d14 <HAL_GPIO_Init+0x2f4>)
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	089b      	lsrs	r3, r3, #2
 8000bb2:	3302      	adds	r3, #2
 8000bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	f003 0303 	and.w	r3, r3, #3
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	220f      	movs	r2, #15
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000bd6:	d025      	beq.n	8000c24 <HAL_GPIO_Init+0x204>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a4f      	ldr	r2, [pc, #316]	@ (8000d18 <HAL_GPIO_Init+0x2f8>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d01f      	beq.n	8000c20 <HAL_GPIO_Init+0x200>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a4e      	ldr	r2, [pc, #312]	@ (8000d1c <HAL_GPIO_Init+0x2fc>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d019      	beq.n	8000c1c <HAL_GPIO_Init+0x1fc>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a4d      	ldr	r2, [pc, #308]	@ (8000d20 <HAL_GPIO_Init+0x300>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d013      	beq.n	8000c18 <HAL_GPIO_Init+0x1f8>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a4c      	ldr	r2, [pc, #304]	@ (8000d24 <HAL_GPIO_Init+0x304>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d00d      	beq.n	8000c14 <HAL_GPIO_Init+0x1f4>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a4b      	ldr	r2, [pc, #300]	@ (8000d28 <HAL_GPIO_Init+0x308>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d007      	beq.n	8000c10 <HAL_GPIO_Init+0x1f0>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a4a      	ldr	r2, [pc, #296]	@ (8000d2c <HAL_GPIO_Init+0x30c>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d101      	bne.n	8000c0c <HAL_GPIO_Init+0x1ec>
 8000c08:	2306      	movs	r3, #6
 8000c0a:	e00c      	b.n	8000c26 <HAL_GPIO_Init+0x206>
 8000c0c:	2307      	movs	r3, #7
 8000c0e:	e00a      	b.n	8000c26 <HAL_GPIO_Init+0x206>
 8000c10:	2305      	movs	r3, #5
 8000c12:	e008      	b.n	8000c26 <HAL_GPIO_Init+0x206>
 8000c14:	2304      	movs	r3, #4
 8000c16:	e006      	b.n	8000c26 <HAL_GPIO_Init+0x206>
 8000c18:	2303      	movs	r3, #3
 8000c1a:	e004      	b.n	8000c26 <HAL_GPIO_Init+0x206>
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	e002      	b.n	8000c26 <HAL_GPIO_Init+0x206>
 8000c20:	2301      	movs	r3, #1
 8000c22:	e000      	b.n	8000c26 <HAL_GPIO_Init+0x206>
 8000c24:	2300      	movs	r3, #0
 8000c26:	697a      	ldr	r2, [r7, #20]
 8000c28:	f002 0203 	and.w	r2, r2, #3
 8000c2c:	0092      	lsls	r2, r2, #2
 8000c2e:	4093      	lsls	r3, r2
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c36:	4937      	ldr	r1, [pc, #220]	@ (8000d14 <HAL_GPIO_Init+0x2f4>)
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	089b      	lsrs	r3, r3, #2
 8000c3c:	3302      	adds	r3, #2
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c44:	4b3a      	ldr	r3, [pc, #232]	@ (8000d30 <HAL_GPIO_Init+0x310>)
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	4013      	ands	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d003      	beq.n	8000c68 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c68:	4a31      	ldr	r2, [pc, #196]	@ (8000d30 <HAL_GPIO_Init+0x310>)
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c6e:	4b30      	ldr	r3, [pc, #192]	@ (8000d30 <HAL_GPIO_Init+0x310>)
 8000c70:	68db      	ldr	r3, [r3, #12]
 8000c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	43db      	mvns	r3, r3
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d003      	beq.n	8000c92 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c92:	4a27      	ldr	r2, [pc, #156]	@ (8000d30 <HAL_GPIO_Init+0x310>)
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c98:	4b25      	ldr	r3, [pc, #148]	@ (8000d30 <HAL_GPIO_Init+0x310>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d003      	beq.n	8000cbc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cbc:	4a1c      	ldr	r2, [pc, #112]	@ (8000d30 <HAL_GPIO_Init+0x310>)
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d30 <HAL_GPIO_Init+0x310>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ce6:	4a12      	ldr	r2, [pc, #72]	@ (8000d30 <HAL_GPIO_Init+0x310>)
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	f47f ae97 	bne.w	8000a30 <HAL_GPIO_Init+0x10>
  }
}
 8000d02:	bf00      	nop
 8000d04:	bf00      	nop
 8000d06:	371c      	adds	r7, #28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40010000 	.word	0x40010000
 8000d18:	48000400 	.word	0x48000400
 8000d1c:	48000800 	.word	0x48000800
 8000d20:	48000c00 	.word	0x48000c00
 8000d24:	48001000 	.word	0x48001000
 8000d28:	48001400 	.word	0x48001400
 8000d2c:	48001800 	.word	0x48001800
 8000d30:	40010400 	.word	0x40010400

08000d34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	807b      	strh	r3, [r7, #2]
 8000d40:	4613      	mov	r3, r2
 8000d42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d44:	787b      	ldrb	r3, [r7, #1]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d003      	beq.n	8000d52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d4a:	887a      	ldrh	r2, [r7, #2]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d50:	e002      	b.n	8000d58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d52:	887a      	ldrh	r2, [r7, #2]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d70:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d74:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d7a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d102      	bne.n	8000d8a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	f001 b83a 	b.w	8001dfe <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d8e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f000 816f 	beq.w	800107e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000da0:	4bb5      	ldr	r3, [pc, #724]	@ (8001078 <HAL_RCC_OscConfig+0x314>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 030c 	and.w	r3, r3, #12
 8000da8:	2b04      	cmp	r3, #4
 8000daa:	d00c      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dac:	4bb2      	ldr	r3, [pc, #712]	@ (8001078 <HAL_RCC_OscConfig+0x314>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f003 030c 	and.w	r3, r3, #12
 8000db4:	2b08      	cmp	r3, #8
 8000db6:	d15c      	bne.n	8000e72 <HAL_RCC_OscConfig+0x10e>
 8000db8:	4baf      	ldr	r3, [pc, #700]	@ (8001078 <HAL_RCC_OscConfig+0x314>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000dc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dc4:	d155      	bne.n	8000e72 <HAL_RCC_OscConfig+0x10e>
 8000dc6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dca:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000dd2:	fa93 f3a3 	rbit	r3, r3
 8000dd6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000dda:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dde:	fab3 f383 	clz	r3, r3
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	095b      	lsrs	r3, r3, #5
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d102      	bne.n	8000df8 <HAL_RCC_OscConfig+0x94>
 8000df2:	4ba1      	ldr	r3, [pc, #644]	@ (8001078 <HAL_RCC_OscConfig+0x314>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	e015      	b.n	8000e24 <HAL_RCC_OscConfig+0xc0>
 8000df8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dfc:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e00:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000e04:	fa93 f3a3 	rbit	r3, r3
 8000e08:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000e0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e10:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000e14:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000e18:	fa93 f3a3 	rbit	r3, r3
 8000e1c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000e20:	4b95      	ldr	r3, [pc, #596]	@ (8001078 <HAL_RCC_OscConfig+0x314>)
 8000e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e24:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e28:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000e2c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000e30:	fa92 f2a2 	rbit	r2, r2
 8000e34:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8000e38:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000e3c:	fab2 f282 	clz	r2, r2
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	f042 0220 	orr.w	r2, r2, #32
 8000e46:	b2d2      	uxtb	r2, r2
 8000e48:	f002 021f 	and.w	r2, r2, #31
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e52:	4013      	ands	r3, r2
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	f000 8111 	beq.w	800107c <HAL_RCC_OscConfig+0x318>
 8000e5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e5e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f040 8108 	bne.w	800107c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	f000 bfc6 	b.w	8001dfe <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e76:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e82:	d106      	bne.n	8000e92 <HAL_RCC_OscConfig+0x12e>
 8000e84:	4b7c      	ldr	r3, [pc, #496]	@ (8001078 <HAL_RCC_OscConfig+0x314>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a7b      	ldr	r2, [pc, #492]	@ (8001078 <HAL_RCC_OscConfig+0x314>)
 8000e8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e8e:	6013      	str	r3, [r2, #0]
 8000e90:	e036      	b.n	8000f00 <HAL_RCC_OscConfig+0x19c>
 8000e92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e96:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d10c      	bne.n	8000ebc <HAL_RCC_OscConfig+0x158>
 8000ea2:	4b75      	ldr	r3, [pc, #468]	@ (8001078 <HAL_RCC_OscConfig+0x314>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a74      	ldr	r2, [pc, #464]	@ (8001078 <HAL_RCC_OscConfig+0x314>)
 8000ea8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	4b72      	ldr	r3, [pc, #456]	@ (8001078 <HAL_RCC_OscConfig+0x314>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a71      	ldr	r2, [pc, #452]	@ (8001078 <HAL_RCC_OscConfig+0x314>)
 8000eb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	e021      	b.n	8000f00 <HAL_RCC_OscConfig+0x19c>
 8000ebc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ec0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ecc:	d10c      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x184>
 8000ece:	4b6a      	ldr	r3, [pc, #424]	@ (8001078 <HAL_RCC_OscConfig+0x314>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a69      	ldr	r2, [pc, #420]	@ (8001078 <HAL_RCC_OscConfig+0x314>)
 8000ed4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ed8:	6013      	str	r3, [r2, #0]
 8000eda:	4b67      	ldr	r3, [pc, #412]	@ (8001078 <HAL_RCC_OscConfig+0x314>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a66      	ldr	r2, [pc, #408]	@ (8001078 <HAL_RCC_OscConfig+0x314>)
 8000ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	e00b      	b.n	8000f00 <HAL_RCC_OscConfig+0x19c>
 8000ee8:	4b63      	ldr	r3, [pc, #396]	@ (8001078 <HAL_RCC_OscConfig+0x314>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a62      	ldr	r2, [pc, #392]	@ (8001078 <HAL_RCC_OscConfig+0x314>)
 8000eee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	4b60      	ldr	r3, [pc, #384]	@ (8001078 <HAL_RCC_OscConfig+0x314>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a5f      	ldr	r2, [pc, #380]	@ (8001078 <HAL_RCC_OscConfig+0x314>)
 8000efa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000efe:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f04:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d059      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f10:	f7ff fc68 	bl	80007e4 <HAL_GetTick>
 8000f14:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f18:	e00a      	b.n	8000f30 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f1a:	f7ff fc63 	bl	80007e4 <HAL_GetTick>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b64      	cmp	r3, #100	@ 0x64
 8000f28:	d902      	bls.n	8000f30 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	f000 bf67 	b.w	8001dfe <HAL_RCC_OscConfig+0x109a>
 8000f30:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f34:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f38:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000f3c:	fa93 f3a3 	rbit	r3, r3
 8000f40:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8000f44:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f48:	fab3 f383 	clz	r3, r3
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	095b      	lsrs	r3, r3, #5
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d102      	bne.n	8000f62 <HAL_RCC_OscConfig+0x1fe>
 8000f5c:	4b46      	ldr	r3, [pc, #280]	@ (8001078 <HAL_RCC_OscConfig+0x314>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	e015      	b.n	8000f8e <HAL_RCC_OscConfig+0x22a>
 8000f62:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f66:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f6a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000f6e:	fa93 f3a3 	rbit	r3, r3
 8000f72:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000f76:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f7a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000f7e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000f82:	fa93 f3a3 	rbit	r3, r3
 8000f86:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000f8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001078 <HAL_RCC_OscConfig+0x314>)
 8000f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f8e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f92:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8000f96:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000f9a:	fa92 f2a2 	rbit	r2, r2
 8000f9e:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8000fa2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000fa6:	fab2 f282 	clz	r2, r2
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	f042 0220 	orr.w	r2, r2, #32
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	f002 021f 	and.w	r2, r2, #31
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d0ab      	beq.n	8000f1a <HAL_RCC_OscConfig+0x1b6>
 8000fc2:	e05c      	b.n	800107e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fc0e 	bl	80007e4 <HAL_GetTick>
 8000fc8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fcc:	e00a      	b.n	8000fe4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fce:	f7ff fc09 	bl	80007e4 <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b64      	cmp	r3, #100	@ 0x64
 8000fdc:	d902      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	f000 bf0d 	b.w	8001dfe <HAL_RCC_OscConfig+0x109a>
 8000fe4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fe8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000ff0:	fa93 f3a3 	rbit	r3, r3
 8000ff4:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8000ff8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ffc:	fab3 f383 	clz	r3, r3
 8001000:	b2db      	uxtb	r3, r3
 8001002:	095b      	lsrs	r3, r3, #5
 8001004:	b2db      	uxtb	r3, r3
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b01      	cmp	r3, #1
 800100e:	d102      	bne.n	8001016 <HAL_RCC_OscConfig+0x2b2>
 8001010:	4b19      	ldr	r3, [pc, #100]	@ (8001078 <HAL_RCC_OscConfig+0x314>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	e015      	b.n	8001042 <HAL_RCC_OscConfig+0x2de>
 8001016:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800101a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800101e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001022:	fa93 f3a3 	rbit	r3, r3
 8001026:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800102a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800102e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001032:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001036:	fa93 f3a3 	rbit	r3, r3
 800103a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800103e:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <HAL_RCC_OscConfig+0x314>)
 8001040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001042:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001046:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800104a:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800104e:	fa92 f2a2 	rbit	r2, r2
 8001052:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001056:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800105a:	fab2 f282 	clz	r2, r2
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	f042 0220 	orr.w	r2, r2, #32
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	f002 021f 	and.w	r2, r2, #31
 800106a:	2101      	movs	r1, #1
 800106c:	fa01 f202 	lsl.w	r2, r1, r2
 8001070:	4013      	ands	r3, r2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1ab      	bne.n	8000fce <HAL_RCC_OscConfig+0x26a>
 8001076:	e002      	b.n	800107e <HAL_RCC_OscConfig+0x31a>
 8001078:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800107e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001082:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	f000 817f 	beq.w	8001392 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001094:	4ba7      	ldr	r3, [pc, #668]	@ (8001334 <HAL_RCC_OscConfig+0x5d0>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 030c 	and.w	r3, r3, #12
 800109c:	2b00      	cmp	r3, #0
 800109e:	d00c      	beq.n	80010ba <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010a0:	4ba4      	ldr	r3, [pc, #656]	@ (8001334 <HAL_RCC_OscConfig+0x5d0>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 030c 	and.w	r3, r3, #12
 80010a8:	2b08      	cmp	r3, #8
 80010aa:	d173      	bne.n	8001194 <HAL_RCC_OscConfig+0x430>
 80010ac:	4ba1      	ldr	r3, [pc, #644]	@ (8001334 <HAL_RCC_OscConfig+0x5d0>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80010b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80010b8:	d16c      	bne.n	8001194 <HAL_RCC_OscConfig+0x430>
 80010ba:	2302      	movs	r3, #2
 80010bc:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80010c4:	fa93 f3a3 	rbit	r3, r3
 80010c8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80010cc:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d0:	fab3 f383 	clz	r3, r3
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	095b      	lsrs	r3, r3, #5
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d102      	bne.n	80010ea <HAL_RCC_OscConfig+0x386>
 80010e4:	4b93      	ldr	r3, [pc, #588]	@ (8001334 <HAL_RCC_OscConfig+0x5d0>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	e013      	b.n	8001112 <HAL_RCC_OscConfig+0x3ae>
 80010ea:	2302      	movs	r3, #2
 80010ec:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80010f4:	fa93 f3a3 	rbit	r3, r3
 80010f8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80010fc:	2302      	movs	r3, #2
 80010fe:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001102:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001106:	fa93 f3a3 	rbit	r3, r3
 800110a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800110e:	4b89      	ldr	r3, [pc, #548]	@ (8001334 <HAL_RCC_OscConfig+0x5d0>)
 8001110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001112:	2202      	movs	r2, #2
 8001114:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001118:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800111c:	fa92 f2a2 	rbit	r2, r2
 8001120:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001124:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001128:	fab2 f282 	clz	r2, r2
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	f042 0220 	orr.w	r2, r2, #32
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	f002 021f 	and.w	r2, r2, #31
 8001138:	2101      	movs	r1, #1
 800113a:	fa01 f202 	lsl.w	r2, r1, r2
 800113e:	4013      	ands	r3, r2
 8001140:	2b00      	cmp	r3, #0
 8001142:	d00a      	beq.n	800115a <HAL_RCC_OscConfig+0x3f6>
 8001144:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001148:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d002      	beq.n	800115a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	f000 be52 	b.w	8001dfe <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800115a:	4b76      	ldr	r3, [pc, #472]	@ (8001334 <HAL_RCC_OscConfig+0x5d0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001162:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001166:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	21f8      	movs	r1, #248	@ 0xf8
 8001170:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001174:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001178:	fa91 f1a1 	rbit	r1, r1
 800117c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001180:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001184:	fab1 f181 	clz	r1, r1
 8001188:	b2c9      	uxtb	r1, r1
 800118a:	408b      	lsls	r3, r1
 800118c:	4969      	ldr	r1, [pc, #420]	@ (8001334 <HAL_RCC_OscConfig+0x5d0>)
 800118e:	4313      	orrs	r3, r2
 8001190:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001192:	e0fe      	b.n	8001392 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001194:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001198:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 8088 	beq.w	80012b6 <HAL_RCC_OscConfig+0x552>
 80011a6:	2301      	movs	r3, #1
 80011a8:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ac:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80011b0:	fa93 f3a3 	rbit	r3, r3
 80011b4:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80011b8:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011bc:	fab3 f383 	clz	r3, r3
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80011c6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	461a      	mov	r2, r3
 80011ce:	2301      	movs	r3, #1
 80011d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d2:	f7ff fb07 	bl	80007e4 <HAL_GetTick>
 80011d6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011da:	e00a      	b.n	80011f2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011dc:	f7ff fb02 	bl	80007e4 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d902      	bls.n	80011f2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	f000 be06 	b.w	8001dfe <HAL_RCC_OscConfig+0x109a>
 80011f2:	2302      	movs	r3, #2
 80011f4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80011fc:	fa93 f3a3 	rbit	r3, r3
 8001200:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001204:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001208:	fab3 f383 	clz	r3, r3
 800120c:	b2db      	uxtb	r3, r3
 800120e:	095b      	lsrs	r3, r3, #5
 8001210:	b2db      	uxtb	r3, r3
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	b2db      	uxtb	r3, r3
 8001218:	2b01      	cmp	r3, #1
 800121a:	d102      	bne.n	8001222 <HAL_RCC_OscConfig+0x4be>
 800121c:	4b45      	ldr	r3, [pc, #276]	@ (8001334 <HAL_RCC_OscConfig+0x5d0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	e013      	b.n	800124a <HAL_RCC_OscConfig+0x4e6>
 8001222:	2302      	movs	r3, #2
 8001224:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001228:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800122c:	fa93 f3a3 	rbit	r3, r3
 8001230:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001234:	2302      	movs	r3, #2
 8001236:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800123a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800123e:	fa93 f3a3 	rbit	r3, r3
 8001242:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001246:	4b3b      	ldr	r3, [pc, #236]	@ (8001334 <HAL_RCC_OscConfig+0x5d0>)
 8001248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800124a:	2202      	movs	r2, #2
 800124c:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001250:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001254:	fa92 f2a2 	rbit	r2, r2
 8001258:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 800125c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001260:	fab2 f282 	clz	r2, r2
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	f042 0220 	orr.w	r2, r2, #32
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	f002 021f 	and.w	r2, r2, #31
 8001270:	2101      	movs	r1, #1
 8001272:	fa01 f202 	lsl.w	r2, r1, r2
 8001276:	4013      	ands	r3, r2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d0af      	beq.n	80011dc <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800127c:	4b2d      	ldr	r3, [pc, #180]	@ (8001334 <HAL_RCC_OscConfig+0x5d0>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001284:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001288:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	21f8      	movs	r1, #248	@ 0xf8
 8001292:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001296:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800129a:	fa91 f1a1 	rbit	r1, r1
 800129e:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80012a2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80012a6:	fab1 f181 	clz	r1, r1
 80012aa:	b2c9      	uxtb	r1, r1
 80012ac:	408b      	lsls	r3, r1
 80012ae:	4921      	ldr	r1, [pc, #132]	@ (8001334 <HAL_RCC_OscConfig+0x5d0>)
 80012b0:	4313      	orrs	r3, r2
 80012b2:	600b      	str	r3, [r1, #0]
 80012b4:	e06d      	b.n	8001392 <HAL_RCC_OscConfig+0x62e>
 80012b6:	2301      	movs	r3, #1
 80012b8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012bc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80012c0:	fa93 f3a3 	rbit	r3, r3
 80012c4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80012c8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012cc:	fab3 f383 	clz	r3, r3
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80012d6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	461a      	mov	r2, r3
 80012de:	2300      	movs	r3, #0
 80012e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e2:	f7ff fa7f 	bl	80007e4 <HAL_GetTick>
 80012e6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ea:	e00a      	b.n	8001302 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ec:	f7ff fa7a 	bl	80007e4 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d902      	bls.n	8001302 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	f000 bd7e 	b.w	8001dfe <HAL_RCC_OscConfig+0x109a>
 8001302:	2302      	movs	r3, #2
 8001304:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001308:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800130c:	fa93 f3a3 	rbit	r3, r3
 8001310:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001314:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001318:	fab3 f383 	clz	r3, r3
 800131c:	b2db      	uxtb	r3, r3
 800131e:	095b      	lsrs	r3, r3, #5
 8001320:	b2db      	uxtb	r3, r3
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	b2db      	uxtb	r3, r3
 8001328:	2b01      	cmp	r3, #1
 800132a:	d105      	bne.n	8001338 <HAL_RCC_OscConfig+0x5d4>
 800132c:	4b01      	ldr	r3, [pc, #4]	@ (8001334 <HAL_RCC_OscConfig+0x5d0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	e016      	b.n	8001360 <HAL_RCC_OscConfig+0x5fc>
 8001332:	bf00      	nop
 8001334:	40021000 	.word	0x40021000
 8001338:	2302      	movs	r3, #2
 800133a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001342:	fa93 f3a3 	rbit	r3, r3
 8001346:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800134a:	2302      	movs	r3, #2
 800134c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001350:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001354:	fa93 f3a3 	rbit	r3, r3
 8001358:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800135c:	4bbf      	ldr	r3, [pc, #764]	@ (800165c <HAL_RCC_OscConfig+0x8f8>)
 800135e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001360:	2202      	movs	r2, #2
 8001362:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001366:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800136a:	fa92 f2a2 	rbit	r2, r2
 800136e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001372:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001376:	fab2 f282 	clz	r2, r2
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	f042 0220 	orr.w	r2, r2, #32
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	f002 021f 	and.w	r2, r2, #31
 8001386:	2101      	movs	r1, #1
 8001388:	fa01 f202 	lsl.w	r2, r1, r2
 800138c:	4013      	ands	r3, r2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1ac      	bne.n	80012ec <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001392:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001396:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 8113 	beq.w	80015ce <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013ac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d07c      	beq.n	80014b2 <HAL_RCC_OscConfig+0x74e>
 80013b8:	2301      	movs	r3, #1
 80013ba:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80013c2:	fa93 f3a3 	rbit	r3, r3
 80013c6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80013ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ce:	fab3 f383 	clz	r3, r3
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	461a      	mov	r2, r3
 80013d6:	4ba2      	ldr	r3, [pc, #648]	@ (8001660 <HAL_RCC_OscConfig+0x8fc>)
 80013d8:	4413      	add	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	461a      	mov	r2, r3
 80013de:	2301      	movs	r3, #1
 80013e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e2:	f7ff f9ff 	bl	80007e4 <HAL_GetTick>
 80013e6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ea:	e00a      	b.n	8001402 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ec:	f7ff f9fa 	bl	80007e4 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d902      	bls.n	8001402 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	f000 bcfe 	b.w	8001dfe <HAL_RCC_OscConfig+0x109a>
 8001402:	2302      	movs	r3, #2
 8001404:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001408:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800140c:	fa93 f2a3 	rbit	r2, r3
 8001410:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001414:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800141e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001422:	2202      	movs	r2, #2
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800142a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	fa93 f2a3 	rbit	r2, r3
 8001434:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001438:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001442:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001446:	2202      	movs	r2, #2
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800144e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	fa93 f2a3 	rbit	r2, r3
 8001458:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800145c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001460:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001462:	4b7e      	ldr	r3, [pc, #504]	@ (800165c <HAL_RCC_OscConfig+0x8f8>)
 8001464:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001466:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800146a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800146e:	2102      	movs	r1, #2
 8001470:	6019      	str	r1, [r3, #0]
 8001472:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001476:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	fa93 f1a3 	rbit	r1, r3
 8001480:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001484:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001488:	6019      	str	r1, [r3, #0]
  return result;
 800148a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800148e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	fab3 f383 	clz	r3, r3
 8001498:	b2db      	uxtb	r3, r3
 800149a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	f003 031f 	and.w	r3, r3, #31
 80014a4:	2101      	movs	r1, #1
 80014a6:	fa01 f303 	lsl.w	r3, r1, r3
 80014aa:	4013      	ands	r3, r2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d09d      	beq.n	80013ec <HAL_RCC_OscConfig+0x688>
 80014b0:	e08d      	b.n	80015ce <HAL_RCC_OscConfig+0x86a>
 80014b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014b6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80014ba:	2201      	movs	r2, #1
 80014bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014c2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	fa93 f2a3 	rbit	r2, r3
 80014cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014d0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014d4:	601a      	str	r2, [r3, #0]
  return result;
 80014d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014da:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014de:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e0:	fab3 f383 	clz	r3, r3
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	461a      	mov	r2, r3
 80014e8:	4b5d      	ldr	r3, [pc, #372]	@ (8001660 <HAL_RCC_OscConfig+0x8fc>)
 80014ea:	4413      	add	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	461a      	mov	r2, r3
 80014f0:	2300      	movs	r3, #0
 80014f2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f4:	f7ff f976 	bl	80007e4 <HAL_GetTick>
 80014f8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014fc:	e00a      	b.n	8001514 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014fe:	f7ff f971 	bl	80007e4 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d902      	bls.n	8001514 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	f000 bc75 	b.w	8001dfe <HAL_RCC_OscConfig+0x109a>
 8001514:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001518:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800151c:	2202      	movs	r2, #2
 800151e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001520:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001524:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	fa93 f2a3 	rbit	r2, r3
 800152e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001532:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800153c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001540:	2202      	movs	r2, #2
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001548:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	fa93 f2a3 	rbit	r2, r3
 8001552:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001556:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001560:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001564:	2202      	movs	r2, #2
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800156c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	fa93 f2a3 	rbit	r2, r3
 8001576:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800157a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800157e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001580:	4b36      	ldr	r3, [pc, #216]	@ (800165c <HAL_RCC_OscConfig+0x8f8>)
 8001582:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001584:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001588:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800158c:	2102      	movs	r1, #2
 800158e:	6019      	str	r1, [r3, #0]
 8001590:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001594:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	fa93 f1a3 	rbit	r1, r3
 800159e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015a2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80015a6:	6019      	str	r1, [r3, #0]
  return result;
 80015a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015ac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	fab3 f383 	clz	r3, r3
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	f003 031f 	and.w	r3, r3, #31
 80015c2:	2101      	movs	r1, #1
 80015c4:	fa01 f303 	lsl.w	r3, r1, r3
 80015c8:	4013      	ands	r3, r2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d197      	bne.n	80014fe <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 81a5 	beq.w	800192e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ea:	4b1c      	ldr	r3, [pc, #112]	@ (800165c <HAL_RCC_OscConfig+0x8f8>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d116      	bne.n	8001624 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	4b19      	ldr	r3, [pc, #100]	@ (800165c <HAL_RCC_OscConfig+0x8f8>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	4a18      	ldr	r2, [pc, #96]	@ (800165c <HAL_RCC_OscConfig+0x8f8>)
 80015fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001600:	61d3      	str	r3, [r2, #28]
 8001602:	4b16      	ldr	r3, [pc, #88]	@ (800165c <HAL_RCC_OscConfig+0x8f8>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800160a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800160e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001618:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800161c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800161e:	2301      	movs	r3, #1
 8001620:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001624:	4b0f      	ldr	r3, [pc, #60]	@ (8001664 <HAL_RCC_OscConfig+0x900>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800162c:	2b00      	cmp	r3, #0
 800162e:	d121      	bne.n	8001674 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001630:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <HAL_RCC_OscConfig+0x900>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0b      	ldr	r2, [pc, #44]	@ (8001664 <HAL_RCC_OscConfig+0x900>)
 8001636:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800163a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800163c:	f7ff f8d2 	bl	80007e4 <HAL_GetTick>
 8001640:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001644:	e010      	b.n	8001668 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001646:	f7ff f8cd 	bl	80007e4 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b64      	cmp	r3, #100	@ 0x64
 8001654:	d908      	bls.n	8001668 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e3d1      	b.n	8001dfe <HAL_RCC_OscConfig+0x109a>
 800165a:	bf00      	nop
 800165c:	40021000 	.word	0x40021000
 8001660:	10908120 	.word	0x10908120
 8001664:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001668:	4b8d      	ldr	r3, [pc, #564]	@ (80018a0 <HAL_RCC_OscConfig+0xb3c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0e8      	beq.n	8001646 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001674:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001678:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d106      	bne.n	8001692 <HAL_RCC_OscConfig+0x92e>
 8001684:	4b87      	ldr	r3, [pc, #540]	@ (80018a4 <HAL_RCC_OscConfig+0xb40>)
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	4a86      	ldr	r2, [pc, #536]	@ (80018a4 <HAL_RCC_OscConfig+0xb40>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6213      	str	r3, [r2, #32]
 8001690:	e035      	b.n	80016fe <HAL_RCC_OscConfig+0x99a>
 8001692:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001696:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10c      	bne.n	80016bc <HAL_RCC_OscConfig+0x958>
 80016a2:	4b80      	ldr	r3, [pc, #512]	@ (80018a4 <HAL_RCC_OscConfig+0xb40>)
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	4a7f      	ldr	r2, [pc, #508]	@ (80018a4 <HAL_RCC_OscConfig+0xb40>)
 80016a8:	f023 0301 	bic.w	r3, r3, #1
 80016ac:	6213      	str	r3, [r2, #32]
 80016ae:	4b7d      	ldr	r3, [pc, #500]	@ (80018a4 <HAL_RCC_OscConfig+0xb40>)
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	4a7c      	ldr	r2, [pc, #496]	@ (80018a4 <HAL_RCC_OscConfig+0xb40>)
 80016b4:	f023 0304 	bic.w	r3, r3, #4
 80016b8:	6213      	str	r3, [r2, #32]
 80016ba:	e020      	b.n	80016fe <HAL_RCC_OscConfig+0x99a>
 80016bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016c0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	2b05      	cmp	r3, #5
 80016ca:	d10c      	bne.n	80016e6 <HAL_RCC_OscConfig+0x982>
 80016cc:	4b75      	ldr	r3, [pc, #468]	@ (80018a4 <HAL_RCC_OscConfig+0xb40>)
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	4a74      	ldr	r2, [pc, #464]	@ (80018a4 <HAL_RCC_OscConfig+0xb40>)
 80016d2:	f043 0304 	orr.w	r3, r3, #4
 80016d6:	6213      	str	r3, [r2, #32]
 80016d8:	4b72      	ldr	r3, [pc, #456]	@ (80018a4 <HAL_RCC_OscConfig+0xb40>)
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	4a71      	ldr	r2, [pc, #452]	@ (80018a4 <HAL_RCC_OscConfig+0xb40>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	6213      	str	r3, [r2, #32]
 80016e4:	e00b      	b.n	80016fe <HAL_RCC_OscConfig+0x99a>
 80016e6:	4b6f      	ldr	r3, [pc, #444]	@ (80018a4 <HAL_RCC_OscConfig+0xb40>)
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	4a6e      	ldr	r2, [pc, #440]	@ (80018a4 <HAL_RCC_OscConfig+0xb40>)
 80016ec:	f023 0301 	bic.w	r3, r3, #1
 80016f0:	6213      	str	r3, [r2, #32]
 80016f2:	4b6c      	ldr	r3, [pc, #432]	@ (80018a4 <HAL_RCC_OscConfig+0xb40>)
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	4a6b      	ldr	r2, [pc, #428]	@ (80018a4 <HAL_RCC_OscConfig+0xb40>)
 80016f8:	f023 0304 	bic.w	r3, r3, #4
 80016fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001702:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 8081 	beq.w	8001812 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001710:	f7ff f868 	bl	80007e4 <HAL_GetTick>
 8001714:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001718:	e00b      	b.n	8001732 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800171a:	f7ff f863 	bl	80007e4 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800172a:	4293      	cmp	r3, r2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e365      	b.n	8001dfe <HAL_RCC_OscConfig+0x109a>
 8001732:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001736:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800173a:	2202      	movs	r2, #2
 800173c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001742:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	fa93 f2a3 	rbit	r2, r3
 800174c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001750:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800175a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800175e:	2202      	movs	r2, #2
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001766:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	fa93 f2a3 	rbit	r2, r3
 8001770:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001774:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001778:	601a      	str	r2, [r3, #0]
  return result;
 800177a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800177e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001782:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001784:	fab3 f383 	clz	r3, r3
 8001788:	b2db      	uxtb	r3, r3
 800178a:	095b      	lsrs	r3, r3, #5
 800178c:	b2db      	uxtb	r3, r3
 800178e:	f043 0302 	orr.w	r3, r3, #2
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d102      	bne.n	800179e <HAL_RCC_OscConfig+0xa3a>
 8001798:	4b42      	ldr	r3, [pc, #264]	@ (80018a4 <HAL_RCC_OscConfig+0xb40>)
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	e013      	b.n	80017c6 <HAL_RCC_OscConfig+0xa62>
 800179e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017a2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80017a6:	2202      	movs	r2, #2
 80017a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017ae:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	fa93 f2a3 	rbit	r2, r3
 80017b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017bc:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	4b38      	ldr	r3, [pc, #224]	@ (80018a4 <HAL_RCC_OscConfig+0xb40>)
 80017c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017ca:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80017ce:	2102      	movs	r1, #2
 80017d0:	6011      	str	r1, [r2, #0]
 80017d2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017d6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	fa92 f1a2 	rbit	r1, r2
 80017e0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017e4:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80017e8:	6011      	str	r1, [r2, #0]
  return result;
 80017ea:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017ee:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	fab2 f282 	clz	r2, r2
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	f002 021f 	and.w	r2, r2, #31
 8001804:	2101      	movs	r1, #1
 8001806:	fa01 f202 	lsl.w	r2, r1, r2
 800180a:	4013      	ands	r3, r2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d084      	beq.n	800171a <HAL_RCC_OscConfig+0x9b6>
 8001810:	e083      	b.n	800191a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001812:	f7fe ffe7 	bl	80007e4 <HAL_GetTick>
 8001816:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800181a:	e00b      	b.n	8001834 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800181c:	f7fe ffe2 	bl	80007e4 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800182c:	4293      	cmp	r3, r2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e2e4      	b.n	8001dfe <HAL_RCC_OscConfig+0x109a>
 8001834:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001838:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800183c:	2202      	movs	r2, #2
 800183e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001840:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001844:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	fa93 f2a3 	rbit	r2, r3
 800184e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001852:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800185c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001860:	2202      	movs	r2, #2
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001868:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	fa93 f2a3 	rbit	r2, r3
 8001872:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001876:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800187a:	601a      	str	r2, [r3, #0]
  return result;
 800187c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001880:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001884:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001886:	fab3 f383 	clz	r3, r3
 800188a:	b2db      	uxtb	r3, r3
 800188c:	095b      	lsrs	r3, r3, #5
 800188e:	b2db      	uxtb	r3, r3
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d106      	bne.n	80018a8 <HAL_RCC_OscConfig+0xb44>
 800189a:	4b02      	ldr	r3, [pc, #8]	@ (80018a4 <HAL_RCC_OscConfig+0xb40>)
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	e017      	b.n	80018d0 <HAL_RCC_OscConfig+0xb6c>
 80018a0:	40007000 	.word	0x40007000
 80018a4:	40021000 	.word	0x40021000
 80018a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ac:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80018b0:	2202      	movs	r2, #2
 80018b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018b8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	fa93 f2a3 	rbit	r2, r3
 80018c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018c6:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	4bb3      	ldr	r3, [pc, #716]	@ (8001b9c <HAL_RCC_OscConfig+0xe38>)
 80018ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018d4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80018d8:	2102      	movs	r1, #2
 80018da:	6011      	str	r1, [r2, #0]
 80018dc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018e0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80018e4:	6812      	ldr	r2, [r2, #0]
 80018e6:	fa92 f1a2 	rbit	r1, r2
 80018ea:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018ee:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80018f2:	6011      	str	r1, [r2, #0]
  return result;
 80018f4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018f8:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80018fc:	6812      	ldr	r2, [r2, #0]
 80018fe:	fab2 f282 	clz	r2, r2
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	f002 021f 	and.w	r2, r2, #31
 800190e:	2101      	movs	r1, #1
 8001910:	fa01 f202 	lsl.w	r2, r1, r2
 8001914:	4013      	ands	r3, r2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d180      	bne.n	800181c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800191a:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800191e:	2b01      	cmp	r3, #1
 8001920:	d105      	bne.n	800192e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001922:	4b9e      	ldr	r3, [pc, #632]	@ (8001b9c <HAL_RCC_OscConfig+0xe38>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	4a9d      	ldr	r2, [pc, #628]	@ (8001b9c <HAL_RCC_OscConfig+0xe38>)
 8001928:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800192c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800192e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001932:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 825e 	beq.w	8001dfc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001940:	4b96      	ldr	r3, [pc, #600]	@ (8001b9c <HAL_RCC_OscConfig+0xe38>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 030c 	and.w	r3, r3, #12
 8001948:	2b08      	cmp	r3, #8
 800194a:	f000 821f 	beq.w	8001d8c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800194e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001952:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	2b02      	cmp	r3, #2
 800195c:	f040 8170 	bne.w	8001c40 <HAL_RCC_OscConfig+0xedc>
 8001960:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001964:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001968:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800196c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001972:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	fa93 f2a3 	rbit	r2, r3
 800197c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001980:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001984:	601a      	str	r2, [r3, #0]
  return result;
 8001986:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800198a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800198e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001990:	fab3 f383 	clz	r3, r3
 8001994:	b2db      	uxtb	r3, r3
 8001996:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800199a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	461a      	mov	r2, r3
 80019a2:	2300      	movs	r3, #0
 80019a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a6:	f7fe ff1d 	bl	80007e4 <HAL_GetTick>
 80019aa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ae:	e009      	b.n	80019c4 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b0:	f7fe ff18 	bl	80007e4 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e21c      	b.n	8001dfe <HAL_RCC_OscConfig+0x109a>
 80019c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019c8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80019cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019d6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	fa93 f2a3 	rbit	r2, r3
 80019e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019e4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80019e8:	601a      	str	r2, [r3, #0]
  return result;
 80019ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ee:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80019f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f4:	fab3 f383 	clz	r3, r3
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	095b      	lsrs	r3, r3, #5
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d102      	bne.n	8001a0e <HAL_RCC_OscConfig+0xcaa>
 8001a08:	4b64      	ldr	r3, [pc, #400]	@ (8001b9c <HAL_RCC_OscConfig+0xe38>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	e027      	b.n	8001a5e <HAL_RCC_OscConfig+0xcfa>
 8001a0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a12:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001a16:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a20:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	fa93 f2a3 	rbit	r2, r3
 8001a2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a2e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a38:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001a3c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a46:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	fa93 f2a3 	rbit	r2, r3
 8001a50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a54:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	4b50      	ldr	r3, [pc, #320]	@ (8001b9c <HAL_RCC_OscConfig+0xe38>)
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a62:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001a66:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001a6a:	6011      	str	r1, [r2, #0]
 8001a6c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a70:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001a74:	6812      	ldr	r2, [r2, #0]
 8001a76:	fa92 f1a2 	rbit	r1, r2
 8001a7a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a7e:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001a82:	6011      	str	r1, [r2, #0]
  return result;
 8001a84:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a88:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001a8c:	6812      	ldr	r2, [r2, #0]
 8001a8e:	fab2 f282 	clz	r2, r2
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	f042 0220 	orr.w	r2, r2, #32
 8001a98:	b2d2      	uxtb	r2, r2
 8001a9a:	f002 021f 	and.w	r2, r2, #31
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d182      	bne.n	80019b0 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aaa:	4b3c      	ldr	r3, [pc, #240]	@ (8001b9c <HAL_RCC_OscConfig+0xe38>)
 8001aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aae:	f023 020f 	bic.w	r2, r3, #15
 8001ab2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ab6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001abe:	4937      	ldr	r1, [pc, #220]	@ (8001b9c <HAL_RCC_OscConfig+0xe38>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001ac4:	4b35      	ldr	r3, [pc, #212]	@ (8001b9c <HAL_RCC_OscConfig+0xe38>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001acc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ad0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6a19      	ldr	r1, [r3, #32]
 8001ad8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001adc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	430b      	orrs	r3, r1
 8001ae6:	492d      	ldr	r1, [pc, #180]	@ (8001b9c <HAL_RCC_OscConfig+0xe38>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]
 8001aec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001af0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001af4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001af8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001afe:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	fa93 f2a3 	rbit	r2, r3
 8001b08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b0c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001b10:	601a      	str	r2, [r3, #0]
  return result;
 8001b12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b16:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001b1a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b1c:	fab3 f383 	clz	r3, r3
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b26:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	2301      	movs	r3, #1
 8001b30:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b32:	f7fe fe57 	bl	80007e4 <HAL_GetTick>
 8001b36:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b3a:	e009      	b.n	8001b50 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3c:	f7fe fe52 	bl	80007e4 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e156      	b.n	8001dfe <HAL_RCC_OscConfig+0x109a>
 8001b50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b54:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b58:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b62:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	fa93 f2a3 	rbit	r2, r3
 8001b6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b70:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001b74:	601a      	str	r2, [r3, #0]
  return result;
 8001b76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b7a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001b7e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b80:	fab3 f383 	clz	r3, r3
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	095b      	lsrs	r3, r3, #5
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d105      	bne.n	8001ba0 <HAL_RCC_OscConfig+0xe3c>
 8001b94:	4b01      	ldr	r3, [pc, #4]	@ (8001b9c <HAL_RCC_OscConfig+0xe38>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	e02a      	b.n	8001bf0 <HAL_RCC_OscConfig+0xe8c>
 8001b9a:	bf00      	nop
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ba4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ba8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bb2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	fa93 f2a3 	rbit	r2, r3
 8001bbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bc0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bca:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001bce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bd8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	fa93 f2a3 	rbit	r2, r3
 8001be2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001be6:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	4b86      	ldr	r3, [pc, #536]	@ (8001e08 <HAL_RCC_OscConfig+0x10a4>)
 8001bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001bf4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001bf8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001bfc:	6011      	str	r1, [r2, #0]
 8001bfe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c02:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001c06:	6812      	ldr	r2, [r2, #0]
 8001c08:	fa92 f1a2 	rbit	r1, r2
 8001c0c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c10:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001c14:	6011      	str	r1, [r2, #0]
  return result;
 8001c16:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c1a:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	fab2 f282 	clz	r2, r2
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	f042 0220 	orr.w	r2, r2, #32
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	f002 021f 	and.w	r2, r2, #31
 8001c30:	2101      	movs	r1, #1
 8001c32:	fa01 f202 	lsl.w	r2, r1, r2
 8001c36:	4013      	ands	r3, r2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f43f af7f 	beq.w	8001b3c <HAL_RCC_OscConfig+0xdd8>
 8001c3e:	e0dd      	b.n	8001dfc <HAL_RCC_OscConfig+0x1098>
 8001c40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c44:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001c48:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c52:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	fa93 f2a3 	rbit	r2, r3
 8001c5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c60:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001c64:	601a      	str	r2, [r3, #0]
  return result;
 8001c66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c6a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001c6e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c70:	fab3 f383 	clz	r3, r3
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c7a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	461a      	mov	r2, r3
 8001c82:	2300      	movs	r3, #0
 8001c84:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c86:	f7fe fdad 	bl	80007e4 <HAL_GetTick>
 8001c8a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c8e:	e009      	b.n	8001ca4 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c90:	f7fe fda8 	bl	80007e4 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e0ac      	b.n	8001dfe <HAL_RCC_OscConfig+0x109a>
 8001ca4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ca8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001cac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cb6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	fa93 f2a3 	rbit	r2, r3
 8001cc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cc4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001cc8:	601a      	str	r2, [r3, #0]
  return result;
 8001cca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cce:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001cd2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd4:	fab3 f383 	clz	r3, r3
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	095b      	lsrs	r3, r3, #5
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d102      	bne.n	8001cee <HAL_RCC_OscConfig+0xf8a>
 8001ce8:	4b47      	ldr	r3, [pc, #284]	@ (8001e08 <HAL_RCC_OscConfig+0x10a4>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	e027      	b.n	8001d3e <HAL_RCC_OscConfig+0xfda>
 8001cee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cf2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001cf6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d00:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	fa93 f2a3 	rbit	r2, r3
 8001d0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d0e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d18:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001d1c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d26:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	fa93 f2a3 	rbit	r2, r3
 8001d30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d34:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	4b33      	ldr	r3, [pc, #204]	@ (8001e08 <HAL_RCC_OscConfig+0x10a4>)
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d42:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001d46:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001d4a:	6011      	str	r1, [r2, #0]
 8001d4c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d50:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	fa92 f1a2 	rbit	r1, r2
 8001d5a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d5e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001d62:	6011      	str	r1, [r2, #0]
  return result;
 8001d64:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d68:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001d6c:	6812      	ldr	r2, [r2, #0]
 8001d6e:	fab2 f282 	clz	r2, r2
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	f042 0220 	orr.w	r2, r2, #32
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	f002 021f 	and.w	r2, r2, #31
 8001d7e:	2101      	movs	r1, #1
 8001d80:	fa01 f202 	lsl.w	r2, r1, r2
 8001d84:	4013      	ands	r3, r2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d182      	bne.n	8001c90 <HAL_RCC_OscConfig+0xf2c>
 8001d8a:	e037      	b.n	8001dfc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d90:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e02e      	b.n	8001dfe <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001da0:	4b19      	ldr	r3, [pc, #100]	@ (8001e08 <HAL_RCC_OscConfig+0x10a4>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001da8:	4b17      	ldr	r3, [pc, #92]	@ (8001e08 <HAL_RCC_OscConfig+0x10a4>)
 8001daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dac:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001db0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001db4:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001db8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dbc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d117      	bne.n	8001df8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001dc8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001dcc:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001dd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dd4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d10b      	bne.n	8001df8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001de0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001de4:	f003 020f 	and.w	r2, r3, #15
 8001de8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d001      	beq.n	8001dfc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e000      	b.n	8001dfe <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40021000 	.word	0x40021000

08001e0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b09e      	sub	sp, #120	@ 0x78
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e162      	b.n	80020ea <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e24:	4b90      	ldr	r3, [pc, #576]	@ (8002068 <HAL_RCC_ClockConfig+0x25c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d910      	bls.n	8001e54 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e32:	4b8d      	ldr	r3, [pc, #564]	@ (8002068 <HAL_RCC_ClockConfig+0x25c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 0207 	bic.w	r2, r3, #7
 8001e3a:	498b      	ldr	r1, [pc, #556]	@ (8002068 <HAL_RCC_ClockConfig+0x25c>)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e42:	4b89      	ldr	r3, [pc, #548]	@ (8002068 <HAL_RCC_ClockConfig+0x25c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d001      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e14a      	b.n	80020ea <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d008      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e60:	4b82      	ldr	r3, [pc, #520]	@ (800206c <HAL_RCC_ClockConfig+0x260>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	497f      	ldr	r1, [pc, #508]	@ (800206c <HAL_RCC_ClockConfig+0x260>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 80dc 	beq.w	8002038 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d13c      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xf6>
 8001e88:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e8c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e90:	fa93 f3a3 	rbit	r3, r3
 8001e94:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001e96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e98:	fab3 f383 	clz	r3, r3
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	095b      	lsrs	r3, r3, #5
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d102      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xa6>
 8001eac:	4b6f      	ldr	r3, [pc, #444]	@ (800206c <HAL_RCC_ClockConfig+0x260>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	e00f      	b.n	8001ed2 <HAL_RCC_ClockConfig+0xc6>
 8001eb2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001eb6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ec0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ec4:	663b      	str	r3, [r7, #96]	@ 0x60
 8001ec6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ec8:	fa93 f3a3 	rbit	r3, r3
 8001ecc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001ece:	4b67      	ldr	r3, [pc, #412]	@ (800206c <HAL_RCC_ClockConfig+0x260>)
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ed6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001ed8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001eda:	fa92 f2a2 	rbit	r2, r2
 8001ede:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001ee0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001ee2:	fab2 f282 	clz	r2, r2
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	f042 0220 	orr.w	r2, r2, #32
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	f002 021f 	and.w	r2, r2, #31
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef8:	4013      	ands	r3, r2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d17b      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e0f3      	b.n	80020ea <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d13c      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x178>
 8001f0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f0e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f12:	fa93 f3a3 	rbit	r3, r3
 8001f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001f18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1a:	fab3 f383 	clz	r3, r3
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	095b      	lsrs	r3, r3, #5
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d102      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x128>
 8001f2e:	4b4f      	ldr	r3, [pc, #316]	@ (800206c <HAL_RCC_ClockConfig+0x260>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	e00f      	b.n	8001f54 <HAL_RCC_ClockConfig+0x148>
 8001f34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f38:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f3c:	fa93 f3a3 	rbit	r3, r3
 8001f40:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f46:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f50:	4b46      	ldr	r3, [pc, #280]	@ (800206c <HAL_RCC_ClockConfig+0x260>)
 8001f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f54:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f58:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001f5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001f5c:	fa92 f2a2 	rbit	r2, r2
 8001f60:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001f62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f64:	fab2 f282 	clz	r2, r2
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	f042 0220 	orr.w	r2, r2, #32
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	f002 021f 	and.w	r2, r2, #31
 8001f74:	2101      	movs	r1, #1
 8001f76:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d13a      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0b2      	b.n	80020ea <HAL_RCC_ClockConfig+0x2de>
 8001f84:	2302      	movs	r3, #2
 8001f86:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f8a:	fa93 f3a3 	rbit	r3, r3
 8001f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f92:	fab3 f383 	clz	r3, r3
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	095b      	lsrs	r3, r3, #5
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d102      	bne.n	8001fac <HAL_RCC_ClockConfig+0x1a0>
 8001fa6:	4b31      	ldr	r3, [pc, #196]	@ (800206c <HAL_RCC_ClockConfig+0x260>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	e00d      	b.n	8001fc8 <HAL_RCC_ClockConfig+0x1bc>
 8001fac:	2302      	movs	r3, #2
 8001fae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fb2:	fa93 f3a3 	rbit	r3, r3
 8001fb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fb8:	2302      	movs	r3, #2
 8001fba:	623b      	str	r3, [r7, #32]
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
 8001fbe:	fa93 f3a3 	rbit	r3, r3
 8001fc2:	61fb      	str	r3, [r7, #28]
 8001fc4:	4b29      	ldr	r3, [pc, #164]	@ (800206c <HAL_RCC_ClockConfig+0x260>)
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc8:	2202      	movs	r2, #2
 8001fca:	61ba      	str	r2, [r7, #24]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	fa92 f2a2 	rbit	r2, r2
 8001fd2:	617a      	str	r2, [r7, #20]
  return result;
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	fab2 f282 	clz	r2, r2
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	f042 0220 	orr.w	r2, r2, #32
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	f002 021f 	and.w	r2, r2, #31
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fec:	4013      	ands	r3, r2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e079      	b.n	80020ea <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800206c <HAL_RCC_ClockConfig+0x260>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f023 0203 	bic.w	r2, r3, #3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	491a      	ldr	r1, [pc, #104]	@ (800206c <HAL_RCC_ClockConfig+0x260>)
 8002004:	4313      	orrs	r3, r2
 8002006:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002008:	f7fe fbec 	bl	80007e4 <HAL_GetTick>
 800200c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200e:	e00a      	b.n	8002026 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002010:	f7fe fbe8 	bl	80007e4 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800201e:	4293      	cmp	r3, r2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e061      	b.n	80020ea <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002026:	4b11      	ldr	r3, [pc, #68]	@ (800206c <HAL_RCC_ClockConfig+0x260>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 020c 	and.w	r2, r3, #12
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	429a      	cmp	r2, r3
 8002036:	d1eb      	bne.n	8002010 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002038:	4b0b      	ldr	r3, [pc, #44]	@ (8002068 <HAL_RCC_ClockConfig+0x25c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d214      	bcs.n	8002070 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002046:	4b08      	ldr	r3, [pc, #32]	@ (8002068 <HAL_RCC_ClockConfig+0x25c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 0207 	bic.w	r2, r3, #7
 800204e:	4906      	ldr	r1, [pc, #24]	@ (8002068 <HAL_RCC_ClockConfig+0x25c>)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	4313      	orrs	r3, r2
 8002054:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002056:	4b04      	ldr	r3, [pc, #16]	@ (8002068 <HAL_RCC_ClockConfig+0x25c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d005      	beq.n	8002070 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e040      	b.n	80020ea <HAL_RCC_ClockConfig+0x2de>
 8002068:	40022000 	.word	0x40022000
 800206c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	d008      	beq.n	800208e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800207c:	4b1d      	ldr	r3, [pc, #116]	@ (80020f4 <HAL_RCC_ClockConfig+0x2e8>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	491a      	ldr	r1, [pc, #104]	@ (80020f4 <HAL_RCC_ClockConfig+0x2e8>)
 800208a:	4313      	orrs	r3, r2
 800208c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b00      	cmp	r3, #0
 8002098:	d009      	beq.n	80020ae <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800209a:	4b16      	ldr	r3, [pc, #88]	@ (80020f4 <HAL_RCC_ClockConfig+0x2e8>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	4912      	ldr	r1, [pc, #72]	@ (80020f4 <HAL_RCC_ClockConfig+0x2e8>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020ae:	f000 f829 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 80020b2:	4601      	mov	r1, r0
 80020b4:	4b0f      	ldr	r3, [pc, #60]	@ (80020f4 <HAL_RCC_ClockConfig+0x2e8>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020bc:	22f0      	movs	r2, #240	@ 0xf0
 80020be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	fa92 f2a2 	rbit	r2, r2
 80020c6:	60fa      	str	r2, [r7, #12]
  return result;
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	fab2 f282 	clz	r2, r2
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	40d3      	lsrs	r3, r2
 80020d2:	4a09      	ldr	r2, [pc, #36]	@ (80020f8 <HAL_RCC_ClockConfig+0x2ec>)
 80020d4:	5cd3      	ldrb	r3, [r2, r3]
 80020d6:	fa21 f303 	lsr.w	r3, r1, r3
 80020da:	4a08      	ldr	r2, [pc, #32]	@ (80020fc <HAL_RCC_ClockConfig+0x2f0>)
 80020dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80020de:	4b08      	ldr	r3, [pc, #32]	@ (8002100 <HAL_RCC_ClockConfig+0x2f4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe fb3a 	bl	800075c <HAL_InitTick>
  
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3778      	adds	r7, #120	@ 0x78
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40021000 	.word	0x40021000
 80020f8:	080038dc 	.word	0x080038dc
 80020fc:	20000000 	.word	0x20000000
 8002100:	20000004 	.word	0x20000004

08002104 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002104:	b480      	push	{r7}
 8002106:	b087      	sub	sp, #28
 8002108:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800211e:	4b1f      	ldr	r3, [pc, #124]	@ (800219c <HAL_RCC_GetSysClockFreq+0x98>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b04      	cmp	r3, #4
 800212c:	d002      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0x30>
 800212e:	2b08      	cmp	r3, #8
 8002130:	d003      	beq.n	800213a <HAL_RCC_GetSysClockFreq+0x36>
 8002132:	e029      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002134:	4b1a      	ldr	r3, [pc, #104]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002136:	613b      	str	r3, [r7, #16]
      break;
 8002138:	e029      	b.n	800218e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	0c9b      	lsrs	r3, r3, #18
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	4a18      	ldr	r2, [pc, #96]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002144:	5cd3      	ldrb	r3, [r2, r3]
 8002146:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002148:	4b14      	ldr	r3, [pc, #80]	@ (800219c <HAL_RCC_GetSysClockFreq+0x98>)
 800214a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	4a15      	ldr	r2, [pc, #84]	@ (80021a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002152:	5cd3      	ldrb	r3, [r2, r3]
 8002154:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d008      	beq.n	8002172 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002160:	4a0f      	ldr	r2, [pc, #60]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	fbb2 f2f3 	udiv	r2, r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	fb02 f303 	mul.w	r3, r2, r3
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	e007      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002172:	4a0b      	ldr	r2, [pc, #44]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	fbb2 f2f3 	udiv	r2, r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	fb02 f303 	mul.w	r3, r2, r3
 8002180:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	613b      	str	r3, [r7, #16]
      break;
 8002186:	e002      	b.n	800218e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002188:	4b05      	ldr	r3, [pc, #20]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800218a:	613b      	str	r3, [r7, #16]
      break;
 800218c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800218e:	693b      	ldr	r3, [r7, #16]
}
 8002190:	4618      	mov	r0, r3
 8002192:	371c      	adds	r7, #28
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	40021000 	.word	0x40021000
 80021a0:	007a1200 	.word	0x007a1200
 80021a4:	080038f4 	.word	0x080038f4
 80021a8:	08003904 	.word	0x08003904

080021ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021b0:	4b03      	ldr	r3, [pc, #12]	@ (80021c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80021b2:	681b      	ldr	r3, [r3, #0]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	20000000 	.word	0x20000000

080021c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80021ca:	f7ff ffef 	bl	80021ac <HAL_RCC_GetHCLKFreq>
 80021ce:	4601      	mov	r1, r0
 80021d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002200 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80021d8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80021dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	fa92 f2a2 	rbit	r2, r2
 80021e4:	603a      	str	r2, [r7, #0]
  return result;
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	fab2 f282 	clz	r2, r2
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	40d3      	lsrs	r3, r2
 80021f0:	4a04      	ldr	r2, [pc, #16]	@ (8002204 <HAL_RCC_GetPCLK1Freq+0x40>)
 80021f2:	5cd3      	ldrb	r3, [r2, r3]
 80021f4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40021000 	.word	0x40021000
 8002204:	080038ec 	.word	0x080038ec

08002208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800220e:	f7ff ffcd 	bl	80021ac <HAL_RCC_GetHCLKFreq>
 8002212:	4601      	mov	r1, r0
 8002214:	4b0b      	ldr	r3, [pc, #44]	@ (8002244 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800221c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002220:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	fa92 f2a2 	rbit	r2, r2
 8002228:	603a      	str	r2, [r7, #0]
  return result;
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	fab2 f282 	clz	r2, r2
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	40d3      	lsrs	r3, r2
 8002234:	4a04      	ldr	r2, [pc, #16]	@ (8002248 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002236:	5cd3      	ldrb	r3, [r2, r3]
 8002238:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800223c:	4618      	mov	r0, r3
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40021000 	.word	0x40021000
 8002248:	080038ec 	.word	0x080038ec

0800224c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b092      	sub	sp, #72	@ 0x48
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800225c:	2300      	movs	r3, #0
 800225e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 80d4 	beq.w	8002418 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002270:	4b4e      	ldr	r3, [pc, #312]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10e      	bne.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800227c:	4b4b      	ldr	r3, [pc, #300]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	4a4a      	ldr	r2, [pc, #296]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002282:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002286:	61d3      	str	r3, [r2, #28]
 8002288:	4b48      	ldr	r3, [pc, #288]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002294:	2301      	movs	r3, #1
 8002296:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229a:	4b45      	ldr	r3, [pc, #276]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d118      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022a6:	4b42      	ldr	r3, [pc, #264]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a41      	ldr	r2, [pc, #260]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022b2:	f7fe fa97 	bl	80007e4 <HAL_GetTick>
 80022b6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b8:	e008      	b.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ba:	f7fe fa93 	bl	80007e4 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b64      	cmp	r3, #100	@ 0x64
 80022c6:	d901      	bls.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e1d6      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022cc:	4b38      	ldr	r3, [pc, #224]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0f0      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022d8:	4b34      	ldr	r3, [pc, #208]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 8084 	beq.w	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d07c      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022f8:	4b2c      	ldr	r3, [pc, #176]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002300:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002302:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002306:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800230a:	fa93 f3a3 	rbit	r3, r3
 800230e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002312:	fab3 f383 	clz	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	461a      	mov	r2, r3
 800231a:	4b26      	ldr	r3, [pc, #152]	@ (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	461a      	mov	r2, r3
 8002322:	2301      	movs	r3, #1
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800232a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002336:	fab3 f383 	clz	r3, r3
 800233a:	b2db      	uxtb	r3, r3
 800233c:	461a      	mov	r2, r3
 800233e:	4b1d      	ldr	r3, [pc, #116]	@ (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002340:	4413      	add	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	461a      	mov	r2, r3
 8002346:	2300      	movs	r3, #0
 8002348:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800234a:	4a18      	ldr	r2, [pc, #96]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800234c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800234e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002350:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d04b      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235a:	f7fe fa43 	bl	80007e4 <HAL_GetTick>
 800235e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002360:	e00a      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002362:	f7fe fa3f 	bl	80007e4 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002370:	4293      	cmp	r3, r2
 8002372:	d901      	bls.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e180      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002378:	2302      	movs	r3, #2
 800237a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	627b      	str	r3, [r7, #36]	@ 0x24
 8002384:	2302      	movs	r3, #2
 8002386:	623b      	str	r3, [r7, #32]
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	fa93 f3a3 	rbit	r3, r3
 800238e:	61fb      	str	r3, [r7, #28]
  return result;
 8002390:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002392:	fab3 f383 	clz	r3, r3
 8002396:	b2db      	uxtb	r3, r3
 8002398:	095b      	lsrs	r3, r3, #5
 800239a:	b2db      	uxtb	r3, r3
 800239c:	f043 0302 	orr.w	r3, r3, #2
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d108      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80023a6:	4b01      	ldr	r3, [pc, #4]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	e00d      	b.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40007000 	.word	0x40007000
 80023b4:	10908100 	.word	0x10908100
 80023b8:	2302      	movs	r3, #2
 80023ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	fa93 f3a3 	rbit	r3, r3
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	4b9a      	ldr	r3, [pc, #616]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c8:	2202      	movs	r2, #2
 80023ca:	613a      	str	r2, [r7, #16]
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	fa92 f2a2 	rbit	r2, r2
 80023d2:	60fa      	str	r2, [r7, #12]
  return result;
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	fab2 f282 	clz	r2, r2
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	f002 021f 	and.w	r2, r2, #31
 80023e6:	2101      	movs	r1, #1
 80023e8:	fa01 f202 	lsl.w	r2, r1, r2
 80023ec:	4013      	ands	r3, r2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0b7      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80023f2:	4b8f      	ldr	r3, [pc, #572]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	498c      	ldr	r1, [pc, #560]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002400:	4313      	orrs	r3, r2
 8002402:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002404:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002408:	2b01      	cmp	r3, #1
 800240a:	d105      	bne.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800240c:	4b88      	ldr	r3, [pc, #544]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	4a87      	ldr	r2, [pc, #540]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002412:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002416:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002424:	4b82      	ldr	r3, [pc, #520]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002428:	f023 0203 	bic.w	r2, r3, #3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	497f      	ldr	r1, [pc, #508]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002432:	4313      	orrs	r3, r2
 8002434:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d008      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002442:	4b7b      	ldr	r3, [pc, #492]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002446:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	4978      	ldr	r1, [pc, #480]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002450:	4313      	orrs	r3, r2
 8002452:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002460:	4b73      	ldr	r3, [pc, #460]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002464:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	4970      	ldr	r1, [pc, #448]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800246e:	4313      	orrs	r3, r2
 8002470:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0320 	and.w	r3, r3, #32
 800247a:	2b00      	cmp	r3, #0
 800247c:	d008      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800247e:	4b6c      	ldr	r3, [pc, #432]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002482:	f023 0210 	bic.w	r2, r3, #16
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	4969      	ldr	r1, [pc, #420]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800248c:	4313      	orrs	r3, r2
 800248e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800249c:	4b64      	ldr	r3, [pc, #400]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a8:	4961      	ldr	r1, [pc, #388]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d008      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024ba:	4b5d      	ldr	r3, [pc, #372]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024be:	f023 0220 	bic.w	r2, r3, #32
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	495a      	ldr	r1, [pc, #360]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d008      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024d8:	4b55      	ldr	r3, [pc, #340]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024dc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e4:	4952      	ldr	r1, [pc, #328]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d008      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024f6:	4b4e      	ldr	r3, [pc, #312]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	494b      	ldr	r1, [pc, #300]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002504:	4313      	orrs	r3, r2
 8002506:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0310 	and.w	r3, r3, #16
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002514:	4b46      	ldr	r3, [pc, #280]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002518:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	4943      	ldr	r1, [pc, #268]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002522:	4313      	orrs	r3, r2
 8002524:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800252e:	2b00      	cmp	r3, #0
 8002530:	d008      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002532:	4b3f      	ldr	r3, [pc, #252]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	493c      	ldr	r1, [pc, #240]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800254c:	2b00      	cmp	r3, #0
 800254e:	d008      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002550:	4b37      	ldr	r3, [pc, #220]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002554:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255c:	4934      	ldr	r1, [pc, #208]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800255e:	4313      	orrs	r3, r2
 8002560:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800256a:	2b00      	cmp	r3, #0
 800256c:	d008      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800256e:	4b30      	ldr	r3, [pc, #192]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002572:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800257a:	492d      	ldr	r1, [pc, #180]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800257c:	4313      	orrs	r3, r2
 800257e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d008      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800258c:	4b28      	ldr	r3, [pc, #160]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800258e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002590:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002598:	4925      	ldr	r1, [pc, #148]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800259a:	4313      	orrs	r3, r2
 800259c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d008      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80025aa:	4b21      	ldr	r3, [pc, #132]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ae:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b6:	491e      	ldr	r1, [pc, #120]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80025c8:	4b19      	ldr	r3, [pc, #100]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025cc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d4:	4916      	ldr	r1, [pc, #88]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d008      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80025e6:	4b12      	ldr	r3, [pc, #72]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f2:	490f      	ldr	r1, [pc, #60]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d008      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002604:	4b0a      	ldr	r3, [pc, #40]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002608:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002610:	4907      	ldr	r1, [pc, #28]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002612:	4313      	orrs	r3, r2
 8002614:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00c      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002622:	4b03      	ldr	r3, [pc, #12]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002626:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	e002      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800262e:	bf00      	nop
 8002630:	40021000 	.word	0x40021000
 8002634:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002636:	4913      	ldr	r1, [pc, #76]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002638:	4313      	orrs	r3, r2
 800263a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d008      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002648:	4b0e      	ldr	r3, [pc, #56]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800264a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002654:	490b      	ldr	r1, [pc, #44]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002656:	4313      	orrs	r3, r2
 8002658:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d008      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002666:	4b07      	ldr	r3, [pc, #28]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002672:	4904      	ldr	r1, [pc, #16]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002674:	4313      	orrs	r3, r2
 8002676:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3748      	adds	r7, #72	@ 0x48
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000

08002688 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e049      	b.n	800272e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d106      	bne.n	80026b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7fd ff4c 	bl	800054c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3304      	adds	r3, #4
 80026c4:	4619      	mov	r1, r3
 80026c6:	4610      	mov	r0, r2
 80026c8:	f000 faa4 	bl	8002c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b01      	cmp	r3, #1
 800274a:	d001      	beq.n	8002750 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e04f      	b.n	80027f0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0201 	orr.w	r2, r2, #1
 8002766:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a23      	ldr	r2, [pc, #140]	@ (80027fc <HAL_TIM_Base_Start_IT+0xc4>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d01d      	beq.n	80027ae <HAL_TIM_Base_Start_IT+0x76>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800277a:	d018      	beq.n	80027ae <HAL_TIM_Base_Start_IT+0x76>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a1f      	ldr	r2, [pc, #124]	@ (8002800 <HAL_TIM_Base_Start_IT+0xc8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d013      	beq.n	80027ae <HAL_TIM_Base_Start_IT+0x76>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a1e      	ldr	r2, [pc, #120]	@ (8002804 <HAL_TIM_Base_Start_IT+0xcc>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d00e      	beq.n	80027ae <HAL_TIM_Base_Start_IT+0x76>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a1c      	ldr	r2, [pc, #112]	@ (8002808 <HAL_TIM_Base_Start_IT+0xd0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d009      	beq.n	80027ae <HAL_TIM_Base_Start_IT+0x76>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a1b      	ldr	r2, [pc, #108]	@ (800280c <HAL_TIM_Base_Start_IT+0xd4>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d004      	beq.n	80027ae <HAL_TIM_Base_Start_IT+0x76>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a19      	ldr	r2, [pc, #100]	@ (8002810 <HAL_TIM_Base_Start_IT+0xd8>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d115      	bne.n	80027da <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	4b17      	ldr	r3, [pc, #92]	@ (8002814 <HAL_TIM_Base_Start_IT+0xdc>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2b06      	cmp	r3, #6
 80027be:	d015      	beq.n	80027ec <HAL_TIM_Base_Start_IT+0xb4>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027c6:	d011      	beq.n	80027ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f042 0201 	orr.w	r2, r2, #1
 80027d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027d8:	e008      	b.n	80027ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f042 0201 	orr.w	r2, r2, #1
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	e000      	b.n	80027ee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	40012c00 	.word	0x40012c00
 8002800:	40000400 	.word	0x40000400
 8002804:	40000800 	.word	0x40000800
 8002808:	40013400 	.word	0x40013400
 800280c:	40014000 	.word	0x40014000
 8002810:	40015000 	.word	0x40015000
 8002814:	00010007 	.word	0x00010007

08002818 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d020      	beq.n	800287c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d01b      	beq.n	800287c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f06f 0202 	mvn.w	r2, #2
 800284c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f9b7 	bl	8002bd6 <HAL_TIM_IC_CaptureCallback>
 8002868:	e005      	b.n	8002876 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f9a9 	bl	8002bc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f9ba 	bl	8002bea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	2b00      	cmp	r3, #0
 8002884:	d020      	beq.n	80028c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	d01b      	beq.n	80028c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f06f 0204 	mvn.w	r2, #4
 8002898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2202      	movs	r2, #2
 800289e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f991 	bl	8002bd6 <HAL_TIM_IC_CaptureCallback>
 80028b4:	e005      	b.n	80028c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f983 	bl	8002bc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f994 	bl	8002bea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d020      	beq.n	8002914 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f003 0308 	and.w	r3, r3, #8
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d01b      	beq.n	8002914 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f06f 0208 	mvn.w	r2, #8
 80028e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2204      	movs	r2, #4
 80028ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f96b 	bl	8002bd6 <HAL_TIM_IC_CaptureCallback>
 8002900:	e005      	b.n	800290e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f95d 	bl	8002bc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f96e 	bl	8002bea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	f003 0310 	and.w	r3, r3, #16
 800291a:	2b00      	cmp	r3, #0
 800291c:	d020      	beq.n	8002960 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f003 0310 	and.w	r3, r3, #16
 8002924:	2b00      	cmp	r3, #0
 8002926:	d01b      	beq.n	8002960 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f06f 0210 	mvn.w	r2, #16
 8002930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2208      	movs	r2, #8
 8002936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f945 	bl	8002bd6 <HAL_TIM_IC_CaptureCallback>
 800294c:	e005      	b.n	800295a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f937 	bl	8002bc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f948 	bl	8002bea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00c      	beq.n	8002984 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b00      	cmp	r3, #0
 8002972:	d007      	beq.n	8002984 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f06f 0201 	mvn.w	r2, #1
 800297c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f915 	bl	8002bae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00c      	beq.n	80029a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002994:	2b00      	cmp	r3, #0
 8002996:	d007      	beq.n	80029a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80029a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 fb10 	bl	8002fc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00c      	beq.n	80029cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d007      	beq.n	80029cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80029c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fb08 	bl	8002fdc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00c      	beq.n	80029f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d007      	beq.n	80029f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80029e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f907 	bl	8002bfe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f003 0320 	and.w	r3, r3, #32
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00c      	beq.n	8002a14 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d007      	beq.n	8002a14 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f06f 0220 	mvn.w	r2, #32
 8002a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 fad0 	bl	8002fb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a14:	bf00      	nop
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d101      	bne.n	8002a38 <HAL_TIM_ConfigClockSource+0x1c>
 8002a34:	2302      	movs	r3, #2
 8002a36:	e0b6      	b.n	8002ba6 <HAL_TIM_ConfigClockSource+0x18a>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a56:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002a5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68ba      	ldr	r2, [r7, #8]
 8002a6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a74:	d03e      	beq.n	8002af4 <HAL_TIM_ConfigClockSource+0xd8>
 8002a76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a7a:	f200 8087 	bhi.w	8002b8c <HAL_TIM_ConfigClockSource+0x170>
 8002a7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a82:	f000 8086 	beq.w	8002b92 <HAL_TIM_ConfigClockSource+0x176>
 8002a86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a8a:	d87f      	bhi.n	8002b8c <HAL_TIM_ConfigClockSource+0x170>
 8002a8c:	2b70      	cmp	r3, #112	@ 0x70
 8002a8e:	d01a      	beq.n	8002ac6 <HAL_TIM_ConfigClockSource+0xaa>
 8002a90:	2b70      	cmp	r3, #112	@ 0x70
 8002a92:	d87b      	bhi.n	8002b8c <HAL_TIM_ConfigClockSource+0x170>
 8002a94:	2b60      	cmp	r3, #96	@ 0x60
 8002a96:	d050      	beq.n	8002b3a <HAL_TIM_ConfigClockSource+0x11e>
 8002a98:	2b60      	cmp	r3, #96	@ 0x60
 8002a9a:	d877      	bhi.n	8002b8c <HAL_TIM_ConfigClockSource+0x170>
 8002a9c:	2b50      	cmp	r3, #80	@ 0x50
 8002a9e:	d03c      	beq.n	8002b1a <HAL_TIM_ConfigClockSource+0xfe>
 8002aa0:	2b50      	cmp	r3, #80	@ 0x50
 8002aa2:	d873      	bhi.n	8002b8c <HAL_TIM_ConfigClockSource+0x170>
 8002aa4:	2b40      	cmp	r3, #64	@ 0x40
 8002aa6:	d058      	beq.n	8002b5a <HAL_TIM_ConfigClockSource+0x13e>
 8002aa8:	2b40      	cmp	r3, #64	@ 0x40
 8002aaa:	d86f      	bhi.n	8002b8c <HAL_TIM_ConfigClockSource+0x170>
 8002aac:	2b30      	cmp	r3, #48	@ 0x30
 8002aae:	d064      	beq.n	8002b7a <HAL_TIM_ConfigClockSource+0x15e>
 8002ab0:	2b30      	cmp	r3, #48	@ 0x30
 8002ab2:	d86b      	bhi.n	8002b8c <HAL_TIM_ConfigClockSource+0x170>
 8002ab4:	2b20      	cmp	r3, #32
 8002ab6:	d060      	beq.n	8002b7a <HAL_TIM_ConfigClockSource+0x15e>
 8002ab8:	2b20      	cmp	r3, #32
 8002aba:	d867      	bhi.n	8002b8c <HAL_TIM_ConfigClockSource+0x170>
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d05c      	beq.n	8002b7a <HAL_TIM_ConfigClockSource+0x15e>
 8002ac0:	2b10      	cmp	r3, #16
 8002ac2:	d05a      	beq.n	8002b7a <HAL_TIM_ConfigClockSource+0x15e>
 8002ac4:	e062      	b.n	8002b8c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ad6:	f000 f9c1 	bl	8002e5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002ae8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	609a      	str	r2, [r3, #8]
      break;
 8002af2:	e04f      	b.n	8002b94 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b04:	f000 f9aa 	bl	8002e5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689a      	ldr	r2, [r3, #8]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b16:	609a      	str	r2, [r3, #8]
      break;
 8002b18:	e03c      	b.n	8002b94 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b26:	461a      	mov	r2, r3
 8002b28:	f000 f91e 	bl	8002d68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2150      	movs	r1, #80	@ 0x50
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 f977 	bl	8002e26 <TIM_ITRx_SetConfig>
      break;
 8002b38:	e02c      	b.n	8002b94 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b46:	461a      	mov	r2, r3
 8002b48:	f000 f93d 	bl	8002dc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2160      	movs	r1, #96	@ 0x60
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 f967 	bl	8002e26 <TIM_ITRx_SetConfig>
      break;
 8002b58:	e01c      	b.n	8002b94 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b66:	461a      	mov	r2, r3
 8002b68:	f000 f8fe 	bl	8002d68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2140      	movs	r1, #64	@ 0x40
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 f957 	bl	8002e26 <TIM_ITRx_SetConfig>
      break;
 8002b78:	e00c      	b.n	8002b94 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4619      	mov	r1, r3
 8002b84:	4610      	mov	r0, r2
 8002b86:	f000 f94e 	bl	8002e26 <TIM_ITRx_SetConfig>
      break;
 8002b8a:	e003      	b.n	8002b94 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b90:	e000      	b.n	8002b94 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002b92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
	...

08002c14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a48      	ldr	r2, [pc, #288]	@ (8002d48 <TIM_Base_SetConfig+0x134>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d013      	beq.n	8002c54 <TIM_Base_SetConfig+0x40>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c32:	d00f      	beq.n	8002c54 <TIM_Base_SetConfig+0x40>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a45      	ldr	r2, [pc, #276]	@ (8002d4c <TIM_Base_SetConfig+0x138>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d00b      	beq.n	8002c54 <TIM_Base_SetConfig+0x40>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a44      	ldr	r2, [pc, #272]	@ (8002d50 <TIM_Base_SetConfig+0x13c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d007      	beq.n	8002c54 <TIM_Base_SetConfig+0x40>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a43      	ldr	r2, [pc, #268]	@ (8002d54 <TIM_Base_SetConfig+0x140>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d003      	beq.n	8002c54 <TIM_Base_SetConfig+0x40>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a42      	ldr	r2, [pc, #264]	@ (8002d58 <TIM_Base_SetConfig+0x144>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d108      	bne.n	8002c66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a37      	ldr	r2, [pc, #220]	@ (8002d48 <TIM_Base_SetConfig+0x134>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d01f      	beq.n	8002cae <TIM_Base_SetConfig+0x9a>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c74:	d01b      	beq.n	8002cae <TIM_Base_SetConfig+0x9a>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a34      	ldr	r2, [pc, #208]	@ (8002d4c <TIM_Base_SetConfig+0x138>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d017      	beq.n	8002cae <TIM_Base_SetConfig+0x9a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a33      	ldr	r2, [pc, #204]	@ (8002d50 <TIM_Base_SetConfig+0x13c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d013      	beq.n	8002cae <TIM_Base_SetConfig+0x9a>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a32      	ldr	r2, [pc, #200]	@ (8002d54 <TIM_Base_SetConfig+0x140>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00f      	beq.n	8002cae <TIM_Base_SetConfig+0x9a>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a32      	ldr	r2, [pc, #200]	@ (8002d5c <TIM_Base_SetConfig+0x148>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00b      	beq.n	8002cae <TIM_Base_SetConfig+0x9a>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a31      	ldr	r2, [pc, #196]	@ (8002d60 <TIM_Base_SetConfig+0x14c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d007      	beq.n	8002cae <TIM_Base_SetConfig+0x9a>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a30      	ldr	r2, [pc, #192]	@ (8002d64 <TIM_Base_SetConfig+0x150>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d003      	beq.n	8002cae <TIM_Base_SetConfig+0x9a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a2b      	ldr	r2, [pc, #172]	@ (8002d58 <TIM_Base_SetConfig+0x144>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d108      	bne.n	8002cc0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a18      	ldr	r2, [pc, #96]	@ (8002d48 <TIM_Base_SetConfig+0x134>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d013      	beq.n	8002d14 <TIM_Base_SetConfig+0x100>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a19      	ldr	r2, [pc, #100]	@ (8002d54 <TIM_Base_SetConfig+0x140>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d00f      	beq.n	8002d14 <TIM_Base_SetConfig+0x100>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a19      	ldr	r2, [pc, #100]	@ (8002d5c <TIM_Base_SetConfig+0x148>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d00b      	beq.n	8002d14 <TIM_Base_SetConfig+0x100>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a18      	ldr	r2, [pc, #96]	@ (8002d60 <TIM_Base_SetConfig+0x14c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d007      	beq.n	8002d14 <TIM_Base_SetConfig+0x100>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a17      	ldr	r2, [pc, #92]	@ (8002d64 <TIM_Base_SetConfig+0x150>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d003      	beq.n	8002d14 <TIM_Base_SetConfig+0x100>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a12      	ldr	r2, [pc, #72]	@ (8002d58 <TIM_Base_SetConfig+0x144>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d103      	bne.n	8002d1c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d105      	bne.n	8002d3a <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f023 0201 	bic.w	r2, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	611a      	str	r2, [r3, #16]
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40012c00 	.word	0x40012c00
 8002d4c:	40000400 	.word	0x40000400
 8002d50:	40000800 	.word	0x40000800
 8002d54:	40013400 	.word	0x40013400
 8002d58:	40015000 	.word	0x40015000
 8002d5c:	40014000 	.word	0x40014000
 8002d60:	40014400 	.word	0x40014400
 8002d64:	40014800 	.word	0x40014800

08002d68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	f023 0201 	bic.w	r2, r3, #1
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f023 030a 	bic.w	r3, r3, #10
 8002da4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	621a      	str	r2, [r3, #32]
}
 8002dba:	bf00      	nop
 8002dbc:	371c      	adds	r7, #28
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b087      	sub	sp, #28
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	f023 0210 	bic.w	r2, r3, #16
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002df0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	031b      	lsls	r3, r3, #12
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002e02:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	621a      	str	r2, [r3, #32]
}
 8002e1a:	bf00      	nop
 8002e1c:	371c      	adds	r7, #28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b085      	sub	sp, #20
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f043 0307 	orr.w	r3, r3, #7
 8002e48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	609a      	str	r2, [r3, #8]
}
 8002e50:	bf00      	nop
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b087      	sub	sp, #28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
 8002e68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	021a      	lsls	r2, r3, #8
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	609a      	str	r2, [r3, #8]
}
 8002e90:	bf00      	nop
 8002e92:	371c      	adds	r7, #28
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e06d      	b.n	8002f90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a30      	ldr	r2, [pc, #192]	@ (8002f9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d009      	beq.n	8002ef2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a2f      	ldr	r2, [pc, #188]	@ (8002fa0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d004      	beq.n	8002ef2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a2d      	ldr	r2, [pc, #180]	@ (8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d108      	bne.n	8002f04 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002ef8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a1e      	ldr	r2, [pc, #120]	@ (8002f9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d01d      	beq.n	8002f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f30:	d018      	beq.n	8002f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a1c      	ldr	r2, [pc, #112]	@ (8002fa8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d013      	beq.n	8002f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a1a      	ldr	r2, [pc, #104]	@ (8002fac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00e      	beq.n	8002f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a15      	ldr	r2, [pc, #84]	@ (8002fa0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d009      	beq.n	8002f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a16      	ldr	r2, [pc, #88]	@ (8002fb0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d004      	beq.n	8002f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a11      	ldr	r2, [pc, #68]	@ (8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d10c      	bne.n	8002f7e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	40012c00 	.word	0x40012c00
 8002fa0:	40013400 	.word	0x40013400
 8002fa4:	40015000 	.word	0x40015000
 8002fa8:	40000400 	.word	0x40000400
 8002fac:	40000800 	.word	0x40000800
 8002fb0:	40014000 	.word	0x40014000

08002fb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e040      	b.n	8003084 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003006:	2b00      	cmp	r3, #0
 8003008:	d106      	bne.n	8003018 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7fd fabe 	bl	8000594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2224      	movs	r2, #36	@ 0x24
 800301c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0201 	bic.w	r2, r2, #1
 800302c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f9fc 	bl	8003434 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f825 	bl	800308c <UART_SetConfig>
 8003042:	4603      	mov	r3, r0
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e01b      	b.n	8003084 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800305a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689a      	ldr	r2, [r3, #8]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800306a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 0201 	orr.w	r2, r2, #1
 800307a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 fa7b 	bl	8003578 <UART_CheckIdleState>
 8003082:	4603      	mov	r3, r0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b088      	sub	sp, #32
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	431a      	orrs	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	4b92      	ldr	r3, [pc, #584]	@ (8003300 <UART_SetConfig+0x274>)
 80030b8:	4013      	ands	r3, r2
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6812      	ldr	r2, [r2, #0]
 80030be:	6979      	ldr	r1, [r7, #20]
 80030c0:	430b      	orrs	r3, r1
 80030c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a80      	ldr	r2, [pc, #512]	@ (8003304 <UART_SetConfig+0x278>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d120      	bne.n	800314a <UART_SetConfig+0xbe>
 8003108:	4b7f      	ldr	r3, [pc, #508]	@ (8003308 <UART_SetConfig+0x27c>)
 800310a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310c:	f003 0303 	and.w	r3, r3, #3
 8003110:	2b03      	cmp	r3, #3
 8003112:	d817      	bhi.n	8003144 <UART_SetConfig+0xb8>
 8003114:	a201      	add	r2, pc, #4	@ (adr r2, 800311c <UART_SetConfig+0x90>)
 8003116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311a:	bf00      	nop
 800311c:	0800312d 	.word	0x0800312d
 8003120:	08003139 	.word	0x08003139
 8003124:	0800313f 	.word	0x0800313f
 8003128:	08003133 	.word	0x08003133
 800312c:	2301      	movs	r3, #1
 800312e:	77fb      	strb	r3, [r7, #31]
 8003130:	e0b5      	b.n	800329e <UART_SetConfig+0x212>
 8003132:	2302      	movs	r3, #2
 8003134:	77fb      	strb	r3, [r7, #31]
 8003136:	e0b2      	b.n	800329e <UART_SetConfig+0x212>
 8003138:	2304      	movs	r3, #4
 800313a:	77fb      	strb	r3, [r7, #31]
 800313c:	e0af      	b.n	800329e <UART_SetConfig+0x212>
 800313e:	2308      	movs	r3, #8
 8003140:	77fb      	strb	r3, [r7, #31]
 8003142:	e0ac      	b.n	800329e <UART_SetConfig+0x212>
 8003144:	2310      	movs	r3, #16
 8003146:	77fb      	strb	r3, [r7, #31]
 8003148:	e0a9      	b.n	800329e <UART_SetConfig+0x212>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a6f      	ldr	r2, [pc, #444]	@ (800330c <UART_SetConfig+0x280>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d124      	bne.n	800319e <UART_SetConfig+0x112>
 8003154:	4b6c      	ldr	r3, [pc, #432]	@ (8003308 <UART_SetConfig+0x27c>)
 8003156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003158:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800315c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003160:	d011      	beq.n	8003186 <UART_SetConfig+0xfa>
 8003162:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003166:	d817      	bhi.n	8003198 <UART_SetConfig+0x10c>
 8003168:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800316c:	d011      	beq.n	8003192 <UART_SetConfig+0x106>
 800316e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003172:	d811      	bhi.n	8003198 <UART_SetConfig+0x10c>
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <UART_SetConfig+0xf4>
 8003178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800317c:	d006      	beq.n	800318c <UART_SetConfig+0x100>
 800317e:	e00b      	b.n	8003198 <UART_SetConfig+0x10c>
 8003180:	2300      	movs	r3, #0
 8003182:	77fb      	strb	r3, [r7, #31]
 8003184:	e08b      	b.n	800329e <UART_SetConfig+0x212>
 8003186:	2302      	movs	r3, #2
 8003188:	77fb      	strb	r3, [r7, #31]
 800318a:	e088      	b.n	800329e <UART_SetConfig+0x212>
 800318c:	2304      	movs	r3, #4
 800318e:	77fb      	strb	r3, [r7, #31]
 8003190:	e085      	b.n	800329e <UART_SetConfig+0x212>
 8003192:	2308      	movs	r3, #8
 8003194:	77fb      	strb	r3, [r7, #31]
 8003196:	e082      	b.n	800329e <UART_SetConfig+0x212>
 8003198:	2310      	movs	r3, #16
 800319a:	77fb      	strb	r3, [r7, #31]
 800319c:	e07f      	b.n	800329e <UART_SetConfig+0x212>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a5b      	ldr	r2, [pc, #364]	@ (8003310 <UART_SetConfig+0x284>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d124      	bne.n	80031f2 <UART_SetConfig+0x166>
 80031a8:	4b57      	ldr	r3, [pc, #348]	@ (8003308 <UART_SetConfig+0x27c>)
 80031aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ac:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80031b0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80031b4:	d011      	beq.n	80031da <UART_SetConfig+0x14e>
 80031b6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80031ba:	d817      	bhi.n	80031ec <UART_SetConfig+0x160>
 80031bc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80031c0:	d011      	beq.n	80031e6 <UART_SetConfig+0x15a>
 80031c2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80031c6:	d811      	bhi.n	80031ec <UART_SetConfig+0x160>
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <UART_SetConfig+0x148>
 80031cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80031d0:	d006      	beq.n	80031e0 <UART_SetConfig+0x154>
 80031d2:	e00b      	b.n	80031ec <UART_SetConfig+0x160>
 80031d4:	2300      	movs	r3, #0
 80031d6:	77fb      	strb	r3, [r7, #31]
 80031d8:	e061      	b.n	800329e <UART_SetConfig+0x212>
 80031da:	2302      	movs	r3, #2
 80031dc:	77fb      	strb	r3, [r7, #31]
 80031de:	e05e      	b.n	800329e <UART_SetConfig+0x212>
 80031e0:	2304      	movs	r3, #4
 80031e2:	77fb      	strb	r3, [r7, #31]
 80031e4:	e05b      	b.n	800329e <UART_SetConfig+0x212>
 80031e6:	2308      	movs	r3, #8
 80031e8:	77fb      	strb	r3, [r7, #31]
 80031ea:	e058      	b.n	800329e <UART_SetConfig+0x212>
 80031ec:	2310      	movs	r3, #16
 80031ee:	77fb      	strb	r3, [r7, #31]
 80031f0:	e055      	b.n	800329e <UART_SetConfig+0x212>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a47      	ldr	r2, [pc, #284]	@ (8003314 <UART_SetConfig+0x288>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d124      	bne.n	8003246 <UART_SetConfig+0x1ba>
 80031fc:	4b42      	ldr	r3, [pc, #264]	@ (8003308 <UART_SetConfig+0x27c>)
 80031fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003200:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003204:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003208:	d011      	beq.n	800322e <UART_SetConfig+0x1a2>
 800320a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800320e:	d817      	bhi.n	8003240 <UART_SetConfig+0x1b4>
 8003210:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003214:	d011      	beq.n	800323a <UART_SetConfig+0x1ae>
 8003216:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800321a:	d811      	bhi.n	8003240 <UART_SetConfig+0x1b4>
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <UART_SetConfig+0x19c>
 8003220:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003224:	d006      	beq.n	8003234 <UART_SetConfig+0x1a8>
 8003226:	e00b      	b.n	8003240 <UART_SetConfig+0x1b4>
 8003228:	2300      	movs	r3, #0
 800322a:	77fb      	strb	r3, [r7, #31]
 800322c:	e037      	b.n	800329e <UART_SetConfig+0x212>
 800322e:	2302      	movs	r3, #2
 8003230:	77fb      	strb	r3, [r7, #31]
 8003232:	e034      	b.n	800329e <UART_SetConfig+0x212>
 8003234:	2304      	movs	r3, #4
 8003236:	77fb      	strb	r3, [r7, #31]
 8003238:	e031      	b.n	800329e <UART_SetConfig+0x212>
 800323a:	2308      	movs	r3, #8
 800323c:	77fb      	strb	r3, [r7, #31]
 800323e:	e02e      	b.n	800329e <UART_SetConfig+0x212>
 8003240:	2310      	movs	r3, #16
 8003242:	77fb      	strb	r3, [r7, #31]
 8003244:	e02b      	b.n	800329e <UART_SetConfig+0x212>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a33      	ldr	r2, [pc, #204]	@ (8003318 <UART_SetConfig+0x28c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d124      	bne.n	800329a <UART_SetConfig+0x20e>
 8003250:	4b2d      	ldr	r3, [pc, #180]	@ (8003308 <UART_SetConfig+0x27c>)
 8003252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003254:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003258:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800325c:	d011      	beq.n	8003282 <UART_SetConfig+0x1f6>
 800325e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003262:	d817      	bhi.n	8003294 <UART_SetConfig+0x208>
 8003264:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003268:	d011      	beq.n	800328e <UART_SetConfig+0x202>
 800326a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800326e:	d811      	bhi.n	8003294 <UART_SetConfig+0x208>
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <UART_SetConfig+0x1f0>
 8003274:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003278:	d006      	beq.n	8003288 <UART_SetConfig+0x1fc>
 800327a:	e00b      	b.n	8003294 <UART_SetConfig+0x208>
 800327c:	2300      	movs	r3, #0
 800327e:	77fb      	strb	r3, [r7, #31]
 8003280:	e00d      	b.n	800329e <UART_SetConfig+0x212>
 8003282:	2302      	movs	r3, #2
 8003284:	77fb      	strb	r3, [r7, #31]
 8003286:	e00a      	b.n	800329e <UART_SetConfig+0x212>
 8003288:	2304      	movs	r3, #4
 800328a:	77fb      	strb	r3, [r7, #31]
 800328c:	e007      	b.n	800329e <UART_SetConfig+0x212>
 800328e:	2308      	movs	r3, #8
 8003290:	77fb      	strb	r3, [r7, #31]
 8003292:	e004      	b.n	800329e <UART_SetConfig+0x212>
 8003294:	2310      	movs	r3, #16
 8003296:	77fb      	strb	r3, [r7, #31]
 8003298:	e001      	b.n	800329e <UART_SetConfig+0x212>
 800329a:	2310      	movs	r3, #16
 800329c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032a6:	d16b      	bne.n	8003380 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80032a8:	7ffb      	ldrb	r3, [r7, #31]
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d838      	bhi.n	8003320 <UART_SetConfig+0x294>
 80032ae:	a201      	add	r2, pc, #4	@ (adr r2, 80032b4 <UART_SetConfig+0x228>)
 80032b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b4:	080032d9 	.word	0x080032d9
 80032b8:	080032e1 	.word	0x080032e1
 80032bc:	080032e9 	.word	0x080032e9
 80032c0:	08003321 	.word	0x08003321
 80032c4:	080032ef 	.word	0x080032ef
 80032c8:	08003321 	.word	0x08003321
 80032cc:	08003321 	.word	0x08003321
 80032d0:	08003321 	.word	0x08003321
 80032d4:	080032f7 	.word	0x080032f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032d8:	f7fe ff74 	bl	80021c4 <HAL_RCC_GetPCLK1Freq>
 80032dc:	61b8      	str	r0, [r7, #24]
        break;
 80032de:	e024      	b.n	800332a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032e0:	f7fe ff92 	bl	8002208 <HAL_RCC_GetPCLK2Freq>
 80032e4:	61b8      	str	r0, [r7, #24]
        break;
 80032e6:	e020      	b.n	800332a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032e8:	4b0c      	ldr	r3, [pc, #48]	@ (800331c <UART_SetConfig+0x290>)
 80032ea:	61bb      	str	r3, [r7, #24]
        break;
 80032ec:	e01d      	b.n	800332a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ee:	f7fe ff09 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 80032f2:	61b8      	str	r0, [r7, #24]
        break;
 80032f4:	e019      	b.n	800332a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032fa:	61bb      	str	r3, [r7, #24]
        break;
 80032fc:	e015      	b.n	800332a <UART_SetConfig+0x29e>
 80032fe:	bf00      	nop
 8003300:	efff69f3 	.word	0xefff69f3
 8003304:	40013800 	.word	0x40013800
 8003308:	40021000 	.word	0x40021000
 800330c:	40004400 	.word	0x40004400
 8003310:	40004800 	.word	0x40004800
 8003314:	40004c00 	.word	0x40004c00
 8003318:	40005000 	.word	0x40005000
 800331c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	77bb      	strb	r3, [r7, #30]
        break;
 8003328:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d073      	beq.n	8003418 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	005a      	lsls	r2, r3, #1
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	085b      	lsrs	r3, r3, #1
 800333a:	441a      	add	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	fbb2 f3f3 	udiv	r3, r2, r3
 8003344:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	2b0f      	cmp	r3, #15
 800334a:	d916      	bls.n	800337a <UART_SetConfig+0x2ee>
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003352:	d212      	bcs.n	800337a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	b29b      	uxth	r3, r3
 8003358:	f023 030f 	bic.w	r3, r3, #15
 800335c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	085b      	lsrs	r3, r3, #1
 8003362:	b29b      	uxth	r3, r3
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	b29a      	uxth	r2, r3
 800336a:	89fb      	ldrh	r3, [r7, #14]
 800336c:	4313      	orrs	r3, r2
 800336e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	89fa      	ldrh	r2, [r7, #14]
 8003376:	60da      	str	r2, [r3, #12]
 8003378:	e04e      	b.n	8003418 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	77bb      	strb	r3, [r7, #30]
 800337e:	e04b      	b.n	8003418 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003380:	7ffb      	ldrb	r3, [r7, #31]
 8003382:	2b08      	cmp	r3, #8
 8003384:	d827      	bhi.n	80033d6 <UART_SetConfig+0x34a>
 8003386:	a201      	add	r2, pc, #4	@ (adr r2, 800338c <UART_SetConfig+0x300>)
 8003388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338c:	080033b1 	.word	0x080033b1
 8003390:	080033b9 	.word	0x080033b9
 8003394:	080033c1 	.word	0x080033c1
 8003398:	080033d7 	.word	0x080033d7
 800339c:	080033c7 	.word	0x080033c7
 80033a0:	080033d7 	.word	0x080033d7
 80033a4:	080033d7 	.word	0x080033d7
 80033a8:	080033d7 	.word	0x080033d7
 80033ac:	080033cf 	.word	0x080033cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033b0:	f7fe ff08 	bl	80021c4 <HAL_RCC_GetPCLK1Freq>
 80033b4:	61b8      	str	r0, [r7, #24]
        break;
 80033b6:	e013      	b.n	80033e0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033b8:	f7fe ff26 	bl	8002208 <HAL_RCC_GetPCLK2Freq>
 80033bc:	61b8      	str	r0, [r7, #24]
        break;
 80033be:	e00f      	b.n	80033e0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003430 <UART_SetConfig+0x3a4>)
 80033c2:	61bb      	str	r3, [r7, #24]
        break;
 80033c4:	e00c      	b.n	80033e0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033c6:	f7fe fe9d 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 80033ca:	61b8      	str	r0, [r7, #24]
        break;
 80033cc:	e008      	b.n	80033e0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033d2:	61bb      	str	r3, [r7, #24]
        break;
 80033d4:	e004      	b.n	80033e0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	77bb      	strb	r3, [r7, #30]
        break;
 80033de:	bf00      	nop
    }

    if (pclk != 0U)
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d018      	beq.n	8003418 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	085a      	lsrs	r2, r3, #1
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	441a      	add	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	2b0f      	cmp	r3, #15
 80033fe:	d909      	bls.n	8003414 <UART_SetConfig+0x388>
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003406:	d205      	bcs.n	8003414 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	b29a      	uxth	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	60da      	str	r2, [r3, #12]
 8003412:	e001      	b.n	8003418 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003424:	7fbb      	ldrb	r3, [r7, #30]
}
 8003426:	4618      	mov	r0, r3
 8003428:	3720      	adds	r7, #32
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	007a1200 	.word	0x007a1200

08003434 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00a      	beq.n	800345e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00a      	beq.n	8003480 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00a      	beq.n	80034a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c8:	f003 0310 	and.w	r3, r3, #16
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00a      	beq.n	80034e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ea:	f003 0320 	and.w	r3, r3, #32
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003510:	2b00      	cmp	r3, #0
 8003512:	d01a      	beq.n	800354a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003532:	d10a      	bne.n	800354a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00a      	beq.n	800356c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	605a      	str	r2, [r3, #4]
  }
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b098      	sub	sp, #96	@ 0x60
 800357c:	af02      	add	r7, sp, #8
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003588:	f7fd f92c 	bl	80007e4 <HAL_GetTick>
 800358c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	2b08      	cmp	r3, #8
 800359a:	d12e      	bne.n	80035fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800359c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035a4:	2200      	movs	r2, #0
 80035a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f88c 	bl	80036c8 <UART_WaitOnFlagUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d021      	beq.n	80035fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035be:	e853 3f00 	ldrex	r3, [r3]
 80035c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	461a      	mov	r2, r3
 80035d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80035d6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035dc:	e841 2300 	strex	r3, r2, [r1]
 80035e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1e6      	bne.n	80035b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2220      	movs	r2, #32
 80035ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e062      	b.n	80036c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b04      	cmp	r3, #4
 8003606:	d149      	bne.n	800369c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003608:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003610:	2200      	movs	r2, #0
 8003612:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f856 	bl	80036c8 <UART_WaitOnFlagUntilTimeout>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d03c      	beq.n	800369c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362a:	e853 3f00 	ldrex	r3, [r3]
 800362e:	623b      	str	r3, [r7, #32]
   return(result);
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003636:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	461a      	mov	r2, r3
 800363e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003640:	633b      	str	r3, [r7, #48]	@ 0x30
 8003642:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003644:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003646:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003648:	e841 2300 	strex	r3, r2, [r1]
 800364c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800364e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1e6      	bne.n	8003622 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	3308      	adds	r3, #8
 800365a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	e853 3f00 	ldrex	r3, [r3]
 8003662:	60fb      	str	r3, [r7, #12]
   return(result);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f023 0301 	bic.w	r3, r3, #1
 800366a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3308      	adds	r3, #8
 8003672:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003674:	61fa      	str	r2, [r7, #28]
 8003676:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003678:	69b9      	ldr	r1, [r7, #24]
 800367a:	69fa      	ldr	r2, [r7, #28]
 800367c:	e841 2300 	strex	r3, r2, [r1]
 8003680:	617b      	str	r3, [r7, #20]
   return(result);
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1e5      	bne.n	8003654 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2220      	movs	r2, #32
 800368c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e011      	b.n	80036c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2220      	movs	r2, #32
 80036a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2220      	movs	r2, #32
 80036a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3758      	adds	r7, #88	@ 0x58
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	603b      	str	r3, [r7, #0]
 80036d4:	4613      	mov	r3, r2
 80036d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036d8:	e04f      	b.n	800377a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e0:	d04b      	beq.n	800377a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e2:	f7fd f87f 	bl	80007e4 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d302      	bcc.n	80036f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e04e      	b.n	800379a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b00      	cmp	r3, #0
 8003708:	d037      	beq.n	800377a <UART_WaitOnFlagUntilTimeout+0xb2>
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b80      	cmp	r3, #128	@ 0x80
 800370e:	d034      	beq.n	800377a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b40      	cmp	r3, #64	@ 0x40
 8003714:	d031      	beq.n	800377a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	f003 0308 	and.w	r3, r3, #8
 8003720:	2b08      	cmp	r3, #8
 8003722:	d110      	bne.n	8003746 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2208      	movs	r2, #8
 800372a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 f838 	bl	80037a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2208      	movs	r2, #8
 8003736:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e029      	b.n	800379a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003750:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003754:	d111      	bne.n	800377a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800375e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 f81e 	bl	80037a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2220      	movs	r2, #32
 800376a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e00f      	b.n	800379a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	69da      	ldr	r2, [r3, #28]
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	4013      	ands	r3, r2
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	429a      	cmp	r2, r3
 8003788:	bf0c      	ite	eq
 800378a:	2301      	moveq	r3, #1
 800378c:	2300      	movne	r3, #0
 800378e:	b2db      	uxtb	r3, r3
 8003790:	461a      	mov	r2, r3
 8003792:	79fb      	ldrb	r3, [r7, #7]
 8003794:	429a      	cmp	r2, r3
 8003796:	d0a0      	beq.n	80036da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b095      	sub	sp, #84	@ 0x54
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037b2:	e853 3f00 	ldrex	r3, [r3]
 80037b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	461a      	mov	r2, r3
 80037c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80037ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037d0:	e841 2300 	strex	r3, r2, [r1]
 80037d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1e6      	bne.n	80037aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3308      	adds	r3, #8
 80037e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	e853 3f00 	ldrex	r3, [r3]
 80037ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	f023 0301 	bic.w	r3, r3, #1
 80037f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3308      	adds	r3, #8
 80037fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003800:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003802:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003804:	e841 2300 	strex	r3, r2, [r1]
 8003808:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800380a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1e5      	bne.n	80037dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003814:	2b01      	cmp	r3, #1
 8003816:	d118      	bne.n	800384a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	e853 3f00 	ldrex	r3, [r3]
 8003824:	60bb      	str	r3, [r7, #8]
   return(result);
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	f023 0310 	bic.w	r3, r3, #16
 800382c:	647b      	str	r3, [r7, #68]	@ 0x44
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	461a      	mov	r2, r3
 8003834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003836:	61bb      	str	r3, [r7, #24]
 8003838:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383a:	6979      	ldr	r1, [r7, #20]
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	e841 2300 	strex	r3, r2, [r1]
 8003842:	613b      	str	r3, [r7, #16]
   return(result);
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1e6      	bne.n	8003818 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2220      	movs	r2, #32
 800384e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800385e:	bf00      	nop
 8003860:	3754      	adds	r7, #84	@ 0x54
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <memset>:
 800386a:	4402      	add	r2, r0
 800386c:	4603      	mov	r3, r0
 800386e:	4293      	cmp	r3, r2
 8003870:	d100      	bne.n	8003874 <memset+0xa>
 8003872:	4770      	bx	lr
 8003874:	f803 1b01 	strb.w	r1, [r3], #1
 8003878:	e7f9      	b.n	800386e <memset+0x4>
	...

0800387c <__libc_init_array>:
 800387c:	b570      	push	{r4, r5, r6, lr}
 800387e:	4d0d      	ldr	r5, [pc, #52]	@ (80038b4 <__libc_init_array+0x38>)
 8003880:	4c0d      	ldr	r4, [pc, #52]	@ (80038b8 <__libc_init_array+0x3c>)
 8003882:	1b64      	subs	r4, r4, r5
 8003884:	10a4      	asrs	r4, r4, #2
 8003886:	2600      	movs	r6, #0
 8003888:	42a6      	cmp	r6, r4
 800388a:	d109      	bne.n	80038a0 <__libc_init_array+0x24>
 800388c:	4d0b      	ldr	r5, [pc, #44]	@ (80038bc <__libc_init_array+0x40>)
 800388e:	4c0c      	ldr	r4, [pc, #48]	@ (80038c0 <__libc_init_array+0x44>)
 8003890:	f000 f818 	bl	80038c4 <_init>
 8003894:	1b64      	subs	r4, r4, r5
 8003896:	10a4      	asrs	r4, r4, #2
 8003898:	2600      	movs	r6, #0
 800389a:	42a6      	cmp	r6, r4
 800389c:	d105      	bne.n	80038aa <__libc_init_array+0x2e>
 800389e:	bd70      	pop	{r4, r5, r6, pc}
 80038a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80038a4:	4798      	blx	r3
 80038a6:	3601      	adds	r6, #1
 80038a8:	e7ee      	b.n	8003888 <__libc_init_array+0xc>
 80038aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ae:	4798      	blx	r3
 80038b0:	3601      	adds	r6, #1
 80038b2:	e7f2      	b.n	800389a <__libc_init_array+0x1e>
 80038b4:	08003914 	.word	0x08003914
 80038b8:	08003914 	.word	0x08003914
 80038bc:	08003914 	.word	0x08003914
 80038c0:	08003918 	.word	0x08003918

080038c4 <_init>:
 80038c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c6:	bf00      	nop
 80038c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ca:	bc08      	pop	{r3}
 80038cc:	469e      	mov	lr, r3
 80038ce:	4770      	bx	lr

080038d0 <_fini>:
 80038d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d2:	bf00      	nop
 80038d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038d6:	bc08      	pop	{r3}
 80038d8:	469e      	mov	lr, r3
 80038da:	4770      	bx	lr
